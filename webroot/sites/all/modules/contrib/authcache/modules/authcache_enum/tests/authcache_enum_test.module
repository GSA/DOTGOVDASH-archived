<?php

/**
 * @file
 * Stub module for Authcache Enum test.
 */


/**
 * Implements hook_authcache_enum_anonymous_keys()
 */
function authcache_enum_test_authcache_enum_anonymous_keys() {
  return HookStub::record(__FUNCTION__, func_get_args());
}

/**
 * Implements hook_authcache_enum_anonymous_keys_alter()
 */
function authcache_enum_test_authcache_enum_anonymous_keys_alter(&$keys) {
  if (($alter = HookStub::record(__FUNCTION__, func_get_args()))) {
    $keys = array_diff($keys, $alter['delete']);
    $keys = array_merge($keys, $alter['insert']);
  }
}

/**
 * Implements hook_authcache_enum_key_properties()
 */
function authcache_enum_test_authcache_enum_key_properties() {
  return HookStub::record(__FUNCTION__, func_get_args());
}

/**
 * Implements hook_authcache_enum_key_properties_alter()
 */
function authcache_enum_test_authcache_enum_key_properties_alter(&$properties) {
  ksort($properties);
  return HookStub::record(__FUNCTION__, func_get_args());
}

/**
 * Implements hook_authcache_enum_key_property_info()
 */
function authcache_enum_test_authcache_enum_key_property_info() {
  return HookStub::record(__FUNCTION__, func_get_args());
}

/**
 * Implements hook_authcache_enum_key_property_info_alter()
 */
function authcache_enum_test_authcache_enum_key_property_info_alter(&$property_info) {
  if (($alter = HookStub::record(__FUNCTION__, func_get_args()))) {
    $property_info = array_diff_key($property_info, $alter['delete']);
    $property_info = $alter['insert'] + $property_info;
  }
}
