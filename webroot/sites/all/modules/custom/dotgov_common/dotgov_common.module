<?php
/*
* Dotgov Dashboard common functions module
*/

function dotgov_common_theme($existing, $type, $theme, $path) {
    return array(
        'govwide_reports_page' => array(
            'template' => 'dotgov-common-govwide-page',
            'variables' => array('nid' => NULL),
            'path' => drupal_get_path('module', 'dotgov_common') . '/templates',
        ),
        'govwide_graphs_new_page' => array(
            'template' => 'dotgov-common-govwide-graphsnewpage',
            'variables' => array('nid' => NULL),
            'path' => drupal_get_path('module', 'dotgov_common') . '/templates',
        ),
        'govwide_graphs_page' => array(
            'template' => 'dotgov-common-govwide-graphspage',
            'variables' => array('nid' => NULL),
            'path' => drupal_get_path('module', 'dotgov_common') . '/templates',
        ),
        'agencywide_accessgraphs_page' => array(
            'template' => 'dotgov-common-agencyacess-graph',
            'variables' => array('nid' => NULL),
            'path' => drupal_get_path('module', 'dotgov_common') . '/templates',
        ),
        'agencywide_accessible_datatable_page' => array(
            'template' => 'dotgov-common-agencyacess-table',
            'variables' => array('nid' => NULL),
            'path' => drupal_get_path('module', 'dotgov_common') . '/templates',
        ),
        'agencywide_mobgraphs_page' => array(
            'template' => 'dotgov-common-agencymobile-graph',
            'variables' => array('nid' => NULL),
            'path' => drupal_get_path('module', 'dotgov_common') . '/templates',
        ),
        'agencywide_mobusabgraphs_page' => array(
          'template' => 'dotgov-common-agencymobile-usab-graph',
          'variables' => array('nid' => NULL),
          'path' => drupal_get_path('module', 'dotgov_common') . '/templates',
        ),
        'govwide_mobgraphs_page' => array(
            'template' => 'dotgov-common-govwidemobile-graph',
            'variables' => array('nid' => NULL),
            'path' => drupal_get_path('module', 'dotgov_common') . '/templates',
        ),
        'govwide_mobusabgraphs_page' => array(
          'template' => 'dotgov-common-govwidemobile-usab-graph',
          'variables' => array('nid' => NULL),
          'path' => drupal_get_path('module', 'dotgov_common') . '/templates',
        ),
        'govwide_collapsible_page' => array(
            'template' => 'dotgov-common-collapsible-graphspage',
            'variables' => array('nid' => NULL),
            'path' => drupal_get_path('module', 'dotgov_common') . '/templates',
        ),
        'agencywide_searchstatus_page' => array(
            'template' => 'dotgov-common-searchstatus-graph',
            'variables' => array('nid' => NULL),
            'path' => drupal_get_path('module', 'dotgov_common') . '/templates',
        ),
        'agencywide_searchengines_page' => array(
            'template' => 'dotgov-common-searchengines-graph',
            'variables' => array('nid' => NULL),
            'path' => drupal_get_path('module', 'dotgov_common') . '/templates',
        ),
        'govwide_searchstatus_page' => array(
            'template' => 'dotgov-common-searchstatus-govwide-graph',
            'variables' => array('nid' => NULL),
            'path' => drupal_get_path('module', 'dotgov_common') . '/templates',
        ),
        'govwide_searchengines_page' => array(
            'template' => 'dotgov-common-searchengines-govwide-graph',
            'variables' => array('nid' => NULL),
            'path' => drupal_get_path('module', 'dotgov_common') . '/templates',
        ),

    );
}

function dotgov_common_siteAsocScanids($websiteid){
    $query = db_query("select bundle,entity_id from field_data_field_website_id where field_website_id_nid=:nid", array(':nid' => $websiteid));
    foreach ($query as $result) {
        $websites[$result->bundle] = $result->entity_id;
    }
    return $websites;
}

/**
 * Get taxonomy terms associated to ().
 */
function dotgov_common_getNodeTaxonomy($nid)
{
    $terms = array();
    $results = db_query("SELECT  a.name as taxKey,a.tid as taxId, b.name as taxVoc FROM    taxonomy_term_data a, taxonomy_vocabulary b, taxonomy_index c WHERE   c.tid = a.tid AND     a.vid = b.vid AND     c.nid =:nid and b.name='website tags'", array(':nid' => $nid));
    foreach ($results as $result) {
        $terms[$result->taxId] = $result->taxKey;
    }
    return $terms;

}

/*
 * Find Last scan date
 */
function dotgov_common_lastScanDate(){
    $query = db_query("select nid,created from node where type='scans' order by nid desc limit 1");
    foreach ($query as $result) {
        $lastscantime = $result->created;
    }
    // Scan takes 2 or 3 days to complete.
    // Query returns lastscan date at the start of the scan not when scan completes.
    // Adding 2 or 3 days makes san date to show scan completion date.
    print date("m/d/Y",$lastscantime + + (2 * 24 * 60 * 60));
}

/*
 * Find Last scan date and return as str
 */
function dotgov_common_lastScanDateStr(){
    $query = db_query("select nid,created from node where type='scans' order by nid desc limit 1");
    foreach ($query as $result) {
        $lastscantime = $result->created;
    }
    return date("m/d/Y",$lastscantime + + (2 * 24 * 60 * 60))."";
}

/*
* Hook Facet Alter
*/

function dotgov_common_facet_items_alter(&$build, &$settings) {
    $enabled_fields =  array("sm_field_hsts_status","ism_field_https_status","sm_field_redirect","bm_field_ssl_v2_support","bm_field_ssl_v3_support","bm_field_tls_v1_support","bm_field_tls_v1_1_support","bm_field_tls_v1_2_support","bm_field_certificate_ocsp_stapli","bm_field_http_public_hpkp","bm_field_deflate_compression","bm_field_session_secure_renegoti","bm_field_have_proper_404","sm_field_enforce_https","bm_field_dap_status","bm_field_xss_protection");
    $vulnerable_fields = array("bm_field_openssl_ccs_injection","bm_field_openssl_heartbleed","bm_field_downgrade_attacks");
    if (in_array($settings->facet,$enabled_fields)) {
        foreach($build as $key => $item) {
            if($key == 'true')
                $build[$key]["#markup"] = "Enabled";
            elseif($key == 'false')
                $build[$key]["#markup"] = "Disabled";
        }
    }
    if(in_array($settings->facet,$vulnerable_fields)) {
        foreach($build as $key => $item) {
            if($key == 'true')
                $build[$key]["#markup"] = "Vulnerable";
            elseif($key == 'false')
                $build[$key]["#markup"] = "Not Vulnerable";
        }
    }
    if ($settings->facet == "im_field_website_tags") {
        foreach($build as $key => $item) {
            if ($item['#markup'] == 'VULNERABLE') {
                $build[$key]["#markup"] = "Insecure Protocol";
            }
        }
    }
    $fix_encode_fields = array("sm_field_certificate_issuer","sm_field_certificate_provider");
    if (in_array($settings->facet,$fix_encode_fields)) {
        foreach($build as $key => $item) {
            $build[$key]["#markup"] = html_entity_decode($item["#markup"], ENT_QUOTES, 'UTF-8');
        }
    }
  foreach($build as $key => $item) {
    $build[$key]["#markup"] = ucfirst($item["#markup"]);
  }
}

/*
 * Fast Function to get the technology tags associated to a node
 */

function dotgov_commmon_get_techTerms($nid){
    $terms = array();
    $results = db_query("SELECT  a.name as taxKey,a.tid as taxId, b.name as taxVoc FROM    taxonomy_term_data a, taxonomy_vocabulary b, taxonomy_index c WHERE   c.tid = a.tid AND     a.vid = b.vid AND     c.nid =:nid and b.name='technology'", array(':nid' => $nid));
    foreach ($results as $result) {
        $terms[$result->taxKey] = $result->taxVoc;
    }
    $techInfo = dotgov_common_loadJson($terms);
    return $techInfo;

}

/*
 * Get Apps Json Data
 */
function dotgov_common_loadJson($terms){
    $string = file_get_contents(drupal_get_path('module', 'dotgov_common')."/apps.json");
    $json_a = json_decode($string, true);

    $techstack = array();
    //print_r($terms);
    foreach($terms as $key=>$value){
        $version = '';
        if (strpos($key, "_") !== false) {
            $spstring = explode("_",$key);
            $key = $spstring[0];
            $version = $spstring[1];
        }
        $techstack[$key] = $json_a['apps'][$key];
        $cat = $json_a['apps'][$key]['cats'][0];
        $catg = $json_a['categories'][$cat];
        $techstack[$key]['category'] = $catg;
        if($version != '')
            $techstack[$key]['appversion'] = $version;
    }
    //print_r($techstack);
    return $techstack;
}

/**
 * Implements hook_block_info().
 */
function dotgov_common_block_info() {
    $blocks['technology_stack'] = array(
        // The name that will appear in the block list.
        'info' => t('Technology Information'),
        'cache' => DRUPAL_NO_CACHE,
        'status' => FALSE
    );
    $blocks['govwide_tabular'] = array(
        // The name that will appear in the block list.
        'info' => t('Government-Wide Tabular Report'),
        'cache' => DRUPAL_NO_CACHE,
        'status' => FALSE
    );
    $blocks['govwide_graph_new'] = array(
        // The name that will appear in the block list.
        'info' => t('Government-Wide Chart New'),
        'cache' => DRUPAL_NO_CACHE,
        'status' => FALSE
    );
    $blocks['govwide_graph'] = array(
        // The name that will appear in the block list.
        'info' => t('Government-Wide Chart'),
        'cache' => DRUPAL_NO_CACHE,
        'status' => FALSE
    );
    $blocks['agencywide_accessible_datatable'] = array(
        // The name that will appear in the block list.
        'info' => t('Agency-Wide Accessible Report'),
        'cache' => DRUPAL_NO_CACHE,
        'status' => FALSE
    );
    $blocks['govwide_collapsible_graph'] = array(
        // The name that will appear in the block list.
        'info' => t('Government-Wide Collapsible Report'),
        'cache' => DRUPAL_NO_CACHE,
        'status' => FALSE
    );
    return $blocks;
}
/*
 * Implements Hook Block view
 */
function dotgov_common_block_view($delta = 0)
{
    $block = array();
    switch ($delta) {
        case 'technology_stack':
            $block['subject'] = t('Technology Information');
            if (user_access('access content')) {
                // Retrieve and process data here.
                if(arg(1) != '') {
                    $websiteNodeid = arg(1);
                    $block['content'] = dotgov_commmon_getTechStackInfo($websiteNodeid);
                }
                else{
                    $block['content'] = "Sorry No Data to display";
                }
            }
            break;

        case 'govwide_tabular':
            $block['subject'] = t('Government-Wide Tabular Report');
            // Retrieve and process data here.
            $govwidedata['actualdata'] = dotgov_common_govwideTrendData();
            $govwidedata['graph_title'] = "Government-Wide Tabular Report";
            $analysis_output =  theme('govwide_reports_page', array('govwidedata' => $govwidedata));
            $block = array(
                'subject' => NULL,
                'content' => $analysis_output,
            );
            break;

        case 'govwide_graph_new':
            $block['subject'] = t('Government-Wide Chart New');
            // Retrieve and process data here.
            $govwidedata['actualdata'] = dotgov_common_govwideTrendData();
            $govwidedata['graph_title'] = "Government-Wide Chart New";
            $analysis_output =  theme('govwide_graphs_new_page', array('govwidedata' => $govwidedata));
            $block = array(
                'subject' => NULL,
                'content' => $analysis_output,
            );
            break;
        case 'govwide_graph':
            $block['subject'] = t('Government-Wide Chart');
            // Retrieve and process data here.
            $govwidedata['actualdata'] = dotgov_common_govwideTrendData();
            $govwidedata['graph_title'] = "Government-Wide Chart";
            $analysis_output =  theme('govwide_graphs_page', array('govwidedata' => $govwidedata));
            $block = array(
                'subject' => NULL,
                'content' => $analysis_output,
            );
            break;
        case 'agencywide_accessible_datatable':
            $block['subject'] = t('Agency-Wide Accessible Data');
            // Retrieve and process data here.
            $govwidedata['actualdata'] = dotgov_common_agencywideAcessibility();
            $analysis_output =  theme('agencywide_accessible_datatable_page', array('govwidedata' => $govwidedata));
            $block = array(
                'subject' => NULL,
                'content' => $analysis_output,
            );
            break;
        case 'govwide_collapsible_graph':
            $block['subject'] = t('Government-Wide Collapsible Data');
            // Retrieve and process data here.
            $govwidedata['actualdata'] = dotgov_common_getAllAgencyComplianceData();
            $analysis_output =  theme('govwide_collapsible_page', array('govwidedata' => $govwidedata));
            $block = array(
                'subject' => NULL,
                'content' => $analysis_output,
            );
            break;
    }
    return $block;
}

function dotgov_common_agencywideAcessibility(){
    $agencyData = array();
    $agencycntresults = db_query("select field_web_agency_id_nid, count(a.title) as cnt from node a,field_data_field_web_agency_id b  where a.type=b.bundle and a.status ='1' and a.nid=b.entity_id and a.type='website' group by field_web_agency_id_nid");
    foreach ($agencycntresults as $agencycntresult) {
        $agencytitle = db_query("select title from node where nid=:nid",array(":nid"=>$agencycntresult->field_web_agency_id_nid))->fetchField();
        $agencyData[$agencycntresult->field_web_agency_id_nid]['websitenos'] = $agencycntresult->cnt;
        $agencyData[$agencycntresult->field_web_agency_id_nid]['agencyname'] = $agencytitle;

    }

    $agencyresults = db_query("select field_web_agency_id_nid,sum(c.field_accessible_group_colorcont_value) as avg_colcontr_value, sum(d.field_accessible_group_htmlattri_value) as avg_htmlattr_value, sum(e.field_accessible_group_missingim_value) as avg_missingimg_value from node a , field_data_field_web_agency_id b , field_data_field_accessible_group_colorcont c, field_data_field_accessible_group_htmlattri d, field_data_field_accessible_group_missingim e  where a.type='508_scan_information' and a.type=b.bundle and a.status ='1' and a.nid=b.entity_id and b.entity_id=c.entity_id and  b.entity_id=d.entity_id and  b.entity_id=e.entity_id group by field_web_agency_id_nid");
    foreach ($agencyresults as $agencyresult) {
        $agencyData[$agencyresult->field_web_agency_id_nid]['colorcontr'] = $agencyresult->avg_colcontr_value;
        $agencyData[$agencyresult->field_web_agency_id_nid]['colorcontr_avg'] = number_format((float)$agencyresult->avg_colcontr_value/$agencyData[$agencyresult->field_web_agency_id_nid]['websitenos'], 2, '.', '');
        $agencyData[$agencyresult->field_web_agency_id_nid]['htmlattr'] = $agencyresult->avg_htmlattr_value;
        $agencyData[$agencyresult->field_web_agency_id_nid]['htmlattr_avg'] = number_format((float)$agencyresult->avg_htmlattr_value/$agencyData[$agencyresult->field_web_agency_id_nid]['websitenos'], 2, '.', '');
        $agencyData[$agencyresult->field_web_agency_id_nid]['missingimg'] = $agencyresult->avg_missingimg_value;
        $agencyData[$agencyresult->field_web_agency_id_nid]['missingimg_avg'] = number_format((float)$agencyresult->avg_missingimg_value/$agencyData[$agencyresult->field_web_agency_id_nid]['websitenos'], 2, '.', '');
    }

    return $agencyData;
}
/*
 *
 * Get technology stack information for a single domain
 */
function dotgov_commmon_getTechStackInfo($nid){
    $techterms = dotgov_commmon_get_techTerms($nid);
    $output = "<div id='techstack' class='row dataset-resources'>";
    if(count($techterms) != 0) {
        foreach ($techterms as $techkey => $techval) {
            if ($techval[ 'icon' ] == "")
                $techval[ 'icon' ] = "default.svg";
            if (trim($techval[ 'category' ][ 'name' ]) == "")
                $techval[ 'category' ][ 'name' ] = "Technology";
            $output .= "<div class='col-sm-12 nopadding dataset-resources'><span id='app-button' class='app-button'>" . $techval['category']['name'] . " :&nbsp;<img alt='app-icon' class='app-icon' src='/" . drupal_get_path('module', 'dotgov_common') . "/images/icons/" . $techval['icon'] . "'>$techkey " . $techval['appversion'] . "</span></div>";
        }
    }
    else
        $output .= '<div>No Technology Stack Information available.</div>';
    $output .= "</div>";

    return $output;
}
/*
 * Create Nice Looking Tooltip on any div or class. Just pass the id and type(class or id). This will genrate the dynamic css
 */
function dotgov_common_tooltip($id,$type){
    if($type == 'id')
        $cssid = "#".$id;
    elseif($type == 'class')
        $cssid = ".".$id;

    $dyncss = "<style>
$cssid {
    position: relative;
    display: inline-block;
}

$cssid .tooltiptext {
    visibility: hidden;
    position: absolute;
    background-color: #555;
    color: #fff;
    text-align: center;
    border-radius: 6px;
    z-index: 1;
    opacity: 0;
    transition: opacity 0.3s;
}

$cssid .tooltiptext::after {
    position: absolute;
    bottom: 100%;
    left: 50%;
    margin-left: -5px;
    border-width: 5px;
    border-style: solid;
    border-color: #555 transparent transparent transparent;
}

$cssid:hover .tooltiptext {
    visibility: visible;
    opacity: 1;
}
$cssid .tooltip-left {
    top: -5px;
    bottom: auto;
    right: 128%;
}
</style>";
    print $dyncss;
}

function dotgov_common_govwideTrendData(){
    //Find Number of published websites
    $curdate = date("Y-m-d");
    $websitenos = db_query("select count(*) from node a, field_data_field_agency_branch b where a.type='website' and a.status ='1' and a.nid=b.entity_id and  b.field_agency_branch_value='executive'")->fetchField();
    $agencynos = db_query("select count(*) from node a, field_data_field_agency_branch b where a.type='agency' and a.status ='1' and a.nid=b.entity_id and  b.field_agency_branch_value='executive'")->fetchField();
    $avg_https = round(db_query("select avg(a.field_https_score_value) as avg_value from field_data_field_https_score a , node b where a.entity_id=b.nid and b.type='website' and b.status='1'")->fetchField());
    $avg_dap = round(db_query("select avg(a.field_dap_score_value) as avg_value from field_data_field_dap_score a , node b where a.entity_id=b.nid and b.type='website' and b.status='1'")->fetchField());
    $avg_mob_overall = round(db_query("select avg(a.field_mobile_overall_score_value) as avg_value from field_data_field_mobile_overall_score a , node b where a.entity_id=b.nid and b.type='website' and b.status='1'")->fetchField());
    $avg_mob_perform = round(db_query("select avg(a.field_mobile_performance_score_value) as avg_value from field_data_field_mobile_performance_score a , node b where a.entity_id=b.nid and b.type='website' and b.status='1'")->fetchField());
    $avg_mob_usab = round(db_query("select avg(a.field_mobile_usability_score_value) as avg_value from field_data_field_mobile_usability_score a , node b where a.entity_id=b.nid and b.type='website' and b.status='1'")->fetchField());
    $avg_sitespeed = round(db_query("select avg(a.field_site_speed_score_value) as avg_value from field_data_field_site_speed_score a , node b where a.entity_id=b.nid and b.type='website' and b.status='1'")->fetchField());
    $avg_ipv6 = round(db_query("select avg(a.field_ipv6_score_value) as avg_value from field_data_field_ipv6_score a , node b where a.entity_id=b.nid and b.type='website' and b.status='1'")->fetchField());
    $avg_dnssec = round(db_query("select avg(a.field_dnssec_score_value) as avg_value from field_data_field_dnssec_score a , node b where a.entity_id=b.nid and b.type='website' and b.status='1'")->fetchField());
    $avg_rc4 = round(db_query("select avg(a.field_free_of_insecr_prot_score_value) as avg_value from field_data_field_free_of_insecr_prot_score a , node b where a.entity_id=b.nid and b.type='website' and b.status='1'")->fetchField());
    $avg_m15 = round(db_query("select avg(a.field_m15_13_compliance_score_value) as avg_value from field_data_field_m15_13_compliance_score a , node b where a.entity_id=b.nid and b.type='website' and b.status='1'")->fetchField());
    $avg_uswds = round(db_query("select avg(a.field_uswds_score_value) as avg_value from field_data_field_uswds_score a , node b where a.entity_id=b.nid and b.type='website' and b.status='1'")->fetchField());

  $govwidewebsite['websitenos'] = $websitenos;
    $govwidewebsite['agencynos'] = $agencynos;
    $govwidewebsite['avg_https'] = $avg_https;
    $govwidewebsite['avg_dap'] = $avg_dap;
//    $govwidewebsite['avg_mob_overall'] = $avg_mob_overall;
//    $govwidewebsite['avg_mob_perform'] = $avg_mob_perform;
//    $govwidewebsite['avg_mob_usab'] = $avg_mob_usab;
    $govwidewebsite['avg_sitespeed'] = $avg_sitespeed;
    $govwidewebsite['avg_ipv6'] = $avg_ipv6;
    $govwidewebsite['avg_dnssec'] = $avg_dnssec;
    $govwidewebsite['avg_rc4'] = $avg_rc4;
    $govwidewebsite['avg_m15'] = $avg_m15;
    return $govwidewebsite;
}

/*
 * Get Agency Data
 */

function dotgov_common_getAgencyComplianceData($agencyid){
    $agencydata = array();
//Query to get https data for an agency
    $httpresults = db_query("select field_https_status_value,count(field_https_status_value) as complnum from node a , field_data_field_https_status b , field_data_field_web_agency_id c where a.status='1' and a.nid=b.entity_id and a.nid=c.entity_id and b.entity_id=c.entity_id and c.field_web_agency_id_nid=:agencyid and a.type='https_dap_scan_information' group by field_https_status_value;
", array(':agencyid' => $agencyid));
    foreach ($httpresults as $httpresult) {
        if($httpresult->field_https_status_value == 'Yes')
            $agencydata['https_compliant'] += $httpresult->complnum;
        if($httpresult->field_https_status_value == 'No')
            $agencydata['https_noncompliant'] += $httpresult->complnum;
    }
//Query to get DAP data
    $dapresults = db_query("select field_dap_score_value,count(field_dap_score_value)  as complnum from field_data_field_dap_score a , node b, field_data_field_web_agency_id c where a.entity_id=b.nid and a.entity_id=c.entity_id  and c.bundle='website' and b.status='1' and c.field_web_agency_id_nid=:agencyid group by field_dap_score_value", array(':agencyid' => $agencyid));
    foreach ($dapresults as $dapresult) {
        if($dapresult->field_dap_score_value == '100')
            $agencydata['dap_compliant'] += $dapresult->complnum;
        if($dapresult->field_dap_score_value == '0')
            $agencydata['dap_noncompliant'] += $dapresult->complnum;
        $agencydata['dap_tottracked'] += $dapresult->complnum;
    }

//Query to get DNSSEC data
    $dnsresults = db_query("select field_dnssec_compliance_value,count(field_dnssec_compliance_value)  as complnum from node a , field_data_field_dnssec_compliance b , field_data_field_web_agency_id c where a.status='1' and a.nid=b.entity_id and a.nid=c.entity_id and b.entity_id=c.entity_id and c.field_web_agency_id_nid=:agencyid and a.type='domain_scan_information'  group by field_dnssec_compliance_value;
", array(':agencyid' => $agencyid));
    foreach ($dnsresults as $dnsresult) {
        if($dnsresult->field_dnssec_compliance_value == '1')
            $agencydata['dns_compliant'] += $dnsresult->complnum;
        if($dnsresult->field_dnssec_compliance_value == '0')
            $agencydata['dns_noncompliant'] += $dnsresult->complnum;
    }

//Query to get IPV6 data
    $ipv6results = db_query("select field_ipv6_compliance_value,count(field_ipv6_compliance_value)  as complnum from node a , field_data_field_ipv6_compliance b , field_data_field_web_agency_id c where a.status='1' and a.nid=b.entity_id and a.nid=c.entity_id and b.entity_id=c.entity_id and c.field_web_agency_id_nid=:agencyid and a.type='domain_scan_information'  group by field_ipv6_compliance_value;", array(':agencyid' => $agencyid));
    foreach ($ipv6results as $ipv6result) {
        if($ipv6result->field_ipv6_compliance_value == '1')
            $agencydata['ipv6_compliant'] += $ipv6result->complnum;
        if($ipv6result->field_ipv6_compliance_value == '0')
            $agencydata['ipv6_noncompliant'] += $ipv6result->complnum;
    }

    //Query to get M15-13 data
    $m15results = db_query("select field_compl_m_15_13_bod_value,count(field_compl_m_15_13_bod_value)  as complnum from node a , field_data_field_compl_m_15_13_bod b , field_data_field_web_agency_id c where a.status='1' and a.nid=b.entity_id and a.nid=c.entity_id and b.entity_id=c.entity_id and c.field_web_agency_id_nid=:agencyid and a.type='https_dap_scan_information'  group by field_compl_m_15_13_bod_value;
", array(':agencyid' => $agencyid));
    foreach ($m15results as $m15result) {
        if($m15result->field_compl_m_15_13_bod_value == '1')
            $agencydata['m15_compliant'] += $m15result->complnum;
        if($m15result->field_compl_m_15_13_bod_value == '0')
            $agencydata['m15_noncompliant'] += $m15result->complnum;
        $agencydata['m15_tracked'] += $m15result->complnum;

    }

    //Query to get USWDS for Agency
    $uswdsresults = db_query("select field_uswds_score_value,count(field_uswds_score_value)  as complnum from field_data_field_uswds_score a , node b, field_data_field_web_agency_id c where a.entity_id=b.nid and a.entity_id=c.entity_id  and c.bundle='website' and b.status='1' and c.field_web_agency_id_nid=:agencyid group by field_uswds_score_value", array(':agencyid' => $agencyid));
    foreach ($uswdsresults as $uswdsresult) {
        if($uswdsresult->field_uswds_score_value == '100')
            $agencydata['uswds_compliant'] += $uswdsresult->complnum;
        if($uswdsresult->field_uswds_score_value == '0')
            $agencydata['uswds_noncompliant'] += $uswdsresult->complnum;
        $agencydata['uswds_tottracked'] += $uswdsresult->complnum;
    }

    //Query to get Insecure protocol data
    $insecresults = db_query("select field_free_of_rc4_3des_and_sslv2_value,count(field_free_of_rc4_3des_and_sslv2_value)  as complnum from node a , field_data_field_free_of_rc4_3des_and_sslv2 b , field_data_field_web_agency_id c where a.status='1' and a.nid=b.entity_id and a.nid=c.entity_id and b.entity_id=c.entity_id and c.field_web_agency_id_nid=:agencyid and a.type='https_dap_scan_information'  group by field_free_of_rc4_3des_and_sslv2_value", array(':agencyid' => $agencyid));
    foreach ($insecresults as $insecresult) {
        if($insecresult->field_free_of_rc4_3des_and_sslv2_value == '1')
            $agencydata['insec_compliant'] += $insecresult->complnum;
        if($insecresult->field_free_of_rc4_3des_and_sslv2_value == '0')
            $agencydata['insec_noncompliant'] += $insecresult->complnum;
        $agencydata['free_tracked'] += $insecresult->complnum;
    }

//    //Query to get Downgrade data
//    $downgradresults = db_query("select field_downgrade_attacks_value,count(field_downgrade_attacks_value)  as complnum from node a , field_data_field_downgrade_attacks b , field_data_field_web_agency_id c where a.status='1' and a.nid=b.entity_id and a.nid=c.entity_id and b.entity_id=c.entity_id and c.field_web_agency_id_nid=:agencyid and a.type='domain_scan_information'  group by field_downgrade_attacks_value", array(':agencyid' => $agencyid));
//    foreach ($downgradresults as $downgradresult) {
//        if($downgradresult->field_downgrade_attacks_value == '1')
//            $agencydata['downgrade_exposed'] = $downgradresult->complnum;
//        if($downgradresult->field_downgrade_attacks_value == '0')
//            $agencydata['downgrade_notexposed'] = $downgradresult->complnum;
//    }
//
//    //Query to get Opensssl CCS injection data
//    $ccsresults = db_query("select field_openssl_ccs_injection_value,count(field_openssl_ccs_injection_value)  as complnum from node a , field_data_field_openssl_ccs_injection b , field_data_field_web_agency_id c where a.status='1' and a.nid=b.entity_id and a.nid=c.entity_id and b.entity_id=c.entity_id and c.field_web_agency_id_nid=:agencyid and a.type='domain_scan_information'  group by field_openssl_ccs_injection_value", array(':agencyid' => $agencyid));
//    foreach ($ccsresults as $ccsresult) {
//        if($ccsresult->field_openssl_ccs_injection_value == '1')
//            $agencydata['ccs_exposed'] = $ccsresult->complnum;
//        if($ccsresult->field_openssl_ccs_injection_value == '0')
//            $agencydata['ccs_notexposed'] = $ccsresult->complnum;
//    }

    //Query to get SSL v2  data
    $v2results = db_query("select field_ssl_v2_from_pulse_value,count(field_ssl_v2_from_pulse_value)  as complnum from node a , field_data_field_ssl_v2_from_pulse b , field_data_field_web_agency_id c where a.status='1' and a.nid=b.entity_id and a.nid=c.entity_id and b.entity_id=c.entity_id and c.field_web_agency_id_nid=:agencyid and a.type='https_dap_scan_information'  group by field_ssl_v2_from_pulse_value", array(':agencyid' => $agencyid));
    foreach ($v2results as $v2result) {
        if($v2result->field_ssl_v2_from_pulse_value == 'Yes')
            $agencydata['v2_support'] += $v2result->complnum;
        else
            $agencydata['v2_nosupport'] += $v2result->complnum;
    }

    //Query to get SSL v3  data
    $v3results = db_query("select field_ssl_v3_from_pulse_value,count(field_ssl_v3_from_pulse_value)  as complnum from node a , field_data_field_ssl_v3_from_pulse b , field_data_field_web_agency_id c where a.status='1' and a.nid=b.entity_id and a.nid=c.entity_id and b.entity_id=c.entity_id and c.field_web_agency_id_nid=:agencyid and a.type='https_dap_scan_information'  group by field_ssl_v3_from_pulse_value", array(':agencyid' => $agencyid));
    foreach ($v3results as $v3result) {
        if($v3result->field_ssl_v3_from_pulse_value == 'Yes')
            $agencydata['v3_support'] += $v3result->complnum;
        else
            $agencydata['v3_nosupport'] += $v3result->complnum;
    }


    //Query to get TLs v1  data
    $tls1results = db_query("select field_tls_v1_support_value,count(field_tls_v1_support_value)  as complnum from node a , field_data_field_tls_v1_support b , field_data_field_web_agency_id c where a.status='1' and a.nid=b.entity_id and a.nid=c.entity_id and b.entity_id=c.entity_id and c.field_web_agency_id_nid=:agencyid and a.type='domain_scan_information'  group by field_tls_v1_support_value", array(':agencyid' => $agencyid));
    foreach ($tls1results as $tls1result) {
        if($tls1result->field_tls_v1_support_value == '1')
            $agencydata['tlsv1_support'] += $tls1result->complnum;
        else
            $agencydata['tlsv1_nosupport'] += $tls1result->complnum;
    }

    //Query to get TLs v1.1  data
    $tls11results = db_query("select field_tls_v1_1_support_value,count(field_tls_v1_1_support_value)  as complnum from node a , field_data_field_tls_v1_1_support b , field_data_field_web_agency_id c where a.status='1' and a.nid=b.entity_id and a.nid=c.entity_id and b.entity_id=c.entity_id and c.field_web_agency_id_nid=:agencyid and a.type='domain_scan_information'  group by field_tls_v1_1_support_value", array(':agencyid' => $agencyid));
    foreach ($tls11results as $tls11result) {
        if($tls11result->field_tls_v1_1_support_value == '1')
            $agencydata['tlsv11_support'] += $tls11result->complnum;
        else
            $agencydata['tlsv11_nosupport'] += $tls11result->complnum;
    }


    //Query to get SSL v2  data
    $v2results = db_query("select field_ssl_v2_from_pulse_value,count(field_ssl_v2_from_pulse_value)  as complnum from node a , field_data_field_ssl_v2_from_pulse b , field_data_field_web_agency_id c where a.status='1' and a.nid=b.entity_id and a.nid=c.entity_id and b.entity_id=c.entity_id and c.field_web_agency_id_nid=:agencyid and a.type='https_dap_scan_information'  group by field_ssl_v2_from_pulse_value", array(':agencyid' => $agencyid));
    foreach ($v2results as $v2result) {
        if($v2result->field_ssl_v2_from_pulse_value == 'Yes')
            $agencydata['v2_support'] += $v2result->complnum;
        else
            $agencydata['v2_nosupport'] += $v2result->complnum;
    }

    //Query to get Enforce HTTPS  data
    $enfhttpsresults = db_query("select field_enforce_https_value,count(field_enforce_https_value)  as complnum from node a , field_data_field_enforce_https b , field_data_field_web_agency_id c where a.status='1' and a.nid=b.entity_id and a.nid=c.entity_id and b.entity_id=c.entity_id and c.field_web_agency_id_nid=:agencyid and a.type='https_dap_scan_information'  group by field_enforce_https_value", array(':agencyid' => $agencyid));
    foreach ($enfhttpsresults as $enfhttpsresult) {
        if($enfhttpsresult->field_enforce_https_value == 'Yes')
            $agencydata['enfhttps_support'] += $enfhttpsresult->complnum;
        else
            $agencydata['enfhttps_nosupport'] += $enfhttpsresult->complnum;
    }

    //Query to get HSTS  data
    $hstsresults = db_query("select field_hsts_status_value,count(field_hsts_status_value)  as complnum from node a , field_data_field_hsts_status b , field_data_field_web_agency_id c where a.status='1' and a.nid=b.entity_id and a.nid=c.entity_id and b.entity_id=c.entity_id and c.field_web_agency_id_nid=:agencyid and a.type='https_dap_scan_information'  group by field_hsts_status_value;
", array(':agencyid' => $agencyid));
    foreach ($hstsresults as $hstsresult) {
        if($hstsresult->field_hsts_status_value == 'Yes')
            $agencydata['hsts_support'] += $hstsresult->complnum;
        else
            $agencydata['hsts_nosupport'] += $hstsresult->complnum;
    }

    //Query to get HTTPS status  data
    $httpsresults = db_query("select field_https_status_value,count(field_https_status_value)  as complnum from node a , field_data_field_https_status b , field_data_field_web_agency_id c where a.status='1' and a.nid=b.entity_id and a.nid=c.entity_id and b.entity_id=c.entity_id and c.field_web_agency_id_nid=:agencyid and a.type='https_dap_scan_information'  group by field_https_status_value
", array(':agencyid' => $agencyid));
    foreach ($httpsresults as $httpsresult) {
        if($httpsresult->field_https_status_value == 'Yes')
            $agencydata['https_support'] += $httpsresult->complnum;
        else
            $agencydata['https_nosupport'] += $httpsresult->complnum;
    }

    //Query to get Preload status  data
    $preloadresults = db_query("select field_preload_status_value,count(field_preload_status_value)  as complnum from node a , field_data_field_preload_status b , field_data_field_web_agency_id c where a.status='1' and a.nid=b.entity_id and a.nid=c.entity_id and b.entity_id=c.entity_id and c.field_web_agency_id_nid=:agencyid and a.type='https_dap_scan_information'  group by field_preload_status_value", array(':agencyid' => $agencyid));
    foreach ($preloadresults as $preloadresult) {
        if($preloadresult->field_preload_status_value == 'Yes')
            $agencydata['preload_support'] += $preloadresult->complnum;
        elseif($preloadresult->field_preload_status_value == 'Ready')
            $agencydata['preload_readysupport'] += $preloadresult->complnum;
        else
            $agencydata['preload_nosupport'] += $preloadresult->complnum;
    }


//Query to get Most Popular web servers for Agency
    $agwebservreslts = db_query("select d.title,d.status,c.name,b.field_web_server_tid,count(b.field_web_server_tid) cnt from field_data_field_web_agency_id a, field_data_field_web_server b ,taxonomy_term_data c , node d where a.field_web_agency_id_nid=:agencyid and  a.bundle='website' and a.entity_id=b.entity_id and b.field_web_server_tid=c.tid  and a.entity_id=d.nid and d.status='1' group by b.field_web_server_tid order by cnt desc limit 2", array(':agencyid' => $agencyid));
    foreach ($agwebservreslts as $agwebservres) {
        $agwebdata[$agwebservres->name] = $agwebservres->cnt;
    }
    $agencydata['ag_webserver'] = $agwebdata;


    //Query to get Most Popular Programming languages for Agency
    $agplreslts = db_query("select d.title,d.status,c.name,field_programming_languages_tid,count(field_programming_languages_tid) cnt from field_data_field_web_agency_id a, field_data_field_programming_languages b ,taxonomy_term_data c , node d where a.field_web_agency_id_nid=:agencyid and  a.bundle='website' and a.entity_id=b.entity_id and field_programming_languages_tid=c.tid  and a.entity_id=d.nid and d.status='1' group by field_programming_languages_tid order by cnt desc limit 2", array(':agencyid' => $agencyid));
    foreach ($agplreslts as $agplreslt) {
        $agpldata[$agplreslt->name] = $agplreslt->cnt;
    }
    $agencydata['ag_proglang'] = $agpldata;

    //Query to get Most Popular CMS for Agency
    $agcmsreslts = db_query("select d.title,d.status,c.name,field_cms_applications_tid,count(field_cms_applications_tid) cnt from field_data_field_web_agency_id a, field_data_field_cms_applications b ,taxonomy_term_data c , node d where a.field_web_agency_id_nid=:agencyid and  a.bundle='website' and a.entity_id=b.entity_id and field_cms_applications_tid=c.tid and c.name not like '%\_%'   and a.entity_id=d.nid and d.status='1' group by field_cms_applications_tid order by cnt desc limit 2", array(':agencyid' => $agencyid));
    foreach ($agcmsreslts as $agcmsreslt) {
        $agcmsdata[$agcmsreslt->name] = $agcmsreslt->cnt;
    }
    $agencydata['ag_cms'] = $agcmsdata;

    //Query to get Most Popular OS for Agency
    $agosreslts = db_query("select d.title,d.status,c.name,field_operating_systems_tid,count(field_operating_systems_tid) cnt from field_data_field_web_agency_id a, field_data_field_operating_systems b ,taxonomy_term_data c , node d where a.field_web_agency_id_nid=:agencyid and  a.bundle='website' and a.entity_id=b.entity_id and field_operating_systems_tid=c.tid and c.name not like '%\_%'   and a.entity_id=d.nid and d.status='1' group by field_operating_systems_tid order by cnt desc limit 2", array(':agencyid' => $agencyid));
    foreach ($agosreslts as $agosreslt) {
        $agosdata[$agosreslt->name] = $agosreslt->cnt;
    }
    $agencydata['ag_os'] = $agosdata;

    //Query to get Most Popular Javascript Framework for Agency
    $agjsreslts = db_query("select d.title,d.status,c.name,field_javascript_frameworks_tid,count(field_javascript_frameworks_tid) cnt from field_data_field_web_agency_id a, field_data_field_javascript_frameworks b ,taxonomy_term_data c , node d where a.field_web_agency_id_nid=:agencyid and  a.bundle='website' and a.entity_id=b.entity_id and field_javascript_frameworks_tid=c.tid and c.name not like '%\_%'   and a.entity_id=d.nid and d.status='1' group by field_javascript_frameworks_tid order by cnt desc limit 2", array(':agencyid' => $agencyid));
    foreach ($agjsreslts as $agjsreslt) {
        $agjsdata[$agjsreslt->name] = $agjsreslt->cnt;
    }
    $agencydata['ag_js'] = $agjsdata;

    //Query to get Most Popular CDN for Agency
    $agcdnreslts = db_query("select d.title,d.status,c.name,field_cdn_applications_tid,count(field_cdn_applications_tid) cnt from field_data_field_web_agency_id a, field_data_field_cdn_applications b ,taxonomy_term_data c , node d where a.field_web_agency_id_nid=:agencyid and  a.bundle='website' and a.entity_id=b.entity_id and field_cdn_applications_tid=c.tid and c.name not like '%\_%'   and a.entity_id=d.nid and d.status='1' group by field_cdn_applications_tid order by cnt desc limit 2", array(':agencyid' => $agencyid));
    foreach ($agcdnreslts as $agcdnreslt) {
        $agcdndata[$agcdnreslt->name] = $agcdnreslt->cnt;
    }
    $agencydata['ag_cdn'] = $agcdndata;
    //Query to get Agency Accessibility errors

    //$ag_avrg_color_cont =  round(db_query("select field_agac_color_contrast_aver_value from field_data_field_agac_color_contrast_aver a, field_data_field_web_agency_id b where a.entity_id=b.entity_id and b.field_web_agency_id_nid=:agencyid", array(':agencyid' => $agencyid))->fetchField());
    //$ag_avrg_miss_image =  round(db_query("select field_agac_missing_image_avrg_value from field_data_field_agac_missing_image_avrg a, field_data_field_web_agency_id b where a.entity_id=b.entity_id and b.field_web_agency_id_nid=:agencyid", array(':agencyid' => $agencyid))->fetchField());
    //$ag_avrg_html_attr =  round(db_query("select field_agac_html_attribute_avrg_value from field_data_field_agac_html_attribute_avrg a, field_data_field_web_agency_id b where a.entity_id=b.entity_id and b.field_web_agency_id_nid=:agencyid", array(':agencyid' => $agencyid))->fetchField());
    $ag_avrg_color_cont =  round(db_query("select sum(c.field_accessible_group_colorcont_value) as avg_value from node a , field_data_field_web_agency_id b , field_data_field_accessible_group_colorcont c  where a.type='508_scan_information' and a.type=b.bundle and a.status ='1' and a.nid=b.entity_id and b.entity_id=c.entity_id and field_web_agency_id_nid=:agencyid", array(':agencyid' => $agencyid))->fetchField());
    $ag_avrg_miss_image =  round(db_query("select sum(c.field_accessible_group_missingim_value) as avg_value from node a , field_data_field_web_agency_id b , field_data_field_accessible_group_missingim c  where a.type='508_scan_information' and a.type=b.bundle and a.status ='1' and a.nid=b.entity_id and b.entity_id=c.entity_id and field_web_agency_id_nid=:agencyid", array(':agencyid' => $agencyid))->fetchField());
    $ag_avrg_html_attr =  round(db_query("select sum(c.field_accessible_group_htmlattri_value) as avg_value from node a , field_data_field_web_agency_id b , field_data_field_accessible_group_htmlattri c  where a.type='508_scan_information' and a.type=b.bundle and a.status ='1' and a.nid=b.entity_id and b.entity_id=c.entity_id and field_web_agency_id_nid=:agencyid", array(':agencyid' => $agencyid))->fetchField());
    $agencydata['ag_col_contrast'] = $ag_avrg_color_cont;
    $agencydata['ag_miss_image'] = $ag_avrg_miss_image;
    $agencydata['ag_html_attrib'] = $ag_avrg_html_attr;
    if(($ag_avrg_color_cont == '0') && ($ag_avrg_miss_image == '0') && ($ag_avrg_html_attr == '0')) {
        $agencyaccess_output = "<br><span style=\"color: #ac0600;font-size: 12px;\">Sorry No Graph Data to display.</span><br>";
    }
    else{
        $agencyaccess_output = theme('agencywide_accessgraphs_page', array('agencydata' => $agencydata));
    }


    $agencydata['ag_access_chart'] = $agencyaccess_output;

  $agency_mob['mob_perf_good_nos'] = db_query("SELECT mob_perf_good FROM custom_agencywide_archive where date = (select max(date) from custom_agencywide_archive) and agency_id = :agencyid limit 1",array(':agencyid' => $agencyid))->fetchField();
  $agency_mob['mob_perf_improve_nos'] = db_query("SELECT mob_perf_improve FROM custom_agencywide_archive where date =(select max(date) from custom_agencywide_archive) and agency_id = :agencyid",array(':agencyid' => $agencyid))->fetchField();
  $agency_mob['mob_perf_poor_nos'] = db_query("SELECT mob_perf_poor FROM custom_agencywide_archive where date = (select max(date) from custom_agencywide_archive) and agency_id = :agencyid",array(':agencyid' => $agencyid))->fetchField();
  $agency_mob['mob_usab_friendly_nos'] = db_query("SELECT mob_usab_friendly FROM custom_agencywide_archive where date =(select max(date) from custom_agencywide_archive) and agency_id = :agencyid",array(':agencyid' => $agencyid))->fetchField();
  $agency_mob['mob_usab_notfriendly_nos'] = db_query("SELECT mob_usab_nonfriendly FROM custom_agencywide_archive where date=(select max(date) from custom_agencywide_archive)and agency_id = :agencyid",array(':agencyid' => $agencyid))->fetchField();
  $agency_mob['total_websites'] = db_query("SELECT sum(num_of_websites) FROM custom_agencywide_archive where date = (select max(date) from custom_agencywide_archive) and agency_id = :agencyid",array(':agencyid' => $agencyid))->fetchField();
  $agency_mob['no_of_websites']=  db_query("SELECT num_of_websites FROM custom_agencywide_archive where date = (select max(date) from custom_agencywide_archive) and agency_id = :agencyid",array(':agencyid' => $agencyid))->fetchField();
  $agency_mob['null'] = $agency_mob['no_of_websites'] - ($agency_mob['mob_perf_good_nos']+ $agency_mob['mob_perf_improve_nos']+ $agency_mob['mob_perf_poor_nos']);
  $agency_mob['usab_null'] = $agency_mob['no_of_websites'] - ($agency_mob['mob_usab_friendly_nos']+ $agency_mob['mob_usab_notfriendly_nos']);


  $agencydata['good']=$agency_mob['mob_perf_good_nos'];
  $agencydata['improve']=$agency_mob['mob_perf_improve_nos'];
  $agencydata['poor']=$agency_mob['mob_perf_poor_nos'];
  $agencydata['friendly_nos'] = $agency_mob['mob_usab_friendly_nos'] ;
  $agencydata['nonfriendly_nos'] = $agency_mob['mob_usab_notfriendly_nos'] ;
  $agencydata['no_of_non_na__websites']= $agency_mob['mob_perf_good_nos']+ $agency_mob['mob_perf_improve_nos']+ $agency_mob['mob_perf_poor_nos'];

//    $agency_mob['agency_mob_bad'] = round(db_query("select count(field_mobile_overall_score_value) from field_data_field_mobile_overall_score where field_mobile_overall_score_value<='49' and entity_id in (SELECT node.nid AS nid
//FROM
//node node
//LEFT JOIN field_data_field_web_agency_id field_data_field_web_agency_id ON node.nid = field_data_field_web_agency_id.entity_id AND (field_data_field_web_agency_id.entity_type = 'node' AND field_data_field_web_agency_id.deleted = '0')
//WHERE (( (node.status = '1') AND (node.type IN  ('website')) AND (field_data_field_web_agency_id.field_web_agency_id_nid IN  (:agencyid)) )))", array(':agencyid' => $agencyid))->fetchField());
//    $agency_mob['agency_mob_avg'] = round(db_query("select count(field_mobile_overall_score_value) from field_data_field_mobile_overall_score where field_mobile_overall_score_value<='89' and  field_mobile_overall_score_value>='50' and entity_id in (SELECT node.nid AS nid
//FROM
//node node
//LEFT JOIN field_data_field_web_agency_id field_data_field_web_agency_id ON node.nid = field_data_field_web_agency_id.entity_id AND (field_data_field_web_agency_id.entity_type = 'node' AND field_data_field_web_agency_id.deleted = '0')
//WHERE (( (node.status = '1') AND (node.type IN  ('website')) AND (field_data_field_web_agency_id.field_web_agency_id_nid IN  (:agencyid)) )))", array(':agencyid' => $agencyid))->fetchField());
//    $agency_mob['agency_mob_good'] = round(db_query("select count(field_mobile_overall_score_value) from field_data_field_mobile_overall_score where field_mobile_overall_score_value<='100' and  field_mobile_overall_score_value>='90' and entity_id in (SELECT node.nid AS nid
//FROM
//node node
//LEFT JOIN field_data_field_web_agency_id field_data_field_web_agency_id ON node.nid = field_data_field_web_agency_id.entity_id AND (field_data_field_web_agency_id.entity_type = 'node' AND field_data_field_web_agency_id.deleted = '0')
//WHERE (( (node.status = '1') AND (node.type IN  ('website')) AND (field_data_field_web_agency_id.field_web_agency_id_nid IN  (:agencyid)) )))", array(':agencyid' => $agencyid))->fetchField());
//    $agency_mob['agency_mob_null'] = round(db_query("select count(entity_id) from field_data_field_mobile_overall_score where field_mobile_overall_score_value is NULL and entity_id in (SELECT node.nid AS nid
//FROM
//node node
//LEFT JOIN field_data_field_web_agency_id field_data_field_web_agency_id ON node.nid = field_data_field_web_agency_id.entity_id AND (field_data_field_web_agency_id.entity_type = 'node' AND field_data_field_web_agency_id.deleted = '0')
//WHERE (( (node.status = '1') AND (node.type IN  ('website')) AND (field_data_field_web_agency_id.field_web_agency_id_nid IN  (:agencyid)) )))", array(':agencyid' => $agencyid))->fetchField());

    $agencyaccess_output = theme('agencywide_mobgraphs_page', array('agencydata' => $agency_mob));

    $agencydata['ag_mob_chart'] = $agencyaccess_output;

  $agencyaccessusab_output = theme('agencywide_mobusabgraphs_page', array('agencydata' => $agency_mob));

  $agencydata['ag_mob_usab_chart'] = $agencyaccessusab_output;


  //Query to get Search data for an agency
    $searchresults = db_query("select field_search_status_value,count(field_search_status_value) as complnum from node a , field_data_field_search_status b , field_data_field_web_agency_id c where a.status='1' and a.nid=b.entity_id and a.nid=c.entity_id and b.entity_id=c.entity_id and c.field_web_agency_id_nid=:agencyid and a.type='website' group by field_search_status_value", array(':agencyid' => $agencyid));
    $agency_search_status = array();
    foreach ($searchresults as $searchresult) {
        if($searchresult->field_search_status_value == '1')
            $agency_search_status['search_available'] += $searchresult->complnum;
        if($searchresult->field_search_status_value == '0')
            $agency_search_status['search_notavailable'] += $searchresult->complnum;
    }
    $agencydata['searchenginestatus'] = $agency_search_status;

    $search_status_graph_output = theme('agencywide_searchstatus_page', array('agencydata' => $agency_search_status));
    $agencydata['searchenginestatus_graph'] = $search_status_graph_output;


    //Query to get Search Engine Name for an agency
    $searchengines = db_query("select field_search_engine_name_value,count(field_search_engine_name_value) as complnum from node a , field_data_field_search_engine_name b , field_data_field_web_agency_id c where a.status='1' and a.nid=b.entity_id and a.nid=c.entity_id and b.entity_id=c.entity_id and c.field_web_agency_id_nid=:agencyid and a.type='website' group by field_search_engine_name_value", array(':agencyid' => $agencyid));
    $search_engine_data_for_agencygraph = "";
    $searchenginename = "";
    $searchengine_nos = "";
    foreach ($searchengines as $searchengine) {

        if(($searchengine->field_search_engine_name_value == '') || ($searchengine->field_search_engine_name_value == NULL)) {
            $searchenginename = "None";
            $searchengine_nos +=  $searchengine->complnum;
        }
        else{
            $searchenginename = $searchengine->field_search_engine_name_value;
            $searchengine_nos =  $searchengine->complnum;
          $search_engine_data[$searchenginename] = $searchengine_nos;

        }
    }
    arsort($search_engine_data);
    foreach($search_engine_data as $skey=>$sval){
        $search_engine_data_for_agencygraph .= "['$skey' , $sval],";
    }
    $agencydata['searchenginedata'] = $search_engine_data;
    $search_engine_graph_output = theme('agencywide_searchengines_page', array('search_engine_data_for_agencygraph' => $search_engine_data_for_agencygraph));
    $agencydata['searchengines_graph'] = $search_engine_graph_output;


    //Query to get Search data for an agency
    $searchresults = db_query("select field_search_status_value,count(field_search_status_value) as complnum from node a , field_data_field_search_status b , field_data_field_web_agency_id c where a.status='1' and a.nid=b.entity_id and a.nid=c.entity_id and b.entity_id=c.entity_id and c.field_web_agency_id_nid=:agencyid and a.type='website' group by field_search_status_value", array(':agencyid' => $agencyid));
    $agency_search_status = array();
    foreach ($searchresults as $searchresult) {
        if($searchresult->field_search_status_value == '1')
            $agency_search_status['search_available'] += $searchresult->complnum;
        if($searchresult->field_search_status_value == '0')
            $agency_search_status['search_notavailable'] += $searchresult->complnum;
    }
    $agencydata['searchenginestatus'] = $agency_search_status;

    $search_status_graph_output = theme('agencywide_searchstatus_page', array('agencydata' => $agency_search_status));
    $agencydata['searchenginestatus_graph'] = $search_status_graph_output;

    return $agencydata;
}

/*
 * Get Chart color
 */
function dotgov_common_getChartColor($chartdata)
{
    if ($chartdata <= 50){
        $chartcolor = '#ac0600';
    }elseif($chartdata>50 and $chartdata<=75){
        $chartcolor='#654f00';
    }
    else{
        $chartcolor='#29643a';
    }
    return $chartcolor;


}

/*
 * Get Text with color
 */
function dotgov_common_getChartColordata($data,$websites)
{

    $percent = round(($data / $websites) * 100);
    if ($percent <= 50) {
        $chartcolor = '#ac0600';
    } elseif ($percent > 50 and $percent <= 75) {
        $chartcolor = '#654f00';
    } else {
        $chartcolor = '#29643a';
    }
    if ($data != '') {
        $colordata = "<span style='color:$chartcolor;font-weight:bold;'>$data ($percent %)</span>";
    }
    else{
        $colordata = "<span style='color:#ac0600;font-weight:bold;'>0 %</span>";
    }
    return $colordata;


}

/*
 * Get Text with color
 */
function dotgov_common_applyDataColor($data,$websites,$chartColor)
{

    $percent = round(($data / $websites) * 100);

    if ($data != '') {
        $colordata = "<span style='color:$chartColor;font-weight:bold;'>$data ($percent %)</span>";
    }
    else{
        $colordata = "<span style='color:$chartColor;font-weight:bold;'>0 (0 %)</span>";
    }
    return $colordata;

}

/*
 * Get percentage of each data point and account of percentage rounding error
 */
function dotgov_common_get_percentage($arr,$websites) {
  $arrtotal = $websites;
  for ($i = 0; $i < sizeof($arr); $i++)
    $arr[$i] = $arr[$i] / $arrtotal * 100;
  $roundDown = array();
  $decimals = array();
  foreach ($arr as $key => $value) {
    $roundDown[] = floor($value);
    $decimals[] = $value - floor($value);
  }
  $c = array_combine($roundDown, $decimals);
  arsort($c);
  $sum = array_sum($roundDown);
  reset($c);
  $executionLimit = 0;
  while ($sum < 100 && $executionLimit < 100) {
    $val = current($c);
    for ($i = 0; $i < sizeof($roundDown); $i++) {
        if ($sum < 100 && $val === $decimals[$i]) {
          $roundDown[$i]++;
          $sum++;
        }
        $executionLimit++;
    }
    $executionLimit++;
    next($c);
  }
  return $roundDown;
}

/*
 * Get color data after percentage calculation
 */
function dotgov_common_getColor($data, $chartColor, $percent) {
  if ($data != '')
      $colordata = "<span style='color:$chartColor;font-weight:bold;'>$data ($percent %)</span>";
  else
      $colordata = "<span style='color:$chartColor;font-weight:bold;'>0</span>";
  return $colordata;
}

/*
 * Get the chart
 */

function dotgov_commmon_getChart($chartname,$chartdivid,$chartScore){

    drupal_add_js("
    Highcharts.chart('$chartdivid', {

                              chart: {
            type: 'solidgauge',

                              },

                              title: {

            text: ''

                              },

                              tooltip: {
            enabled:false,
                              },

                              pane: {
            startAngle: 0,
                                  endAngle: 360,
                                  background: [{
                outerRadius: '118%',
                                      innerRadius: '80%',
                                      backgroundColor: '#d6d7d9',
                                      borderWidth: 0
                                  }]
                              },

                              yAxis: {
            min: 0,
                                  max: 100,
                                  lineWidth: 0,
                                  tickPositions: [],

                                  title: {
                text: '".$chartScore."%',
                                      style: {
                    fontSize: '22px',
                                          color:'".dotgov_common_getChartColor($chartScore)."'
                                      },
                                      y: 30
                                  },



                              },

                              plotOptions: {
            solidgauge: {
                dataLabels: {
                    enabled: false
                                      },
                linecap: 'round',
                                      stickyTracking: false,
                                      rounded: true
                                  }
        },

                              series: [{
            name: '$chartname',
                                  data: [{
                color: '".dotgov_common_getChartColor($chartScore)."',
                                      radius: '118%',
                                      innerRadius: '80%',
                                      y:100                }]
                              }]
                          }


                      );
    ","inline");
}


/*
 * Get ALL Agency Data for Government-Wide Report Page
 */

function dotgov_common_getAllAgencyComplianceData(){
    $agencydata = array();

    //Query to get https data
    $httpresults = db_query("select IFNULL(field_https_status_value, 0) as field_https_status_value, count(field_https_status_value) as complnum from node a , field_data_field_https_status b , field_data_field_web_agency_id c where a.status='1' and a.nid=b.entity_id and a.nid=c.entity_id and b.entity_id=c.entity_id and a.type='https_dap_scan_information' group by field_https_status_value", array());
    foreach ($httpresults as $httpresult) {
        if($httpresult->field_https_status_value == 'Yes')
            $agencydata['https_compliant'] += $httpresult->complnum;
        if($httpresult->field_https_status_value == 'No')
            $agencydata['https_noncompliant'] += $httpresult->complnum;
    }

    //Query to get DAP data
    $dapresults = db_query("select IFNULL(field_dap_score_value, 0) as field_dap_score_value, count(field_dap_score_value) as complnum from field_data_field_dap_score a , node b, field_data_field_web_agency_id c where a.entity_id=b.nid and a.entity_id=c.entity_id  and c.bundle='website' and b.status='1' group by field_dap_score_value", array());
    foreach ($dapresults as $dapresult) {
        if($dapresult->field_dap_score_value == '100')
            $agencydata['dap_compliant'] += $dapresult->complnum;
        if($dapresult->field_dap_score_value == '0')
            $agencydata['dap_noncompliant'] += $dapresult->complnum;
        $agencydata['dap_tottracked'] += $dapresult->complnum;
    }

    //Query to get DNSSEC data
    $dnsresults = db_query("select IFNULL(field_dnssec_compliance_value, 0) as field_dnssec_compliance_value, count(field_dnssec_compliance_value) as complnum from node a , field_data_field_dnssec_compliance b , field_data_field_web_agency_id c where a.status='1' and a.nid=b.entity_id and a.nid=c.entity_id and b.entity_id=c.entity_id and a.type='domain_scan_information'  group by field_dnssec_compliance_value", array());
    foreach ($dnsresults as $dnsresult) {
        if($dnsresult->field_dnssec_compliance_value == '1')
            $agencydata['dns_compliant'] += $dnsresult->complnum;
        if($dnsresult->field_dnssec_compliance_value == '0')
            $agencydata['dns_noncompliant'] += $dnsresult->complnum;
    }

    //Query to get IPV6 data
    $ipv6results = db_query("select IFNULL(field_ipv6_compliance_value, 0) as field_ipv6_compliance_value, count(field_ipv6_compliance_value)  as complnum from node a , field_data_field_ipv6_compliance b , field_data_field_web_agency_id c where a.status='1' and a.nid=b.entity_id and a.nid=c.entity_id and b.entity_id=c.entity_id and a.type='domain_scan_information'  group by field_ipv6_compliance_value", array());
    foreach ($ipv6results as $ipv6result) {
        if($ipv6result->field_ipv6_compliance_value == '1')
            $agencydata['ipv6_compliant'] += $ipv6result->complnum;
        if($ipv6result->field_ipv6_compliance_value == '0')
            $agencydata['ipv6_noncompliant'] += $ipv6result->complnum;
    }

    //Query to get M15-13 data
    $m15results = db_query("select IFNULL(field_compl_m_15_13_bod_value, 0) as field_compl_m_15_13_bod_value, count(field_compl_m_15_13_bod_value) as complnum from node a , field_data_field_compl_m_15_13_bod b , field_data_field_web_agency_id c where a.status='1' and a.nid=b.entity_id and a.nid=c.entity_id and b.entity_id=c.entity_id and a.type='https_dap_scan_information'  group by field_compl_m_15_13_bod_value", array());
    foreach ($m15results as $m15result) {
        if($m15result->field_compl_m_15_13_bod_value == '1')
            $agencydata['m15_compliant'] += $m15result->complnum;
        if($m15result->field_compl_m_15_13_bod_value == '0')
            $agencydata['m15_noncompliant'] += $m15result->complnum;
        $agencydata['m15_tracked'] += $m15result->complnum;

    }

    //Query to get USWDS for Agency
    $uswdsresults = db_query("select IFNULL(field_uswds_score_value, 0) as field_uswds_score_value, count(field_uswds_score_value) as complnum from field_data_field_uswds_score a , node b, field_data_field_web_agency_id c where a.entity_id=b.nid and a.entity_id=c.entity_id  and c.bundle='website' and b.status='1' group by field_uswds_score_value", array());
    foreach ($uswdsresults as $uswdsresult) {
        if($uswdsresult->field_uswds_score_value == '100')
            $agencydata['uswds_compliant'] += $uswdsresult->complnum;
        if($uswdsresult->field_uswds_score_value == '0')
            $agencydata['uswds_noncompliant'] += $uswdsresult->complnum;
        $agencydata['uswds_tottracked'] += $uswdsresult->complnum;
    }

    //Query to get Insecure protocol data
    $insecresults = db_query("select IFNULL(field_free_of_rc4_3des_and_sslv2_value, 0) as field_free_of_rc4_3des_and_sslv2_value, count(field_free_of_rc4_3des_and_sslv2_value) as complnum from node a , field_data_field_free_of_rc4_3des_and_sslv2 b , field_data_field_web_agency_id c where a.status='1' and a.nid=b.entity_id and a.nid=c.entity_id and b.entity_id=c.entity_id and a.type='https_dap_scan_information'  group by field_free_of_rc4_3des_and_sslv2_value", array());
    foreach ($insecresults as $insecresult) {
        if($insecresult->field_free_of_rc4_3des_and_sslv2_value == '1')
            $agencydata['insec_compliant'] += $insecresult->complnum;
        if($insecresult->field_free_of_rc4_3des_and_sslv2_value == '0')
            $agencydata['insec_noncompliant'] += $insecresult->complnum;
        $agencydata['free_tracked'] += $insecresult->complnum;
    }

    //Query to get SSL v2  data
    $v2results = db_query("select IFNULL(field_ssl_v2_from_pulse_value, 0) as field_ssl_v2_from_pulse_value, count(field_ssl_v2_from_pulse_value) as complnum from node a , field_data_field_ssl_v2_from_pulse b , field_data_field_web_agency_id c where a.status='1' and a.nid=b.entity_id and a.nid=c.entity_id and b.entity_id=c.entity_id and a.type='https_dap_scan_information' group by field_ssl_v2_from_pulse_value", array());
    foreach ($v2results as $v2result) {
        if($v2result->field_ssl_v2_from_pulse_value == 'Yes')
            $agencydata['v2_support'] += $v2result->complnum;
        else
            $agencydata['v2_nosupport'] += $v2result->complnum;
    }

    //Query to get SSL v3  data
    $v3results = db_query("select IFNULL(field_ssl_v3_from_pulse_value, 0) as field_ssl_v3_from_pulse_value, count(field_ssl_v3_from_pulse_value) as complnum from node a , field_data_field_ssl_v3_from_pulse b , field_data_field_web_agency_id c where a.status='1' and a.nid=b.entity_id and a.nid=c.entity_id and b.entity_id=c.entity_id and a.type='https_dap_scan_information'  group by field_ssl_v3_from_pulse_value", array());
    foreach ($v3results as $v3result) {
        if($v3result->field_ssl_v3_from_pulse_value == 'Yes')
            $agencydata['v3_support'] += $v3result->complnum;
        else
            $agencydata['v3_nosupport'] += $v3result->complnum;
    }


    //Query to get TLs v1  data
    $tls1results = db_query("select IFNULL(field_tls_v1_support_value, 0) as field_tls_v1_support_value, count(field_tls_v1_support_value) as complnum from node a , field_data_field_tls_v1_support b , field_data_field_web_agency_id c where a.status='1' and a.nid=b.entity_id and a.nid=c.entity_id and b.entity_id=c.entity_id and a.type='domain_scan_information'  group by field_tls_v1_support_value", array());
    foreach ($tls1results as $tls1result) {
        if($tls1result->field_tls_v1_support_value == '1')
            $agencydata['tlsv1_support'] += $tls1result->complnum;
        else
            $agencydata['tlsv1_nosupport'] += $tls1result->complnum;
    }

    //Query to get TLs v1.1  data
    $tls11results = db_query("select IFNULL(field_tls_v1_1_support_value, 0) as field_tls_v1_1_support_value, count(field_tls_v1_1_support_value) as complnum from node a , field_data_field_tls_v1_1_support b , field_data_field_web_agency_id c where a.status='1' and a.nid=b.entity_id and a.nid=c.entity_id and b.entity_id=c.entity_id and a.type='domain_scan_information'  group by field_tls_v1_1_support_value", array());
    foreach ($tls11results as $tls11result) {
        if($tls11result->field_tls_v1_1_support_value == '1')
            $agencydata['tlsv11_support'] += $tls11result->complnum;
        else
            $agencydata['tlsv11_nosupport'] += $tls11result->complnum;
    }


    //Query to get SSL v2  data
    $v2results = db_query("select IFNULL(field_ssl_v2_from_pulse_value, 0) as field_ssl_v2_from_pulse_value, count(field_ssl_v2_from_pulse_value) as complnum from node a , field_data_field_ssl_v2_from_pulse b , field_data_field_web_agency_id c where a.status='1' and a.nid=b.entity_id and a.nid=c.entity_id and b.entity_id=c.entity_id and a.type='https_dap_scan_information'  group by field_ssl_v2_from_pulse_value", array());
    foreach ($v2results as $v2result) {
        if($v2result->field_ssl_v2_from_pulse_value == 'Yes')
            $agencydata['v2_support'] += $v2result->complnum;
        else
            $agencydata['v2_nosupport'] += $v2result->complnum;
    }

    //Query to get Enforce HTTPS  data
    $enfhttpsresults = db_query("select IFNULL(field_enforce_https_value, 0) as field_enforce_https_value, count(field_enforce_https_value) as complnum from node a , field_data_field_enforce_https b , field_data_field_web_agency_id c where a.status='1' and a.nid=b.entity_id and a.nid=c.entity_id and b.entity_id=c.entity_id and a.type='https_dap_scan_information'  group by field_enforce_https_value", array());
    foreach ($enfhttpsresults as $enfhttpsresult) {
        if($enfhttpsresult->field_enforce_https_value == 'Yes')
            $agencydata['enfhttps_support'] += $enfhttpsresult->complnum;
        else
            $agencydata['enfhttps_nosupport'] += $enfhttpsresult->complnum;
    }

    //Query to get HSTS  data
    $hstsresults = db_query("select IFNULL(field_hsts_status_value, 0) as field_hsts_status_value, count(field_hsts_status_value) as complnum from node a , field_data_field_hsts_status b , field_data_field_web_agency_id c where a.status='1' and a.nid=b.entity_id and a.nid=c.entity_id and b.entity_id=c.entity_id and a.type='https_dap_scan_information'  group by field_hsts_status_value", array());
    foreach ($hstsresults as $hstsresult) {
        if($hstsresult->field_hsts_status_value == 'Yes')
            $agencydata['hsts_support'] += $hstsresult->complnum;
        else
            $agencydata['hsts_nosupport'] += $hstsresult->complnum;
    }

    //Query to get HTTPS status  data
    $httpsresults = db_query("select IFNULL(field_https_status_value, 0) as field_https_status_value, count(field_https_status_value) as complnum from node a , field_data_field_https_status b , field_data_field_web_agency_id c where a.status='1' and a.nid=b.entity_id and a.nid=c.entity_id and b.entity_id=c.entity_id and a.type='https_dap_scan_information'  group by field_https_status_value", array());
    foreach ($httpsresults as $httpsresult) {
        if($httpsresult->field_https_status_value == 'Yes')
            $agencydata['https_support'] += $httpsresult->complnum;
        else
            $agencydata['https_nosupport'] += $httpsresult->complnum;
    }

    //Query to get Preload status  data
    $preloadresults = db_query("select IFNULL(field_preload_status_value, 0) as field_preload_status_value, count(field_preload_status_value) as complnum from node a , field_data_field_preload_status b , field_data_field_web_agency_id c where a.status='1' and a.nid=b.entity_id and a.nid=c.entity_id and b.entity_id=c.entity_id and a.type='https_dap_scan_information'  group by field_preload_status_value", array());
    foreach ($preloadresults as $preloadresult) {
        if($preloadresult->field_preload_status_value == 'Yes')
            $agencydata['preload_support'] += $preloadresult->complnum;
        elseif($preloadresult->field_preload_status_value == 'Ready')
            $agencydata['preload_readysupport'] += $preloadresult->complnum;
        else
            $agencydata['preload_nosupport'] += $preloadresult->complnum;
    }


//Query to get Most Popular web servers for Agency
    $agwebservreslts = db_query("select d.title,d.status,c.name,b.field_web_server_tid, count(b.field_web_server_tid) cnt from field_data_field_web_agency_id a, field_data_field_web_server b ,taxonomy_term_data c , node d where a.bundle='website' and a.entity_id=b.entity_id and b.field_web_server_tid=c.tid  and a.entity_id=d.nid and d.status='1' group by b.field_web_server_tid order by cnt desc limit 4", array());
    foreach ($agwebservreslts as $agwebservres) {
        $agwebdata[$agwebservres->name] = $agwebservres->cnt;
    }
    $agencydata['ag_webserver'] = $agwebdata;


    //Query to get Most Popular Programming languages for Agency
    $agplreslts = db_query("select d.title,d.status,c.name,field_programming_languages_tid,count(field_programming_languages_tid) cnt from field_data_field_web_agency_id a, field_data_field_programming_languages b ,taxonomy_term_data c , node d where a.bundle='website' and a.entity_id=b.entity_id and field_programming_languages_tid=c.tid  and a.entity_id=d.nid and d.status='1' group by field_programming_languages_tid order by cnt desc limit 4", array());
    foreach ($agplreslts as $agplreslt) {
        $agpldata[$agplreslt->name] = $agplreslt->cnt;
    }
    $agencydata['ag_proglang'] = $agpldata;

    //Query to get Most Popular CMS for Agency
    $agcmsreslts = db_query("select d.title,d.status,c.name,field_cms_applications_tid,count(field_cms_applications_tid) cnt from field_data_field_web_agency_id a, field_data_field_cms_applications b ,taxonomy_term_data c , node d where a.bundle='website' and a.entity_id=b.entity_id and field_cms_applications_tid=c.tid and c.name not like '%\_%'   and a.entity_id=d.nid and d.status='1' group by field_cms_applications_tid order by cnt desc limit 4", array());
    foreach ($agcmsreslts as $agcmsreslt) {
        $agcmsdata[$agcmsreslt->name] = $agcmsreslt->cnt;
    }
    $agencydata['ag_cms'] = $agcmsdata;

    //Query to get Most Popular OS for Agency
    $agosreslts = db_query("select d.title,d.status,c.name,field_operating_systems_tid,count(field_operating_systems_tid) cnt from field_data_field_web_agency_id a, field_data_field_operating_systems b ,taxonomy_term_data c , node d where a.bundle='website' and a.entity_id=b.entity_id and field_operating_systems_tid=c.tid and c.name not like '%\_%'   and a.entity_id=d.nid and d.status='1' group by field_operating_systems_tid order by cnt desc limit 4", array());
    foreach ($agosreslts as $agosreslt) {
        $agosdata[$agosreslt->name] = $agosreslt->cnt;
    }
    $agencydata['ag_os'] = $agosdata;

    //Query to get Most Popular Javascript Framework for Agency
    $agjsreslts = db_query("select d.title,d.status,c.name,field_javascript_frameworks_tid,count(field_javascript_frameworks_tid) cnt from field_data_field_web_agency_id a, field_data_field_javascript_frameworks b ,taxonomy_term_data c , node d where a.bundle='website' and a.entity_id=b.entity_id and field_javascript_frameworks_tid=c.tid and c.name not like '%\_%'   and a.entity_id=d.nid and d.status='1' group by field_javascript_frameworks_tid order by cnt desc limit 4", array());
    foreach ($agjsreslts as $agjsreslt) {
        $agjsdata[$agjsreslt->name] = $agjsreslt->cnt;
    }
    $agencydata['ag_js'] = $agjsdata;

    //Query to get Most Popular CDN for Agency
    $agcdnreslts = db_query("select d.title,d.status,c.name,field_cdn_applications_tid,count(field_cdn_applications_tid) cnt from field_data_field_web_agency_id a, field_data_field_cdn_applications b ,taxonomy_term_data c , node d where  a.bundle='website' and a.entity_id=b.entity_id and field_cdn_applications_tid=c.tid and c.name not like '%\_%'   and a.entity_id=d.nid and d.status='1' group by field_cdn_applications_tid order by cnt desc limit 4", array());
    foreach ($agcdnreslts as $agcdnreslt) {
        $agcdndata[$agcdnreslt->name] = $agcdnreslt->cnt;
    }
    $agencydata['ag_cdn'] = $agcdndata;

    //Query to get Agency Accessibility errors
    $ag_avrg_color_cont =  round(db_query("select sum(c.field_accessible_group_colorcont_value) as avg_value from node a , field_data_field_web_agency_id b , field_data_field_accessible_group_colorcont c  where a.type='508_scan_information' and a.type=b.bundle and a.status ='1' and a.nid=b.entity_id and b.entity_id=c.entity_id", array())->fetchField());

    $ag_avrg_miss_image =  round(db_query("select sum(c.field_accessible_group_missingim_value) as avg_value from node a , field_data_field_web_agency_id b , field_data_field_accessible_group_missingim c  where a.type='508_scan_information' and a.type=b.bundle and a.status ='1' and a.nid=b.entity_id and b.entity_id=c.entity_id", array())->fetchField());

    $ag_avrg_html_attr =  round(db_query("select sum(c.field_accessible_group_htmlattri_value) as avg_value from node a , field_data_field_web_agency_id b , field_data_field_accessible_group_htmlattri c  where a.type='508_scan_information' and a.type=b.bundle and a.status ='1' and a.nid=b.entity_id and b.entity_id=c.entity_id ", array())->fetchField());

    $agencydata['ag_col_contrast'] = $ag_avrg_color_cont;
    $agencydata['ag_miss_image'] = $ag_avrg_miss_image;
    $agencydata['ag_html_attrib'] = $ag_avrg_html_attr;

    if(($ag_avrg_color_cont == '0') && ($ag_avrg_miss_image == '0') && ($ag_avrg_html_attr == '0')) {
        $agencyaccess_output = "<br><span style=\"color: #ac0600;font-size: 12px;\">Sorry No Graph Data to display.</span><br>";
    }else{
        $agencyaccess_output = theme('agencywide_accessgraphs_page', array('agencydata' => $agencydata));
    }
    $agencydata['ag_access_chart'] = $agencyaccess_output;

  $govwide_mob['mob_perf_good_nos'] = db_query("SELECT mob_perf_good FROM custom_government_wide_archive order by date desc limit 1")->fetchField();
  $govwide_mob['mob_perf_improve_nos'] = db_query("SELECT mob_perf_improve FROM custom_government_wide_archive order by date desc limit 1")->fetchField();
  $govwide_mob['mob_perf_poor_nos'] = db_query("SELECT mob_perf_poor FROM custom_government_wide_archive order by date desc limit 1")->fetchField();
  $govwide_mob['mob_usab_friendly_nos'] = db_query("SELECT mob_usab_friendly FROM custom_government_wide_archive order by date desc limit 1")->fetchField();
  $govwide_mob['mob_usab_notfriendly_nos'] = db_query("SELECT mob_usab_nonfriendly FROM custom_government_wide_archive order by date desc limit 1")->fetchField();
  $govwide_mob['total_websites'] = db_query("SELECT num_of_websites FROM custom_government_wide_archive order by date desc limit 1")->fetchField();
  $govwide_mob['null'] = $govwide_mob['total_websites'] - ($govwide_mob['mob_perf_good_nos']+ $govwide_mob['mob_perf_improve_nos']+ $govwide_mob['mob_perf_poor_nos']);
  $govwide_mob['usab_null'] = $govwide_mob['total_websites'] - ($govwide_mob['mob_usab_friendly_nos']+ $govwide_mob['mob_usab_notfriendly_nos']);

  $agencydata['total_non_na_websites'] =  $govwide_mob['mob_perf_good_nos']+ $govwide_mob['mob_perf_improve_nos']+ $govwide_mob['mob_perf_poor_nos'];
  $agencydata['poor_nos'] = $govwide_mob['mob_perf_poor_nos'] ;
  $agencydata['good_nos'] = $govwide_mob['mob_perf_good_nos'] ;
  $agencydata['improve_nos'] = $govwide_mob['mob_perf_improve_nos'] ;
  $agencydata['friendly_nos'] = $govwide_mob['mob_usab_friendly_nos'] ;
  $agencydata['nonfriendly_nos'] = $govwide_mob['mob_usab_notfriendly_nos'] ;

  $govwide_mob['govwide_mob_bad'] = round(db_query("select count(field_mobile_overall_score_value) from field_data_field_mobile_overall_score where field_mobile_overall_score_value<='49' and entity_id in (SELECT node.nid AS nid
FROM
node node
LEFT JOIN field_data_field_web_agency_id field_data_field_web_agency_id ON node.nid = field_data_field_web_agency_id.entity_id AND (field_data_field_web_agency_id.entity_type = 'node' AND field_data_field_web_agency_id.deleted = '0')
WHERE (( (node.status = '1') AND (node.type IN  ('website')) )))")->fetchField());
    $govwide_mob['govwide_mob_avg'] = round(db_query("select count(field_mobile_overall_score_value) from field_data_field_mobile_overall_score where field_mobile_overall_score_value<='89' and  field_mobile_overall_score_value>='50' and entity_id in (SELECT node.nid AS nid
FROM
node node
LEFT JOIN field_data_field_web_agency_id field_data_field_web_agency_id ON node.nid = field_data_field_web_agency_id.entity_id AND (field_data_field_web_agency_id.entity_type = 'node' AND field_data_field_web_agency_id.deleted = '0')
WHERE (( (node.status = '1') AND (node.type IN  ('website')) )))")->fetchField());
    $govwide_mob['govwide_mob_good'] = round(db_query("select count(field_mobile_overall_score_value) from field_data_field_mobile_overall_score where field_mobile_overall_score_value<='100' and  field_mobile_overall_score_value>='90' and entity_id in (SELECT node.nid AS nid
FROM
node node
LEFT JOIN field_data_field_web_agency_id field_data_field_web_agency_id ON node.nid = field_data_field_web_agency_id.entity_id AND (field_data_field_web_agency_id.entity_type = 'node' AND field_data_field_web_agency_id.deleted = '0')
WHERE (( (node.status = '1') AND (node.type IN  ('website'))  )))")->fetchField());
    $govwide_mob['govwide_mob_null'] = round(db_query("select count(entity_id) from field_data_field_mobile_overall_score where field_mobile_overall_score_value is NULL and entity_id in (SELECT node.nid AS nid
FROM
node node
LEFT JOIN field_data_field_web_agency_id field_data_field_web_agency_id ON node.nid = field_data_field_web_agency_id.entity_id AND (field_data_field_web_agency_id.entity_type = 'node' AND field_data_field_web_agency_id.deleted = '0')
WHERE (( (node.status = '1') AND (node.type IN  ('website')) )))")->fetchField());

    $govwideaccess_output = theme('govwide_mobgraphs_page', array('govwidedata' => $govwide_mob));

    $agencydata['gov_mob_chart'] = $govwideaccess_output;

    $govwideaccess_mob_output = theme('govwide_mobusabgraphs_page', array('govwidedata' => $govwide_mob));
    $agencydata['gov_mob_usab_chart'] = $govwideaccess_mob_output;

    //Query to get Search Engine Name for Government wide
    $searchengines = db_query("select field_search_engine_name_value,count(field_search_engine_name_value) as complnum from node a , field_data_field_search_engine_name b  where a.status='1' and a.nid=b.entity_id and a.type='website' group by field_search_engine_name_value");
    $search_engine_data_for_agencygraph = "";
    $searchenginename = "";
    $searchengine_nos = "";
    foreach ($searchengines as $searchengine) {

        if(($searchengine->field_search_engine_name_value == '') || ($searchengine->field_search_engine_name_value == NULL)) {
            $searchenginename = "None";
            $searchengine_nos +=  $searchengine->complnum;
        }
        else{
            $searchenginename = $searchengine->field_search_engine_name_value;
            $searchengine_nos =  $searchengine->complnum;
        }
      if($searchenginename != "None")
        $search_engine_data[$searchenginename] = $searchengine_nos;
    }
    arsort($search_engine_data);
    foreach($search_engine_data as $skey=>$sval){
        $search_engine_data_for_agencygraph .= "['$skey' , $sval],";
    }
    $agencydata['searchenginedata'] = $search_engine_data;
    $search_engine_graph_output = theme('agencywide_searchengines_page', array('search_engine_data_for_agencygraph' => $search_engine_data_for_agencygraph));
    $agencydata['searchengines_graph'] = $search_engine_graph_output;


    //Query to get Search data for an agency
    $searchresults = db_query("select field_search_status_value,count(field_search_status_value) as complnum from node a , field_data_field_search_status b  where a.status='1' and a.nid=b.entity_id  and a.type='website' group by field_search_status_value");
    $agency_search_status = array();
    foreach ($searchresults as $searchresult) {
        if($searchresult->field_search_status_value == '1')
            $agency_search_status['search_available'] += $searchresult->complnum;
        if($searchresult->field_search_status_value == '0')
            $agency_search_status['search_notavailable'] += $searchresult->complnum;
    }
    $agencydata['searchenginestatus'] = $agency_search_status;

    $search_status_graph_output = theme('agencywide_searchstatus_page', array('agencydata' => $agency_search_status));
    $agencydata['searchenginestatus_graph'] = $search_status_graph_output;

    return $agencydata;
}

/**
 * Library function to evaluate '' or NULL values but not 0
 * @param $nullableValue
 *
 * @return bool
 */
function isNullNotZero($nullableValue) {
    $nullableValue = trim($nullableValue);
    if ($nullableValue == '' || $nullableValue == NULL) {
        return true;
    } elseif ($nullableValue == 0) {
        return false;
    }
}


/**
 * DB query for mobile overall score
 * @param $nid
 * @param int $performance_score
 * @param int $usability_score
 *
 * @return null
 */
function get_mobile_score_information($nid, $performance_score = -1, $usability_score = -1) {
    if(!empty($nid) && empty($performance_score)) {
        return db_query("
        SELECT DATE_FORMAT(FROM_UNIXTIME(r.timestamp), '%Y/%m/%d') AS scan_date,
          p.field_mobile_performance_score_value AS performance
        FROM node_revision r
        JOIN field_revision_field_mobile_performance_score p ON r.vid=p.revision_id
        WHERE r.nid = :nid
          AND p.field_mobile_performance_score_value IS NOT NULL
        GROUP BY scan_date
        ORDER BY r.vid DESC, r.timestamp DESC", array(':nid' => $nid))->fetchAssoc();
    }
    elseif(!empty($nid) && empty($usability_score)) {
        return db_query("
        SELECT DATE_FORMAT(FROM_UNIXTIME(r.timestamp), '%Y/%m/%d') AS scan_date,
          u.field_mobile_usability_score_value AS usability
        FROM node_revision r
        JOIN field_revision_field_mobile_usability_score u ON r.vid=u.revision_id
        WHERE r.nid = :nid
          AND u.field_mobile_usability_score_value IS NOT NULL
        GROUP BY scan_date
        ORDER BY r.vid DESC, r.timestamp DESC", array(':nid' => $nid))->fetchAssoc();
    } else {
        return NULL;
    }
}

/*
 * Title function for widget titles
 */
function dotgov_common_title($title) {
 $div = <<<TEMP
  <div class="col-xs-10 nopadding">
      <h2 class="pane-title"> $title Information </h2>
  </div>
TEMP;
return $div;
}

/*
 * Title function for widget info icons
 */
function dotgov_common_info_icon($text, $tooltip, $a) {
  $div = <<<TEMP
  <div class="col-xs-2 nopadding">
      <div id="$tooltip" class="infor"><img class="info-icon" src="/sites/all/themes/dotgov/images/info.png" width="20" alt="info icon"><span class="tooltiptext tooltip-left"><img src="/sites/all/themes/dotgov/images/helpchart.png"  alt="Image for the color code" ><br>
$text $a
</span> </div>
  </div>
TEMP;
  return $div;
}

/*
 * Title function for widget subtext information
 */
function dotgov_common_subtext($title, $score, $subtext, $divclass = "col-sm-12 col-lg-6 nopadding", $style = "") {
  $div = <<<TEMP
  <div class="$divclass" $style>
     <p> $title Overall Average Score :
        $score
        %
     </p>
     <span style="font-size:12px;" class="font-italic">$subtext</span>
  </div>
TEMP;
  return $div;
}

/*
 * Footer function for widgets
 */
function dotgov_common_footer($report_link = "/website/all/reports", $img_link = "/improve-my-score", $img_src = "/sites/all/themes/dotgov/images/DD-btn_imp_scores.png") {
$footer = <<<TEMP
  <div class="view-button">
      <div class="row text-center">
          <a class="$report_link" href="$report_link"><img src="/sites/all/themes/dotgov/images/DD-btn_full_report.png" width="" height="25" alt=""/></a>
          <a href="$img_link"><img src="$img_src" width="" height="25" alt=""/></a>
      </div>
  </div>
TEMP;
  return $footer;
}