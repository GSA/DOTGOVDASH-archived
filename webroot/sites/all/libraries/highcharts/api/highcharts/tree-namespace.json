{
	"doclet": {
		"description": "Copyright (c) Highsoft AS. All rights reserved.",
		"kind": "global",
		"name": ""
	},
	"meta": {
		"branch": "master",
		"commit": "fa929aa027",
		"date": "Tue Aug 24 2021 14:18:19 GMT+0200 (sentraleuropeisk sommertid)",
		"files": [
			{
				"path": "code/highcharts.src.js",
				"line": 0
			},
			{
				"path": "code/highcharts-3d.src.js",
				"line": 0
			},
			{
				"path": "code/highcharts-more.src.js",
				"line": 0
			},
			{
				"path": "code/modules/accessibility.src.js",
				"line": 0
			},
			{
				"path": "code/modules/annotations.src.js",
				"line": 0
			},
			{
				"path": "code/modules/annotations-advanced.src.js",
				"line": 0
			},
			{
				"path": "code/modules/arrow-symbols.src.js",
				"line": 0
			},
			{
				"path": "code/modules/boost.src.js",
				"line": 0
			},
			{
				"path": "code/modules/boost-canvas.src.js",
				"line": 0
			},
			{
				"path": "code/modules/broken-axis.src.js",
				"line": 0
			},
			{
				"path": "code/modules/bullet.src.js",
				"line": 0
			},
			{
				"path": "code/modules/coloraxis.src.js",
				"line": 0
			},
			{
				"path": "code/modules/current-date-indicator.src.js",
				"line": 0
			},
			{
				"path": "code/modules/cylinder.src.js",
				"line": 0
			},
			{
				"path": "code/modules/data.src.js",
				"line": 0
			},
			{
				"path": "code/modules/datagrouping.src.js",
				"line": 0
			},
			{
				"path": "code/modules/debugger.src.js",
				"line": 0
			},
			{
				"path": "code/modules/dependency-wheel.src.js",
				"line": 0
			},
			{
				"path": "code/modules/dotplot.src.js",
				"line": 0
			},
			{
				"path": "code/modules/drag-panes.src.js",
				"line": 0
			},
			{
				"path": "code/modules/draggable-points.src.js",
				"line": 0
			},
			{
				"path": "code/modules/drilldown.src.js",
				"line": 0
			},
			{
				"path": "code/modules/dumbbell.src.js",
				"line": 0
			},
			{
				"path": "code/modules/export-data.src.js",
				"line": 0
			},
			{
				"path": "code/modules/exporting.src.js",
				"line": 0
			},
			{
				"path": "code/modules/full-screen.src.js",
				"line": 0
			},
			{
				"path": "code/modules/funnel.src.js",
				"line": 0
			},
			{
				"path": "code/modules/funnel3d.src.js",
				"line": 0
			},
			{
				"path": "code/modules/gantt.src.js",
				"line": 0
			},
			{
				"path": "code/modules/grid-axis.src.js",
				"line": 0
			},
			{
				"path": "code/modules/heatmap.src.js",
				"line": 0
			},
			{
				"path": "code/modules/histogram-bellcurve.src.js",
				"line": 0
			},
			{
				"path": "code/modules/item-series.src.js",
				"line": 0
			},
			{
				"path": "code/modules/lollipop.src.js",
				"line": 0
			},
			{
				"path": "code/modules/map.src.js",
				"line": 0
			},
			{
				"path": "code/modules/marker-clusters.src.js",
				"line": 0
			},
			{
				"path": "code/modules/networkgraph.src.js",
				"line": 0
			},
			{
				"path": "code/modules/no-data-to-display.src.js",
				"line": 0
			},
			{
				"path": "code/modules/offline-exporting.src.js",
				"line": 0
			},
			{
				"path": "code/modules/oldie.src.js",
				"line": 0
			},
			{
				"path": "code/modules/oldie-polyfills.src.js",
				"line": 0
			},
			{
				"path": "code/modules/organization.src.js",
				"line": 0
			},
			{
				"path": "code/modules/overlapping-datalabels.src.js",
				"line": 0
			},
			{
				"path": "code/modules/parallel-coordinates.src.js",
				"line": 0
			},
			{
				"path": "code/modules/pareto.src.js",
				"line": 0
			},
			{
				"path": "code/modules/pathfinder.src.js",
				"line": 0
			},
			{
				"path": "code/modules/pattern-fill.src.js",
				"line": 0
			},
			{
				"path": "code/modules/price-indicator.src.js",
				"line": 0
			},
			{
				"path": "code/modules/pyramid3d.src.js",
				"line": 0
			},
			{
				"path": "code/modules/sankey.src.js",
				"line": 0
			},
			{
				"path": "code/modules/series-label.src.js",
				"line": 0
			},
			{
				"path": "code/modules/solid-gauge.src.js",
				"line": 0
			},
			{
				"path": "code/modules/sonification.src.js",
				"line": 0
			},
			{
				"path": "code/modules/static-scale.src.js",
				"line": 0
			},
			{
				"path": "code/modules/stock.src.js",
				"line": 0
			},
			{
				"path": "code/modules/stock-tools.src.js",
				"line": 0
			},
			{
				"path": "code/modules/streamgraph.src.js",
				"line": 0
			},
			{
				"path": "code/modules/sunburst.src.js",
				"line": 0
			},
			{
				"path": "code/modules/tilemap.src.js",
				"line": 0
			},
			{
				"path": "code/modules/timeline.src.js",
				"line": 0
			},
			{
				"path": "code/modules/treegrid.src.js",
				"line": 0
			},
			{
				"path": "code/modules/treemap.src.js",
				"line": 0
			},
			{
				"path": "code/modules/variable-pie.src.js",
				"line": 0
			},
			{
				"path": "code/modules/variwide.src.js",
				"line": 0
			},
			{
				"path": "code/modules/vector.src.js",
				"line": 0
			},
			{
				"path": "code/modules/venn.src.js",
				"line": 0
			},
			{
				"path": "code/modules/windbarb.src.js",
				"line": 0
			},
			{
				"path": "code/modules/wordcloud.src.js",
				"line": 0
			},
			{
				"path": "code/modules/xrange.src.js",
				"line": 0
			},
			{
				"path": "code/indicators/indicators.src.js",
				"line": 0
			},
			{
				"path": "code/indicators/acceleration-bands.src.js",
				"line": 0
			},
			{
				"path": "code/indicators/accumulation-distribution.src.js",
				"line": 0
			},
			{
				"path": "code/indicators/ao.src.js",
				"line": 0
			},
			{
				"path": "code/indicators/apo.src.js",
				"line": 0
			},
			{
				"path": "code/indicators/aroon-oscillator.src.js",
				"line": 0
			},
			{
				"path": "code/indicators/aroon.src.js",
				"line": 0
			},
			{
				"path": "code/indicators/atr.src.js",
				"line": 0
			},
			{
				"path": "code/indicators/bollinger-bands.src.js",
				"line": 0
			},
			{
				"path": "code/indicators/cci.src.js",
				"line": 0
			},
			{
				"path": "code/indicators/chaikin.src.js",
				"line": 0
			},
			{
				"path": "code/indicators/cmf.src.js",
				"line": 0
			},
			{
				"path": "code/indicators/dema.src.js",
				"line": 0
			},
			{
				"path": "code/indicators/dpo.src.js",
				"line": 0
			},
			{
				"path": "code/indicators/ema.src.js",
				"line": 0
			},
			{
				"path": "code/indicators/ichimoku-kinko-hyo.src.js",
				"line": 0
			},
			{
				"path": "code/indicators/indicators-all.src.js",
				"line": 0
			},
			{
				"path": "code/indicators/keltner-channels.src.js",
				"line": 0
			},
			{
				"path": "code/indicators/macd.src.js",
				"line": 0
			},
			{
				"path": "code/indicators/mfi.src.js",
				"line": 0
			},
			{
				"path": "code/indicators/momentum.src.js",
				"line": 0
			},
			{
				"path": "code/indicators/natr.src.js",
				"line": 0
			},
			{
				"path": "code/indicators/pivot-points.src.js",
				"line": 0
			},
			{
				"path": "code/indicators/ppo.src.js",
				"line": 0
			},
			{
				"path": "code/indicators/price-channel.src.js",
				"line": 0
			},
			{
				"path": "code/indicators/price-envelopes.src.js",
				"line": 0
			},
			{
				"path": "code/indicators/psar.src.js",
				"line": 0
			},
			{
				"path": "code/indicators/regressions.src.js",
				"line": 0
			},
			{
				"path": "code/indicators/roc.src.js",
				"line": 0
			},
			{
				"path": "code/indicators/rsi.src.js",
				"line": 0
			},
			{
				"path": "code/indicators/slow-stochastic.src.js",
				"line": 0
			},
			{
				"path": "code/indicators/stochastic.src.js",
				"line": 0
			},
			{
				"path": "code/indicators/supertrend.src.js",
				"line": 0
			},
			{
				"path": "code/indicators/tema.src.js",
				"line": 0
			},
			{
				"path": "code/indicators/trendline.src.js",
				"line": 0
			},
			{
				"path": "code/indicators/trix.src.js",
				"line": 0
			},
			{
				"path": "code/indicators/volume-by-price.src.js",
				"line": 0
			},
			{
				"path": "code/indicators/vwap.src.js",
				"line": 0
			},
			{
				"path": "code/indicators/williams-r.src.js",
				"line": 0
			},
			{
				"path": "code/indicators/wma.src.js",
				"line": 0
			},
			{
				"path": "code/indicators/zigzag.src.js",
				"line": 0
			},
			{
				"path": "code/themes/avocado.src.js",
				"line": 0
			},
			{
				"path": "code/themes/dark-blue.src.js",
				"line": 0
			},
			{
				"path": "code/themes/dark-green.src.js",
				"line": 0
			},
			{
				"path": "code/themes/dark-unica.src.js",
				"line": 0
			},
			{
				"path": "code/themes/gray.src.js",
				"line": 0
			},
			{
				"path": "code/themes/grid-light.src.js",
				"line": 0
			},
			{
				"path": "code/themes/grid.src.js",
				"line": 0
			},
			{
				"path": "code/themes/sand-signika.src.js",
				"line": 0
			},
			{
				"path": "code/themes/skies.src.js",
				"line": 0
			},
			{
				"path": "code/themes/sunset.src.js",
				"line": 0
			}
		],
		"version": "9.2.2"
	},
	"children": [
		{
			"doclet": {
				"name": "GlobalSVGElement",
				"description": "Reference to the global SVGElement class as a workaround for a name conflict\nin the Highcharts namespace.",
				"kind": "typedef",
				"see": [
					"https://developer.mozilla.org/en-US/docs/Web/API/SVGElement"
				],
				"isGlobal": true,
				"types": [
					"global.SVGElement"
				]
			},
			"meta": {
				"files": [
					{
						"path": "code/highcharts.src.js",
						"line": 10932
					}
				]
			}
		},
		{
			"doclet": {
				"name": "Highcharts",
				"description": "The Highcharts object is the placeholder for all other members, and various\nutility functions. The most important member of the namespace would be the\nchart constructor.",
				"kind": "namespace",
				"isGlobal": true
			},
			"meta": {
				"files": [
					{
						"path": "code/highcharts.src.js",
						"line": 0
					},
					{
						"path": "code/highcharts-3d.src.js",
						"line": 0
					},
					{
						"path": "code/highcharts-more.src.js",
						"line": 0
					},
					{
						"path": "code/modules/accessibility.src.js",
						"line": 0
					},
					{
						"path": "code/modules/annotations.src.js",
						"line": 0
					},
					{
						"path": "code/modules/annotations-advanced.src.js",
						"line": 0
					},
					{
						"path": "code/modules/arrow-symbols.src.js",
						"line": 0
					},
					{
						"path": "code/modules/boost.src.js",
						"line": 0
					},
					{
						"path": "code/modules/boost-canvas.src.js",
						"line": 0
					},
					{
						"path": "code/modules/broken-axis.src.js",
						"line": 0
					},
					{
						"path": "code/modules/bullet.src.js",
						"line": 0
					},
					{
						"path": "code/modules/coloraxis.src.js",
						"line": 0
					},
					{
						"path": "code/modules/current-date-indicator.src.js",
						"line": 0
					},
					{
						"path": "code/modules/cylinder.src.js",
						"line": 0
					},
					{
						"path": "code/modules/data.src.js",
						"line": 0
					},
					{
						"path": "code/modules/datagrouping.src.js",
						"line": 0
					},
					{
						"path": "code/modules/debugger.src.js",
						"line": 0
					},
					{
						"path": "code/modules/dependency-wheel.src.js",
						"line": 0
					},
					{
						"path": "code/modules/dotplot.src.js",
						"line": 0
					},
					{
						"path": "code/modules/drag-panes.src.js",
						"line": 0
					},
					{
						"path": "code/modules/draggable-points.src.js",
						"line": 0
					},
					{
						"path": "code/modules/drilldown.src.js",
						"line": 0
					},
					{
						"path": "code/modules/dumbbell.src.js",
						"line": 0
					},
					{
						"path": "code/modules/export-data.src.js",
						"line": 0
					},
					{
						"path": "code/modules/exporting.src.js",
						"line": 0
					},
					{
						"path": "code/modules/full-screen.src.js",
						"line": 0
					},
					{
						"path": "code/modules/funnel.src.js",
						"line": 0
					},
					{
						"path": "code/modules/funnel3d.src.js",
						"line": 0
					},
					{
						"path": "code/modules/gantt.src.js",
						"line": 0
					},
					{
						"path": "code/modules/grid-axis.src.js",
						"line": 0
					},
					{
						"path": "code/modules/heatmap.src.js",
						"line": 0
					},
					{
						"path": "code/modules/histogram-bellcurve.src.js",
						"line": 0
					},
					{
						"path": "code/modules/item-series.src.js",
						"line": 0
					},
					{
						"path": "code/modules/lollipop.src.js",
						"line": 0
					},
					{
						"path": "code/modules/map.src.js",
						"line": 0
					},
					{
						"path": "code/modules/marker-clusters.src.js",
						"line": 0
					},
					{
						"path": "code/modules/networkgraph.src.js",
						"line": 0
					},
					{
						"path": "code/modules/no-data-to-display.src.js",
						"line": 0
					},
					{
						"path": "code/modules/offline-exporting.src.js",
						"line": 0
					},
					{
						"path": "code/modules/oldie.src.js",
						"line": 0
					},
					{
						"path": "code/modules/oldie-polyfills.src.js",
						"line": 0
					},
					{
						"path": "code/modules/organization.src.js",
						"line": 0
					},
					{
						"path": "code/modules/overlapping-datalabels.src.js",
						"line": 0
					},
					{
						"path": "code/modules/parallel-coordinates.src.js",
						"line": 0
					},
					{
						"path": "code/modules/pareto.src.js",
						"line": 0
					},
					{
						"path": "code/modules/pathfinder.src.js",
						"line": 0
					},
					{
						"path": "code/modules/pattern-fill.src.js",
						"line": 0
					},
					{
						"path": "code/modules/price-indicator.src.js",
						"line": 0
					},
					{
						"path": "code/modules/pyramid3d.src.js",
						"line": 0
					},
					{
						"path": "code/modules/sankey.src.js",
						"line": 0
					},
					{
						"path": "code/modules/series-label.src.js",
						"line": 0
					},
					{
						"path": "code/modules/solid-gauge.src.js",
						"line": 0
					},
					{
						"path": "code/modules/sonification.src.js",
						"line": 0
					},
					{
						"path": "code/modules/static-scale.src.js",
						"line": 0
					},
					{
						"path": "code/modules/stock.src.js",
						"line": 0
					},
					{
						"path": "code/modules/stock-tools.src.js",
						"line": 0
					},
					{
						"path": "code/modules/streamgraph.src.js",
						"line": 0
					},
					{
						"path": "code/modules/sunburst.src.js",
						"line": 0
					},
					{
						"path": "code/modules/tilemap.src.js",
						"line": 0
					},
					{
						"path": "code/modules/timeline.src.js",
						"line": 0
					},
					{
						"path": "code/modules/treegrid.src.js",
						"line": 0
					},
					{
						"path": "code/modules/treemap.src.js",
						"line": 0
					},
					{
						"path": "code/modules/variable-pie.src.js",
						"line": 0
					},
					{
						"path": "code/modules/variwide.src.js",
						"line": 0
					},
					{
						"path": "code/modules/vector.src.js",
						"line": 0
					},
					{
						"path": "code/modules/venn.src.js",
						"line": 0
					},
					{
						"path": "code/modules/windbarb.src.js",
						"line": 0
					},
					{
						"path": "code/modules/wordcloud.src.js",
						"line": 0
					},
					{
						"path": "code/modules/xrange.src.js",
						"line": 0
					},
					{
						"path": "code/indicators/indicators.src.js",
						"line": 0
					},
					{
						"path": "code/indicators/acceleration-bands.src.js",
						"line": 0
					},
					{
						"path": "code/indicators/accumulation-distribution.src.js",
						"line": 0
					},
					{
						"path": "code/indicators/ao.src.js",
						"line": 0
					},
					{
						"path": "code/indicators/apo.src.js",
						"line": 0
					},
					{
						"path": "code/indicators/aroon-oscillator.src.js",
						"line": 0
					},
					{
						"path": "code/indicators/aroon.src.js",
						"line": 0
					},
					{
						"path": "code/indicators/atr.src.js",
						"line": 0
					},
					{
						"path": "code/indicators/bollinger-bands.src.js",
						"line": 0
					},
					{
						"path": "code/indicators/cci.src.js",
						"line": 0
					},
					{
						"path": "code/indicators/chaikin.src.js",
						"line": 0
					},
					{
						"path": "code/indicators/cmf.src.js",
						"line": 0
					},
					{
						"path": "code/indicators/dema.src.js",
						"line": 0
					},
					{
						"path": "code/indicators/dpo.src.js",
						"line": 0
					},
					{
						"path": "code/indicators/ema.src.js",
						"line": 0
					},
					{
						"path": "code/indicators/ichimoku-kinko-hyo.src.js",
						"line": 0
					},
					{
						"path": "code/indicators/indicators-all.src.js",
						"line": 0
					},
					{
						"path": "code/indicators/keltner-channels.src.js",
						"line": 0
					},
					{
						"path": "code/indicators/macd.src.js",
						"line": 0
					},
					{
						"path": "code/indicators/mfi.src.js",
						"line": 0
					},
					{
						"path": "code/indicators/momentum.src.js",
						"line": 0
					},
					{
						"path": "code/indicators/natr.src.js",
						"line": 0
					},
					{
						"path": "code/indicators/pivot-points.src.js",
						"line": 0
					},
					{
						"path": "code/indicators/ppo.src.js",
						"line": 0
					},
					{
						"path": "code/indicators/price-channel.src.js",
						"line": 0
					},
					{
						"path": "code/indicators/price-envelopes.src.js",
						"line": 0
					},
					{
						"path": "code/indicators/psar.src.js",
						"line": 0
					},
					{
						"path": "code/indicators/regressions.src.js",
						"line": 0
					},
					{
						"path": "code/indicators/roc.src.js",
						"line": 0
					},
					{
						"path": "code/indicators/rsi.src.js",
						"line": 0
					},
					{
						"path": "code/indicators/slow-stochastic.src.js",
						"line": 0
					},
					{
						"path": "code/indicators/stochastic.src.js",
						"line": 0
					},
					{
						"path": "code/indicators/supertrend.src.js",
						"line": 0
					},
					{
						"path": "code/indicators/tema.src.js",
						"line": 0
					},
					{
						"path": "code/indicators/trendline.src.js",
						"line": 0
					},
					{
						"path": "code/indicators/trix.src.js",
						"line": 0
					},
					{
						"path": "code/indicators/volume-by-price.src.js",
						"line": 0
					},
					{
						"path": "code/indicators/vwap.src.js",
						"line": 0
					},
					{
						"path": "code/indicators/williams-r.src.js",
						"line": 0
					},
					{
						"path": "code/indicators/wma.src.js",
						"line": 0
					},
					{
						"path": "code/indicators/zigzag.src.js",
						"line": 0
					},
					{
						"path": "code/themes/avocado.src.js",
						"line": 0
					},
					{
						"path": "code/themes/dark-blue.src.js",
						"line": 0
					},
					{
						"path": "code/themes/dark-green.src.js",
						"line": 0
					},
					{
						"path": "code/themes/dark-unica.src.js",
						"line": 0
					},
					{
						"path": "code/themes/gray.src.js",
						"line": 0
					},
					{
						"path": "code/themes/grid-light.src.js",
						"line": 0
					},
					{
						"path": "code/themes/grid.src.js",
						"line": 0
					},
					{
						"path": "code/themes/sand-signika.src.js",
						"line": 0
					},
					{
						"path": "code/themes/skies.src.js",
						"line": 0
					},
					{
						"path": "code/themes/sunset.src.js",
						"line": 0
					}
				]
			},
			"children": [
				{
					"doclet": {
						"name": "Highcharts.AST",
						"description": "The AST class represents an abstract syntax tree of HTML or SVG content. It\ncan take HTML as an argument, parse it, optionally transform it to SVG, then\nperform sanitation before inserting it into the DOM.",
						"kind": "class"
					},
					"meta": {
						"files": [
							{
								"path": "code/highcharts.src.js",
								"line": 7947
							}
						]
					},
					"children": [
						{
							"doclet": {
								"name": "Highcharts.AST.addToDOM",
								"description": "Add the tree defined as a hierarchical JS structure to the DOM",
								"kind": "function",
								"parameters": {
									"parent": {
										"description": "The node where it should be added",
										"types": [
											"Highcharts.HTMLDOMElement",
											"Highcharts.SVGDOMElement"
										]
									}
								},
								"return": {
									"types": [
										"Highcharts.HTMLDOMElement",
										"Highcharts.SVGDOMElement"
									],
									"description": "The inserted node."
								}
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 8030
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.AST.allowedAttributes",
								"description": "The list of allowed SVG or HTML attributes, used for sanitizing\npotentially harmful content from the chart configuration before adding to\nthe DOM.",
								"kind": "member",
								"isStatic": true
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 8168
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.AST.allowedReferences",
								"description": "The list of allowed references for referring attributes like `href` and\n`src`. Attribute values will only be allowed if they start with one of\nthese strings.",
								"kind": "member",
								"isStatic": true
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 8250
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.AST.allowedTags",
								"description": "The list of allowed SVG or HTML tags, used for sanitizing potentially\nharmful content from the chart configuration before adding to the DOM.",
								"kind": "member",
								"isStatic": true
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 8271
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.AST.constructor",
								"description": "The AST class represents an abstract syntax tree of HTML or SVG content. It\ncan take HTML as an argument, parse it, optionally transform it to SVG, then\nperform sanitation before inserting it into the DOM.",
								"kind": "constructor",
								"parameters": {
									"source": {
										"description": "Either an HTML string or an ASTNode list to populate the tree.",
										"types": [
											"string",
											"Array.<Highcharts.ASTNode>"
										]
									}
								},
								"return": {
									"types": [
										"void"
									]
								}
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 0
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.AST.filterUserAttributes",
								"description": "Filter an object of SVG or HTML attributes against the allow list.",
								"kind": "function",
								"parameters": {
									"attributes": {
										"description": "The attributes to filter",
										"types": [
											"Highcharts.SVGAttributes"
										]
									}
								},
								"return": {
									"types": [
										"Highcharts.SVGAttributes"
									],
									"description": "The filtered attributes"
								}
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 7974
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.AST.setElementHTML",
								"description": "Utility function to set html content for an element by passing in a\nmarkup string. The markup is safely parsed by the AST class to avoid\nXSS vulnerabilities. This function should be used instead of setting\n`innerHTML` in all cases where the content is not fully trusted.",
								"kind": "function",
								"parameters": {
									"el": {
										"description": "Node to set content of.",
										"types": [
											"SVGDOMElement",
											"HTMLDOMElement"
										]
									},
									"html": {
										"description": "Markup string",
										"types": [
											"string"
										]
									}
								},
								"return": {
									"types": [
										"void"
									]
								}
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 8003
									}
								]
							}
						}
					]
				},
				{
					"doclet": {
						"name": "Highcharts.ASTNode",
						"description": "Serialized form of an SVG/HTML definition, including children.",
						"kind": "interface"
					},
					"meta": {
						"files": [
							{
								"path": "code/highcharts.src.js",
								"line": 8357
							}
						]
					},
					"children": [
						{
							"doclet": {
								"name": "Highcharts.ASTNode.attributes",
								"description": "",
								"kind": "member",
								"types": [
									"Highcharts.SVGAttributes",
									"undefined"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 8361
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.ASTNode.children",
								"description": "",
								"kind": "member",
								"types": [
									"Array.<Highcharts.ASTNode>",
									"undefined"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 8364
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.ASTNode.tagName",
								"description": "",
								"kind": "member",
								"types": [
									"string",
									"undefined"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 8367
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.ASTNode.textContent",
								"description": "",
								"kind": "member",
								"types": [
									"string",
									"undefined"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 8370
									}
								]
							}
						}
					]
				},
				{
					"doclet": {
						"name": "Highcharts.AccessibilityAnnouncementFormatter",
						"description": "Formatter callback for the accessibility announcement.",
						"kind": "typedef",
						"types": [
							"function"
						],
						"parameters": {
							"updatedSeries": {
								"description": "Array of all series that received updates. If an announcement is already\nqueued, the series that received updates for that announcement are also\nincluded in this array.",
								"types": [
									"Array.<Highcharts.Series>"
								]
							},
							"addedSeries": {
								"description": "This is provided if {@link Highcharts.Chart#addSeries} was called, and there\nis a new series. In that case, this argument is a reference to the new\nseries.",
								"isOptional": true,
								"types": [
									"Highcharts.Series"
								]
							},
							"addedPoint": {
								"description": "This is provided if {@link Highcharts.Series#addPoint} was called, and there\nis a new point. In that case, this argument is a reference to the new point.",
								"isOptional": true,
								"types": [
									"Highcharts.Point"
								]
							}
						},
						"return": {
							"types": [
								"false",
								"string"
							],
							"description": "The function should return a string with the text to announce to the user.\nReturn empty string to not announce anything. Return `false` to use the\ndefault announcement format."
						}
					},
					"meta": {
						"files": [
							{
								"path": "code/modules/accessibility.src.js",
								"line": 8258
							}
						]
					}
				},
				{
					"doclet": {
						"name": "Highcharts.AccessibilityComponent",
						"description": "The AccessibilityComponent base class, representing a part of the chart that\nhas accessibility logic connected to it. This class can be inherited from to\ncreate a custom accessibility component for a chart.\n\nComponents should take care to destroy added elements and unregister event\nhandlers on destroy. This is handled automatically if using this.addEvent and\nthis.createElement.",
						"kind": "class"
					},
					"meta": {
						"files": [
							{
								"path": "code/modules/accessibility.src.js",
								"line": 796
							}
						]
					},
					"children": [
						{
							"doclet": {
								"name": "Highcharts.AccessibilityComponent.destroy",
								"description": "Called when accessibility is disabled or chart is destroyed.",
								"kind": "function",
								"isStatic": true,
								"return": {
									"types": [
										"void"
									]
								}
							},
							"meta": {
								"files": [
									{
										"path": "code/modules/accessibility.src.js",
										"line": 794
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.AccessibilityComponent.getKeyboardNavigation",
								"description": "Get keyboard navigation handler for this component.",
								"kind": "function",
								"isStatic": true,
								"return": {
									"types": [
										"Highcharts.KeyboardNavigationHandler"
									]
								}
							},
							"meta": {
								"files": [
									{
										"path": "code/modules/accessibility.src.js",
										"line": 780
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.AccessibilityComponent.init",
								"description": "Called on component initialization.",
								"kind": "function",
								"isStatic": true,
								"return": {
									"types": [
										"void"
									]
								}
							},
							"meta": {
								"files": [
									{
										"path": "code/modules/accessibility.src.js",
										"line": 775
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.AccessibilityComponent.onChartRender",
								"description": "Called on every chart render.",
								"kind": "function",
								"isStatic": true,
								"return": {
									"types": [
										"void"
									]
								}
							},
							"meta": {
								"files": [
									{
										"path": "code/modules/accessibility.src.js",
										"line": 790
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.AccessibilityComponent.onChartUpdate",
								"description": "Called on updates to the chart,\n including options changes.\nNote that this is also called on first render of chart.",
								"kind": "function",
								"isStatic": true,
								"return": {
									"types": [
										"void"
									]
								}
							},
							"meta": {
								"files": [
									{
										"path": "code/modules/accessibility.src.js",
										"line": 786
									}
								]
							}
						}
					]
				},
				{
					"doclet": {
						"name": "Highcharts.AjaxSettingsObject",
						"description": "",
						"kind": "interface"
					},
					"meta": {
						"files": [
							{
								"path": "code/modules/data.src.js",
								"line": 198
							},
							{
								"path": "code/modules/exporting.src.js",
								"line": 1394
							}
						]
					},
					"children": [
						{
							"doclet": {
								"name": "Highcharts.AjaxSettingsObject.data",
								"description": "The payload to send.",
								"kind": "member",
								"types": [
									"string",
									"Highcharts.Dictionary.<any>"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/modules/data.src.js",
										"line": 200
									},
									{
										"path": "code/modules/exporting.src.js",
										"line": 1396
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.AjaxSettingsObject.dataType",
								"description": "The data type expected.",
								"kind": "member",
								"types": [
									"\"json\"",
									"\"xml\"",
									"\"text\"",
									"\"octet\""
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/modules/data.src.js",
										"line": 205
									},
									{
										"path": "code/modules/exporting.src.js",
										"line": 1401
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.AjaxSettingsObject.error",
								"description": "Function to call on error.",
								"kind": "member",
								"types": [
									"function"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/modules/data.src.js",
										"line": 209
									},
									{
										"path": "code/modules/exporting.src.js",
										"line": 1405
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.AjaxSettingsObject.headers",
								"description": "The headers; keyed on header name.",
								"kind": "member",
								"types": [
									"Highcharts.Dictionary.<string>"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/modules/data.src.js",
										"line": 213
									},
									{
										"path": "code/modules/exporting.src.js",
										"line": 1409
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.AjaxSettingsObject.success",
								"description": "Function to call on success.",
								"kind": "member",
								"types": [
									"function"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/modules/data.src.js",
										"line": 217
									},
									{
										"path": "code/modules/exporting.src.js",
										"line": 1413
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.AjaxSettingsObject.type",
								"description": "The HTTP method to use. For example GET or POST.",
								"kind": "member",
								"types": [
									"string"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/modules/data.src.js",
										"line": 221
									},
									{
										"path": "code/modules/exporting.src.js",
										"line": 1417
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.AjaxSettingsObject.url",
								"description": "The URL to call.",
								"kind": "member",
								"types": [
									"string"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/modules/data.src.js",
										"line": 225
									},
									{
										"path": "code/modules/exporting.src.js",
										"line": 1421
									}
								]
							}
						}
					]
				},
				{
					"doclet": {
						"name": "Highcharts.AlignObject",
						"description": "Options to align the element relative to the chart or another box.",
						"kind": "interface"
					},
					"meta": {
						"files": [
							{
								"path": "code/highcharts.src.js",
								"line": 10946
							}
						]
					},
					"children": [
						{
							"doclet": {
								"name": "Highcharts.AlignObject.align",
								"description": "Horizontal alignment. Can be one of `left`, `center` and `right`.",
								"kind": "member",
								"defaultValue": "left",
								"types": [
									"Highcharts.AlignValue",
									"undefined"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 10950
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.AlignObject.alignByTranslate",
								"description": "Use the `transform` attribute with translateX and translateY custom\nattributes to align this elements rather than `x` and `y` attributes.",
								"kind": "member",
								"defaultValue": "false",
								"types": [
									"boolean",
									"undefined"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 10978
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.AlignObject.verticalAlign",
								"description": "Vertical alignment. Can be one of `top`, `middle` and `bottom`.",
								"kind": "member",
								"defaultValue": "top",
								"types": [
									"Highcharts.VerticalAlignValue",
									"undefined"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 10957
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.AlignObject.x",
								"description": "Horizontal pixel offset from alignment.",
								"kind": "member",
								"defaultValue": "0",
								"types": [
									"number",
									"undefined"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 10964
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.AlignObject.y",
								"description": "Vertical pixel offset from alignment.",
								"kind": "member",
								"defaultValue": "0",
								"types": [
									"number",
									"undefined"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 10971
									}
								]
							}
						}
					]
				},
				{
					"doclet": {
						"name": "Highcharts.AlignValue",
						"description": "The horizontal alignment of an element.",
						"kind": "typedef",
						"types": [
							"\"center\"",
							"\"left\"",
							"\"right\""
						]
					},
					"meta": {
						"files": [
							{
								"path": "code/highcharts.src.js",
								"line": 10941
							}
						]
					}
				},
				{
					"doclet": {
						"name": "Highcharts.AnimationOptionsObject",
						"description": "An animation configuration. Animation configurations can also be defined as\nbooleans, where `false` turns off animation and `true` defaults to a duration\nof 500ms and defer of 0ms.",
						"kind": "interface"
					},
					"meta": {
						"files": [
							{
								"path": "code/highcharts.src.js",
								"line": 1834
							}
						]
					},
					"children": [
						{
							"doclet": {
								"name": "Highcharts.AnimationOptionsObject.complete",
								"description": "A callback function to exectute when the animation finishes.",
								"kind": "member",
								"types": [
									"function",
									"undefined"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 1840
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.AnimationOptionsObject.defer",
								"description": "The animation defer in milliseconds.",
								"kind": "member",
								"types": [
									"number",
									"undefined"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 1844
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.AnimationOptionsObject.duration",
								"description": "The animation duration in milliseconds.",
								"kind": "member",
								"types": [
									"number",
									"undefined"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 1848
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.AnimationOptionsObject.easing",
								"description": "The name of an easing function as defined on the `Math` object.",
								"kind": "member",
								"types": [
									"string",
									"function",
									"undefined"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 1852
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.AnimationOptionsObject.step",
								"description": "A callback function to execute on each step of each attribute or CSS property\nthat's being animated. The first argument contains information about the\nanimation and progress.",
								"kind": "member",
								"types": [
									"function",
									"undefined"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 1856
									}
								]
							}
						}
					]
				},
				{
					"doclet": {
						"name": "Highcharts.AnimationStepCallbackFunction",
						"description": "Creates a frame for the animated SVG element.",
						"kind": "typedef",
						"types": [
							"function"
						],
						"parameters": {
							"this": {
								"description": "The SVG element to animate.",
								"types": [
									"Highcharts.SVGElement"
								]
							}
						},
						"return": {
							"types": [
								"void"
							]
						}
					},
					"meta": {
						"files": [
							{
								"path": "code/highcharts.src.js",
								"line": 1863
							}
						]
					}
				},
				{
					"doclet": {
						"name": "Highcharts.Annotation",
						"description": "An annotation class which serves as a container for items like labels or\nshapes. Created items are positioned on the chart either by linking them to\nexisting points or created mock points",
						"kind": "class"
					},
					"meta": {
						"files": [
							{
								"path": "code/modules/annotations.src.js",
								"line": 2487
							},
							{
								"path": "code/modules/annotations-advanced.src.js",
								"line": 2487
							},
							{
								"path": "code/modules/stock-tools.src.js",
								"line": 2488
							}
						]
					},
					"children": [
						{
							"doclet": {
								"name": "Highcharts.Annotation.constructor",
								"description": "An annotation class which serves as a container for items like labels or\nshapes. Created items are positioned on the chart either by linking them to\nexisting points or created mock points",
								"kind": "constructor",
								"parameters": {
									"chart": {
										"description": "a chart instance",
										"types": [
											"Highcharts.Chart"
										]
									},
									"userOptions": {
										"description": "the options object",
										"types": [
											"Highcharts.AnnotationsOptions"
										]
									}
								},
								"return": {
									"types": [
										"void"
									]
								}
							},
							"meta": {
								"files": [
									{
										"path": "code/modules/annotations.src.js",
										"line": 0
									},
									{
										"path": "code/modules/annotations-advanced.src.js",
										"line": 0
									},
									{
										"path": "code/modules/stock-tools.src.js",
										"line": 0
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.Annotation.group",
								"description": "The group svg element.",
								"kind": "member",
								"types": [
									"Highcharts.SVGElement"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/modules/annotations.src.js",
										"line": 2583
									},
									{
										"path": "code/modules/annotations-advanced.src.js",
										"line": 2583
									},
									{
										"path": "code/modules/stock-tools.src.js",
										"line": 2584
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.Annotation.labelsGroup",
								"description": "The group svg element of the annotation's labels.",
								"kind": "member",
								"types": [
									"Highcharts.SVGElement"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/modules/annotations.src.js",
										"line": 2595
									},
									{
										"path": "code/modules/annotations-advanced.src.js",
										"line": 2595
									},
									{
										"path": "code/modules/stock-tools.src.js",
										"line": 2596
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.Annotation.options",
								"description": "The options for the annotations.",
								"kind": "member",
								"types": [
									"Highcharts.AnnotationsOptions"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/modules/annotations.src.js",
										"line": 2557
									},
									{
										"path": "code/modules/annotations-advanced.src.js",
										"line": 2557
									},
									{
										"path": "code/modules/stock-tools.src.js",
										"line": 2558
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.Annotation.shapesGroup",
								"description": "The group svg element of the annotation's shapes.",
								"kind": "member",
								"types": [
									"Highcharts.SVGElement"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/modules/annotations.src.js",
										"line": 2589
									},
									{
										"path": "code/modules/annotations-advanced.src.js",
										"line": 2589
									},
									{
										"path": "code/modules/stock-tools.src.js",
										"line": 2590
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.Annotation.update",
								"description": "Updates an annotation.",
								"kind": "function",
								"parameters": {
									"userOptions": {
										"description": "New user options for the annotation.",
										"types": [
											"Partial.<Highcharts.AnnotationsOptions>"
										]
									}
								},
								"return": {
									"types": [
										"void"
									]
								}
							},
							"meta": {
								"files": [
									{
										"path": "code/modules/annotations.src.js",
										"line": 2830
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.Annotation.update",
								"description": "Updates an annotation.",
								"kind": "function",
								"parameters": {
									"userOptions": {
										"description": "New user options for the annotation.",
										"types": [
											"Partial.<Highcharts.AnnotationsOptions>"
										]
									}
								},
								"return": {
									"types": [
										"void"
									]
								}
							},
							"meta": {
								"files": [
									{
										"path": "code/modules/annotations-advanced.src.js",
										"line": 2830
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.Annotation.update",
								"description": "Updates an annotation.",
								"kind": "function",
								"parameters": {
									"userOptions": {
										"description": "New user options for the annotation.",
										"types": [
											"Partial.<Highcharts.AnnotationsOptions>"
										]
									}
								},
								"return": {
									"types": [
										"void"
									]
								}
							},
							"meta": {
								"files": [
									{
										"path": "code/modules/stock-tools.src.js",
										"line": 2831
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.Annotation.userOptions",
								"description": "The user options for the annotations.",
								"kind": "member",
								"types": [
									"Highcharts.AnnotationsOptions"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/modules/annotations.src.js",
										"line": 2564
									},
									{
										"path": "code/modules/annotations-advanced.src.js",
										"line": 2564
									},
									{
										"path": "code/modules/stock-tools.src.js",
										"line": 2565
									}
								]
							}
						}
					]
				},
				{
					"doclet": {
						"name": "Highcharts.AnnotationControlPoint",
						"description": "A control point class which is a connection between controllable\ntransform methods and a user actions.",
						"kind": "class"
					},
					"meta": {
						"files": [
							{
								"path": "code/modules/annotations.src.js",
								"line": 300
							},
							{
								"path": "code/modules/annotations-advanced.src.js",
								"line": 300
							},
							{
								"path": "code/modules/stock-tools.src.js",
								"line": 301
							}
						]
					},
					"children": [
						{
							"doclet": {
								"name": "Highcharts.AnnotationControlPoint.constructor",
								"description": "A control point class which is a connection between controllable\ntransform methods and a user actions.",
								"kind": "constructor",
								"parameters": {
									"chart": {
										"description": "A chart instance.",
										"types": [
											"Highcharts.Chart"
										]
									},
									"target": {
										"description": "A controllable instance which is a target for a control point.",
										"types": [
											"Highcharts.AnnotationControllable"
										]
									},
									"options": {
										"description": "An options object.",
										"types": [
											"Highcharts.AnnotationControlPointOptionsObject"
										]
									},
									"index": {
										"description": "Point index.",
										"isOptional": true,
										"types": [
											"number"
										]
									}
								},
								"return": {
									"types": [
										"void"
									]
								}
							},
							"meta": {
								"files": [
									{
										"path": "code/modules/annotations.src.js",
										"line": 0
									},
									{
										"path": "code/modules/annotations-advanced.src.js",
										"line": 0
									},
									{
										"path": "code/modules/stock-tools.src.js",
										"line": 0
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.AnnotationControlPoint.setVisibility",
								"description": "Set the visibility of the control point.",
								"kind": "function",
								"parameters": {
									"visible": {
										"description": "Visibility of the control point.",
										"types": [
											"boolean"
										]
									}
								},
								"return": {
									"types": [
										"void"
									]
								}
							},
							"meta": {
								"files": [
									{
										"path": "code/modules/annotations.src.js",
										"line": 357
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.AnnotationControlPoint.setVisibility",
								"description": "Set the visibility of the control point.",
								"kind": "function",
								"parameters": {
									"visible": {
										"description": "Visibility of the control point.",
										"types": [
											"boolean"
										]
									}
								},
								"return": {
									"types": [
										"void"
									]
								}
							},
							"meta": {
								"files": [
									{
										"path": "code/modules/annotations-advanced.src.js",
										"line": 357
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.AnnotationControlPoint.setVisibility",
								"description": "Set the visibility of the control point.",
								"kind": "function",
								"parameters": {
									"visible": {
										"description": "Visibility of the control point.",
										"types": [
											"boolean"
										]
									}
								},
								"return": {
									"types": [
										"void"
									]
								}
							},
							"meta": {
								"files": [
									{
										"path": "code/modules/stock-tools.src.js",
										"line": 358
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.AnnotationControlPoint.update",
								"description": "Update the control point.",
								"kind": "function",
								"parameters": {
									"userOptions": {
										"description": "New options for the control point.",
										"types": [
											"Partial.<Highcharts.AnnotationControlPointOptionsObject>"
										]
									}
								},
								"return": {
									"types": [
										"void"
									]
								}
							},
							"meta": {
								"files": [
									{
										"path": "code/modules/annotations.src.js",
										"line": 407
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.AnnotationControlPoint.update",
								"description": "Update the control point.",
								"kind": "function",
								"parameters": {
									"userOptions": {
										"description": "New options for the control point.",
										"types": [
											"Partial.<Highcharts.AnnotationControlPointOptionsObject>"
										]
									}
								},
								"return": {
									"types": [
										"void"
									]
								}
							},
							"meta": {
								"files": [
									{
										"path": "code/modules/annotations-advanced.src.js",
										"line": 407
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.AnnotationControlPoint.update",
								"description": "Update the control point.",
								"kind": "function",
								"parameters": {
									"userOptions": {
										"description": "New options for the control point.",
										"types": [
											"Partial.<Highcharts.AnnotationControlPointOptionsObject>"
										]
									}
								},
								"return": {
									"types": [
										"void"
									]
								}
							},
							"meta": {
								"files": [
									{
										"path": "code/modules/stock-tools.src.js",
										"line": 408
									}
								]
							}
						}
					]
				},
				{
					"doclet": {
						"name": "Highcharts.AnnotationControlPointPositionerFunction",
						"description": "Callback to modify annotation's possitioner controls.",
						"kind": "typedef",
						"types": [
							"function"
						],
						"parameters": {
							"this": {
								"types": [
									"Highcharts.AnnotationControlPoint"
								]
							},
							"target": {
								"types": [
									"Highcharts.AnnotationControllable"
								]
							}
						},
						"return": {
							"types": [
								"Highcharts.PositionObject"
							]
						}
					},
					"meta": {
						"files": [
							{
								"path": "code/modules/annotations.src.js",
								"line": 288
							},
							{
								"path": "code/modules/annotations-advanced.src.js",
								"line": 288
							},
							{
								"path": "code/modules/stock-tools.src.js",
								"line": 289
							}
						]
					}
				},
				{
					"doclet": {
						"name": "Highcharts.AnnotationControllable",
						"description": "",
						"kind": "interface"
					},
					"meta": {
						"files": [
							{
								"path": "code/modules/annotations.src.js",
								"line": 912
							},
							{
								"path": "code/modules/annotations-advanced.src.js",
								"line": 912
							},
							{
								"path": "code/modules/stock-tools.src.js",
								"line": 913
							}
						]
					},
					"children": [
						{
							"doclet": {
								"name": "Highcharts.AnnotationControllable.annotation",
								"description": "",
								"kind": "member",
								"types": [
									"Highcharts.Annotation"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/modules/annotations.src.js",
										"line": 914
									},
									{
										"path": "code/modules/annotations-advanced.src.js",
										"line": 914
									},
									{
										"path": "code/modules/stock-tools.src.js",
										"line": 915
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.AnnotationControllable.chart",
								"description": "",
								"kind": "member",
								"types": [
									"Highcharts.Chart"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/modules/annotations.src.js",
										"line": 917
									},
									{
										"path": "code/modules/annotations-advanced.src.js",
										"line": 917
									},
									{
										"path": "code/modules/stock-tools.src.js",
										"line": 918
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.AnnotationControllable.collection",
								"description": "",
								"kind": "member",
								"types": [
									"string"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/modules/annotations.src.js",
										"line": 920
									},
									{
										"path": "code/modules/annotations-advanced.src.js",
										"line": 920
									},
									{
										"path": "code/modules/stock-tools.src.js",
										"line": 921
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.AnnotationControllable.points",
								"description": "",
								"kind": "member",
								"types": [
									"Array.<Highcharts.Point>"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/modules/annotations.src.js",
										"line": 927
									},
									{
										"path": "code/modules/annotations-advanced.src.js",
										"line": 927
									},
									{
										"path": "code/modules/stock-tools.src.js",
										"line": 928
									}
								]
							}
						}
					]
				},
				{
					"doclet": {
						"name": "Highcharts.AnnotationDraggableValue",
						"description": "Possible directions for draggable annotations. An empty string (`''`)\nmakes the annotation undraggable.",
						"kind": "typedef",
						"types": [
							"''",
							"'x'",
							"'xy'",
							"'y'"
						]
					},
					"meta": {
						"files": [
							{
								"path": "code/modules/annotations.src.js",
								"line": 2455
							},
							{
								"path": "code/modules/annotations-advanced.src.js",
								"line": 2455
							},
							{
								"path": "code/modules/stock-tools.src.js",
								"line": 2456
							}
						]
					}
				},
				{
					"doclet": {
						"name": "Highcharts.AnnotationMockPointFunction",
						"description": "Callback function that returns the annotation shape point.",
						"kind": "typedef",
						"types": [
							"function"
						],
						"parameters": {
							"annotation": {
								"description": "An annotation instance.",
								"types": [
									"Highcharts.Annotation"
								]
							}
						},
						"return": {
							"types": [
								"Highcharts.AnnotationMockPointOptionsObject"
							],
							"description": "Annotations shape point."
						}
					},
					"meta": {
						"files": [
							{
								"path": "code/modules/annotations.src.js",
								"line": 3825
							},
							{
								"path": "code/modules/annotations-advanced.src.js",
								"line": 3825
							},
							{
								"path": "code/modules/stock-tools.src.js",
								"line": 3826
							}
						]
					}
				},
				{
					"doclet": {
						"name": "Highcharts.AnnotationMockPointOptionsObject",
						"description": "Object of shape point.",
						"kind": "interface"
					},
					"meta": {
						"files": [
							{
								"path": "code/modules/annotations.src.js",
								"line": 3785
							},
							{
								"path": "code/modules/annotations-advanced.src.js",
								"line": 3785
							},
							{
								"path": "code/modules/stock-tools.src.js",
								"line": 3786
							}
						]
					},
					"children": [
						{
							"doclet": {
								"name": "Highcharts.AnnotationMockPointOptionsObject.x",
								"description": "The x position of the point. Units can be either in axis\nor chart pixel coordinates.",
								"kind": "member",
								"isStatic": true,
								"types": [
									"number"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/modules/annotations.src.js",
										"line": 3791
									},
									{
										"path": "code/modules/annotations-advanced.src.js",
										"line": 3791
									},
									{
										"path": "code/modules/stock-tools.src.js",
										"line": 3792
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.AnnotationMockPointOptionsObject.xAxis",
								"description": "This number defines which xAxis the point is connected to.\nIt refers to either the axis id or the index of the axis in\nthe xAxis array. If the option is not configured or the axis\nis not found the point's x coordinate refers to the chart\npixels.",
								"kind": "member",
								"isStatic": true,
								"types": [
									"number",
									"string",
									"null"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/modules/annotations.src.js",
										"line": 3805
									},
									{
										"path": "code/modules/annotations-advanced.src.js",
										"line": 3805
									},
									{
										"path": "code/modules/stock-tools.src.js",
										"line": 3806
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.AnnotationMockPointOptionsObject.y",
								"description": "The y position of the point. Units can be either in axis\nor chart pixel coordinates.",
								"kind": "member",
								"isStatic": true,
								"types": [
									"number"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/modules/annotations.src.js",
										"line": 3798
									},
									{
										"path": "code/modules/annotations-advanced.src.js",
										"line": 3798
									},
									{
										"path": "code/modules/stock-tools.src.js",
										"line": 3799
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.AnnotationMockPointOptionsObject.yAxis",
								"description": "This number defines which yAxis the point is connected to.\nIt refers to either the axis id or the index of the axis in\nthe yAxis array. If the option is not configured or the axis\nis not found the point's y coordinate refers to the chart\npixels.",
								"kind": "member",
								"isStatic": true,
								"types": [
									"number",
									"string",
									"null"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/modules/annotations.src.js",
										"line": 3815
									},
									{
										"path": "code/modules/annotations-advanced.src.js",
										"line": 3815
									},
									{
										"path": "code/modules/stock-tools.src.js",
										"line": 3816
									}
								]
							}
						}
					]
				},
				{
					"doclet": {
						"name": "Highcharts.AnnotationShapePointOptions",
						"description": "Shape point as string, object or function.",
						"kind": "typedef",
						"types": [
							"string",
							"Highcharts.AnnotationMockPointOptionsObject",
							"Highcharts.AnnotationMockPointFunction"
						]
					},
					"meta": {
						"files": [
							{
								"path": "code/modules/annotations.src.js",
								"line": 3836
							},
							{
								"path": "code/modules/annotations-advanced.src.js",
								"line": 3836
							},
							{
								"path": "code/modules/stock-tools.src.js",
								"line": 3837
							}
						]
					}
				},
				{
					"doclet": {
						"name": "Highcharts.Axis",
						"description": "Create a new axis object. Called internally when instanciating a new chart or\nadding axes by {@link Highcharts.Chart#addAxis}.\n\nA chart can have from 0 axes (pie chart) to multiples. In a normal, single\nseries cartesian chart, there is one X axis and one Y axis.\n\nThe X axis or axes are referenced by {@link Highcharts.Chart.xAxis}, which is\nan array of Axis objects. If there is only one axis, it can be referenced\nthrough `chart.xAxis[0]`, and multiple axes have increasing indices. The same\npattern goes for Y axes.\n\nIf you need to get the axes from a series object, use the `series.xAxis` and\n`series.yAxis` properties. These are not arrays, as one series can only be\nassociated to one X and one Y axis.\n\nA third way to reference the axis programmatically is by `id`. Add an `id` in\nthe axis configuration options, and get the axis by\n{@link Highcharts.Chart#get}.\n\nConfiguration options for the axes are given in options.xAxis and\noptions.yAxis.",
						"kind": "class"
					},
					"meta": {
						"files": [
							{
								"path": "code/highcharts.src.js",
								"line": 18637
							}
						]
					},
					"children": [
						{
							"doclet": {
								"name": "Highcharts.Axis.addPlotBand",
								"description": "Add a plot band after render time.",
								"kind": "function",
								"parameters": {
									"options": {
										"description": "A configuration object for the plot band, as defined in\n[xAxis.plotBands](https://api.highcharts.com/highcharts/xAxis.plotBands).",
										"types": [
											"Highcharts.AxisPlotBandsOptions"
										]
									}
								},
								"return": {
									"types": [
										"Highcharts.PlotLineOrBand",
										"undefined"
									],
									"description": "The added plot band."
								}
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 22706
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.Axis.addPlotLine",
								"description": "Add a plot line after render time.",
								"kind": "function",
								"parameters": {
									"options": {
										"description": "A configuration object for the plot line, as defined in\n[xAxis.plotLines](https://api.highcharts.com/highcharts/xAxis.plotLines).",
										"types": [
											"Highcharts.AxisPlotLinesOptions"
										]
									}
								},
								"return": {
									"types": [
										"Highcharts.PlotLineOrBand",
										"undefined"
									],
									"description": "The added plot line."
								}
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 22724
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.Axis.addTitle",
								"description": "Adds the title defined in axis.options.title.",
								"kind": "function",
								"parameters": {
									"display": {
										"description": "Whether or not to display the title.",
										"isOptional": true,
										"types": [
											"boolean"
										]
									}
								},
								"return": {
									"types": [
										"void"
									]
								}
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 20958
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.Axis.applyGrouping",
								"description": "Check the groupPixelWidth and apply the grouping if needed.\nFired only after processing the data.",
								"kind": "function",
								"products": [
									"highstock"
								],
								"return": {
									"types": [
										"void"
									]
								}
							},
							"meta": {
								"files": [
									{
										"path": "code/modules/datagrouping.src.js",
										"line": 733
									},
									{
										"path": "code/modules/stock.src.js",
										"line": 2476
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.Axis.categories",
								"description": "If categories are present for the axis, names are used instead of\nnumbers for that axis.\n\nSince Highcharts 3.0, categories can also be extracted by giving each\npoint a name and setting axis type to `category`. However, if you\nhave multiple series, best practice remains defining the `categories`\narray.",
								"kind": "member",
								"isReadOnly": true,
								"see": [
									"[xAxis.categories](/highcharts/xAxis.categories)"
								],
								"types": [
									"Array.<string>"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 18826
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.Axis.chart",
								"description": "The Chart that the axis belongs to.",
								"kind": "member",
								"types": [
									"Highcharts.Chart"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 18751
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.Axis.coll",
								"description": "The collection where the axis belongs, for example `xAxis`, `yAxis`\nor `colorAxis`. Corresponds to properties on Chart, for example\n{@link Chart.xAxis}.",
								"kind": "member",
								"types": [
									"string"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 18772
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.Axis.constructor",
								"description": "Create a new axis object. Called internally when instanciating a new chart or\nadding axes by {@link Highcharts.Chart#addAxis}.\n\nA chart can have from 0 axes (pie chart) to multiples. In a normal, single\nseries cartesian chart, there is one X axis and one Y axis.\n\nThe X axis or axes are referenced by {@link Highcharts.Chart.xAxis}, which is\nan array of Axis objects. If there is only one axis, it can be referenced\nthrough `chart.xAxis[0]`, and multiple axes have increasing indices. The same\npattern goes for Y axes.\n\nIf you need to get the axes from a series object, use the `series.xAxis` and\n`series.yAxis` properties. These are not arrays, as one series can only be\nassociated to one X and one Y axis.\n\nA third way to reference the axis programmatically is by `id`. Add an `id` in\nthe axis configuration options, and get the axis by\n{@link Highcharts.Chart#get}.\n\nConfiguration options for the axes are given in options.xAxis and\noptions.yAxis.",
								"kind": "constructor",
								"parameters": {
									"chart": {
										"description": "The Chart instance to apply the axis on.",
										"types": [
											"Highcharts.Chart"
										]
									},
									"userOptions": {
										"description": "Axis options.",
										"types": [
											"Highcharts.AxisOptions"
										]
									}
								},
								"return": {
									"types": [
										"void"
									]
								}
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 0
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.Axis.crosshair",
								"description": "The processed crosshair options.",
								"kind": "member",
								"types": [
									"boolean",
									"Highcharts.AxisCrosshairOptions"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 18898
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.Axis.defaultLabelFormatter",
								"description": "The default label formatter. The context is a special config object for\nthe label. In apps, use the\n[labels.formatter](https://api.highcharts.com/highcharts/xAxis.labels.formatter)\ninstead, except when a modification is needed.",
								"kind": "function",
								"parameters": {
									"this": {
										"description": "Formatter context of axis label.",
										"types": [
											"Highcharts.AxisLabelsFormatterContextObject"
										]
									},
									"ctx": {
										"description": "Formatter context of axis label.",
										"isOptional": true,
										"types": [
											"Highcharts.AxisLabelsFormatterContextObject"
										]
									}
								},
								"return": {
									"types": [
										"string"
									],
									"description": "The formatted label content."
								}
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 18960
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.Axis.drawCrosshair",
								"description": "Internal function to draw a crosshair.",
								"kind": "function",
								"fires": [
									"Highcharts.Axis#afterDrawCrosshair",
									"Highcharts.Axis#drawCrosshair"
								],
								"parameters": {
									"e": {
										"description": "The event arguments from the modified pointer event, extended with\n`chartX` and `chartY`",
										"isOptional": true,
										"types": [
											"Highcharts.PointerEventObject"
										]
									},
									"point": {
										"description": "The Point object if the crosshair snaps to points.",
										"isOptional": true,
										"types": [
											"Highcharts.Point"
										]
									}
								},
								"return": {
									"types": [
										"void"
									]
								}
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 21611
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.Axis.drilldownCategory",
								"description": "Drill down to a given category. This is the same as clicking on an axis\nlabel. If multiple series with drilldown are present, all will drill down to\nthe given category.\n\nSee also `Point.doDrilldown` for drilling down on a single point instance.",
								"kind": "function",
								"parameters": {
									"x": {
										"description": "The index of the category",
										"types": [
											"number"
										]
									},
									"originalEvent": {
										"description": "The original event, used internally.",
										"isOptional": true,
										"types": [
											"global.MouseEvent"
										]
									}
								},
								"return": {
									"types": [
										"void"
									]
								}
							},
							"meta": {
								"files": [
									{
										"path": "code/modules/drilldown.src.js",
										"line": 1066
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.Axis.getExtremes",
								"description": "Get the current extremes for the axis.",
								"kind": "function",
								"return": {
									"types": [
										"Highcharts.ExtremesObject"
									],
									"description": "An object containing extremes information."
								}
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 20542
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.Axis.getLinePath",
								"description": "Internal function to get the path for the axis line. Extended for polar\ncharts.",
								"kind": "function",
								"parameters": {
									"lineWidth": {
										"description": "The line width in pixels.",
										"types": [
											"number"
										]
									}
								},
								"return": {
									"types": [
										"Highcharts.SVGPathArray"
									],
									"description": "The SVG path definition in array form."
								}
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 21177
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.Axis.getLinearTickPositions",
								"description": "Internal function to get the tick positions of a linear axis to round\nvalues like whole tens or every five.",
								"kind": "function",
								"parameters": {
									"tickInterval": {
										"description": "The normalized tick interval.",
										"types": [
											"number"
										]
									},
									"min": {
										"description": "Axis minimum.",
										"types": [
											"number"
										]
									},
									"max": {
										"description": "Axis maximum.",
										"types": [
											"number"
										]
									}
								},
								"return": {
									"types": [
										"Array.<number>"
									],
									"description": "An array of axis values where ticks should be placed."
								}
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 19332
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.Axis.getMinorTickInterval",
								"description": "Resolve the new minorTicks/minorTickInterval options into the legacy\nloosely typed minorTickInterval option.",
								"kind": "function",
								"return": {
									"types": [
										"number",
										"\"auto\"",
										"null"
									]
								}
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 19385
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.Axis.getMinorTickPositions",
								"description": "Internal function to return the minor tick positions. For logarithmic\naxes, the same logic as for major ticks is reused.",
								"kind": "function",
								"return": {
									"types": [
										"Array.<number>"
									],
									"description": "An array of axis values where ticks should be placed."
								}
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 19403
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.Axis.getPlotBandPath",
								"description": "Internal function to create the SVG path definition for a plot band.",
								"kind": "function",
								"parameters": {
									"from": {
										"description": "The axis value to start from.",
										"types": [
											"number"
										]
									},
									"to": {
										"description": "The axis value to end on.",
										"types": [
											"number"
										]
									},
									"options": {
										"description": "The plotBand or plotLine configuration object.",
										"types": [
											"Highcharts.AxisPlotBandsOptions",
											"Highcharts.AxisPlotLinesOptions"
										]
									}
								},
								"return": {
									"types": [
										"Highcharts.SVGPathArray"
									],
									"description": "The SVG path definition in array form."
								}
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 22633
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.Axis.getPlotLinePath",
								"description": "Create the path for a plot line that goes from the given value on\nthis axis, across the plot to the opposite side. Also used internally for\ngrid lines and crosshairs.",
								"kind": "function",
								"parameters": {
									"options": {
										"description": "Options for the path.",
										"types": [
											"Highcharts.AxisPlotLinePathOptionsObject"
										]
									}
								},
								"return": {
									"types": [
										"Highcharts.SVGPathArray",
										"null"
									],
									"description": "The SVG path definition for the plot line."
								}
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 19249
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.Axis.getThreshold",
								"description": "Get the zero plane either based on zero or on the min or max value.\nUsed in bar and area plots.",
								"kind": "function",
								"parameters": {
									"threshold": {
										"description": "The threshold in axis values.",
										"types": [
											"number"
										]
									}
								},
								"return": {
									"types": [
										"number",
										"undefined"
									],
									"description": "The translated threshold position in terms of pixels, and corrected to\nstay within the axis bounds."
								}
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 20571
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.Axis.hasData",
								"description": "Return true if the axis has associated data.",
								"kind": "function",
								"return": {
									"types": [
										"boolean"
									],
									"description": "True if the axis has associated visible series and those series have\neither valid data points or explicit `min` and `max` settings."
								}
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 20941
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.Axis.hideCrosshair",
								"description": "Hide the crosshair if visible.",
								"kind": "function",
								"return": {
									"types": [
										"void"
									]
								}
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 21735
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.Axis.horiz",
								"description": "Whether the axis is horizontal.",
								"kind": "member",
								"types": [
									"boolean",
									"undefined"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 18758
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.Axis.init",
								"description": "Overrideable function to initialize the axis.",
								"kind": "function",
								"see": [
									"{@link Axis}"
								],
								"fires": [
									"Highcharts.Axis#afterInit",
									"Highcharts.Axis#init"
								],
								"parameters": {
									"chart": {
										"description": "The Chart instance to apply the axis on.",
										"types": [
											"Highcharts.Chart"
										]
									},
									"userOptions": {
										"description": "Axis options.",
										"types": [
											"AxisOptions"
										]
									}
								},
								"return": {
									"types": [
										"void"
									]
								}
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 18732
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.Axis.isXAxis",
								"description": "Whether the axis is the x-axis.",
								"kind": "member",
								"types": [
									"boolean",
									"undefined"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 18765
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.Axis.max",
								"description": "The maximum value of the axis. In a logarithmic axis, this is the\nlogarithm of the real value, and the real value can be obtained from\n{@link Axis#getExtremes}.",
								"kind": "member",
								"types": [
									"number",
									"null"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 18880
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.Axis.min",
								"description": "The minimum value of the axis. In a logarithmic axis, this is the\nlogarithm of the real value, and the real value can be obtained from\n{@link Axis#getExtremes}.",
								"kind": "member",
								"types": [
									"number",
									"null"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 18889
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.Axis.minorTicks",
								"description": "List of minor ticks mapped by position on the axis.",
								"kind": "member",
								"see": [
									"{@link Highcharts.Tick}"
								],
								"types": [
									"Highcharts.Dictionary.<Highcharts.Tick>"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 18862
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.Axis.options",
								"description": "Current options for the axis after merge of defaults and user's\noptions.",
								"kind": "member",
								"types": [
									"Highcharts.AxisOptions"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 18794
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.Axis.remove",
								"description": "Remove the axis from the chart.",
								"kind": "function",
								"parameters": {
									"redraw": {
										"description": "Whether to redraw the chart following the remove.",
										"isOptional": true,
										"types": [
											"boolean"
										]
									}
								},
								"return": {
									"types": [
										"void"
									]
								}
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 21802
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.Axis.removePlotBand",
								"description": "Remove a plot band by its id.",
								"kind": "function",
								"parameters": {
									"id": {
										"description": "The plot band's `id` as given in the original configuration\n       object or in the `addPlotBand` option.",
										"types": [
											"string"
										]
									}
								},
								"return": {
									"types": [
										"void"
									]
								}
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 22816
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.Axis.removePlotLine",
								"description": "Remove a plot line by its id.",
								"kind": "function",
								"parameters": {
									"id": {
										"description": "The plot line's `id` as given in the original configuration\n       object or in the `addPlotLine` option.",
										"types": [
											"string"
										]
									}
								},
								"return": {
									"types": [
										"void"
									]
								}
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 22833
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.Axis.renderLine",
								"description": "Render the axis line. Called internally when rendering and redrawing the\naxis.",
								"kind": "function",
								"return": {
									"types": [
										"void"
									]
								}
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 21222
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.Axis.renderMinorTick",
								"description": "Render a minor tick into the given position. If a minor tick already\nexists in this position, move it.",
								"kind": "function",
								"parameters": {
									"pos": {
										"description": "The position in axis values.",
										"types": [
											"number"
										]
									},
									"slideIn": {
										"description": "Whether the tick should animate in from last computed position",
										"types": [
											"boolean"
										]
									}
								},
								"return": {
									"types": [
										"void"
									]
								}
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 21298
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.Axis.renderTick",
								"description": "Render a major tick into the given position. If a tick already exists\nin this position, move it.",
								"kind": "function",
								"parameters": {
									"pos": {
										"description": "The position in axis values.",
										"types": [
											"number"
										]
									},
									"i": {
										"description": "The tick index.",
										"types": [
											"number"
										]
									},
									"slideIn": {
										"description": "Whether the tick should animate in from last computed position",
										"types": [
											"boolean"
										]
									}
								},
								"return": {
									"types": [
										"void"
									]
								}
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 21322
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.Axis.reversed",
								"description": "Whether the axis is reversed. Based on the `axis.reversed`,\noption, but inverted charts have reversed xAxis by default.",
								"kind": "member",
								"types": [
									"boolean"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 18813
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.Axis.series",
								"description": "All series associated to the axis.",
								"kind": "member",
								"types": [
									"Array.<Highcharts.Series>"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 18917
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.Axis.setCategories",
								"description": "Set new axis categories and optionally redraw.",
								"kind": "function",
								"parameters": {
									"categories": {
										"description": "The new categories.",
										"types": [
											"Array.<string>"
										]
									},
									"redraw": {
										"description": "Whether to redraw the chart.",
										"isOptional": true,
										"types": [
											"boolean"
										]
									}
								},
								"return": {
									"types": [
										"void"
									]
								}
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 21854
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.Axis.setCompare",
								"description": "Highcharts Stock only. Set the compare mode on all series\nbelonging to an Y axis after render time.",
								"kind": "function",
								"see": [
									"[series.plotOptions.compare](https://api.highcharts.com/highstock/series.plotOptions.compare)"
								],
								"parameters": {
									"compare": {
										"description": "The compare mode. Can be one of `null` (default), `\"value\"` or\n       `\"percent\"`.",
										"isOptional": true,
										"types": [
											"string"
										]
									},
									"redraw": {
										"description": "Whether to redraw the chart or to wait for a later call to\n       {@link Chart#redraw}.",
										"isOptional": true,
										"types": [
											"boolean"
										]
									}
								},
								"return": {
									"types": [
										"void"
									]
								}
							},
							"meta": {
								"files": [
									{
										"path": "code/modules/stock.src.js",
										"line": 11458
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.Axis.setDataGrouping",
								"description": "Highcharts Stock only. Force data grouping on all the axis' series.",
								"kind": "function",
								"products": [
									"highstock"
								],
								"parameters": {
									"dataGrouping": {
										"description": "A `dataGrouping` configuration. Use `false` to disable data grouping\n       dynamically.",
										"isOptional": true,
										"types": [
											"boolean",
											"Highcharts.DataGroupingOptionsObject"
										]
									},
									"redraw": {
										"description": "Whether to redraw the chart or wait for a later call to\n       {@link Chart#redraw}.",
										"isOptional": true,
										"types": [
											"boolean"
										]
									}
								},
								"return": {
									"types": [
										"void"
									]
								}
							},
							"meta": {
								"files": [
									{
										"path": "code/modules/datagrouping.src.js",
										"line": 795
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.Axis.setDataGrouping",
								"description": "Highcharts Stock only. Force data grouping on all the axis' series.",
								"kind": "function",
								"products": [
									"highstock"
								],
								"parameters": {
									"dataGrouping": {
										"description": "A `dataGrouping` configuration. Use `false` to disable data grouping\n       dynamically.",
										"isOptional": true,
										"types": [
											"boolean",
											"Highcharts.DataGroupingOptionsObject"
										]
									},
									"redraw": {
										"description": "Whether to redraw the chart or wait for a later call to\n       {@link Chart#redraw}.",
										"isOptional": true,
										"types": [
											"boolean"
										]
									}
								},
								"return": {
									"types": [
										"void"
									]
								}
							},
							"meta": {
								"files": [
									{
										"path": "code/modules/stock.src.js",
										"line": 2538
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.Axis.setExtremes",
								"description": "Set the minimum and maximum of the axes after render time. If the\n`startOnTick` and `endOnTick` options are true, the minimum and maximum\nvalues are rounded off to the nearest tick. To prevent this, these\noptions can be set to false before calling setExtremes. Also, setExtremes\nwill not allow a range lower than the `minRange` option, which by default\nis the range of five points.",
								"kind": "function",
								"fires": [
									"Highcharts.Axis#setExtremes"
								],
								"parameters": {
									"newMin": {
										"description": "The new minimum value.",
										"isOptional": true,
										"types": [
											"number"
										]
									},
									"newMax": {
										"description": "The new maximum value.",
										"isOptional": true,
										"types": [
											"number"
										]
									},
									"redraw": {
										"description": "Whether to redraw the chart or wait for an explicit call to\n{@link Highcharts.Chart#redraw}",
										"isOptional": true,
										"types": [
											"boolean"
										]
									},
									"animation": {
										"description": "Enable or modify animations.",
										"isOptional": true,
										"types": [
											"boolean",
											"Partial.<Highcharts.AnimationOptionsObject>"
										]
									},
									"eventArguments": {
										"description": "Arguments to be accessed in event handler.",
										"isOptional": true,
										"types": [
											"*"
										]
									}
								},
								"return": {
									"types": [
										"void"
									]
								}
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 20378
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.Axis.setTitle",
								"description": "Update the axis title by options after render time.",
								"kind": "function",
								"parameters": {
									"titleOptions": {
										"description": "The additional title options.",
										"types": [
											"Highcharts.AxisTitleOptions"
										]
									},
									"redraw": {
										"description": "Whether to redraw the chart after setting the title.",
										"isOptional": true,
										"types": [
											"boolean"
										]
									}
								},
								"return": {
									"types": [
										"void"
									]
								}
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 21837
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.Axis.side",
								"description": "The side on which the axis is rendered. 0 is top, 1 is right, 2\nis bottom and 3 is left.",
								"kind": "member",
								"types": [
									"number"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 18783
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.Axis.tickPositions",
								"description": "Contains the current positions that are laid out on the axis. The\npositions are numbers in terms of axis values. In a category axis\nthey are integers, in a datetime axis they are also integers, but\ndesignating milliseconds.\n\nThis property is read only - for modifying the tick positions, use\nthe `tickPositioner` callback or [axis.tickPositions(\nhttps://api.highcharts.com/highcharts/xAxis.tickPositions) option\ninstead.",
								"kind": "member",
								"types": [
									"Highcharts.AxisTickPositionsArray",
									"undefined"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 20052
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.Axis.ticks",
								"description": "List of major ticks mapped by postition on axis.",
								"kind": "member",
								"see": [
									"{@link Highcharts.Tick}"
								],
								"types": [
									"Highcharts.Dictionary.<Highcharts.Tick>"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 18852
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.Axis.toPixels",
								"description": "Translate a value in terms of axis units into pixels within the chart.",
								"kind": "function",
								"parameters": {
									"value": {
										"description": "A value in terms of axis units.",
										"types": [
											"number"
										]
									},
									"paneCoordinates": {
										"description": "Whether to return the pixel coordinate relative to the chart or just the\naxis/pane itself.",
										"types": [
											"boolean"
										]
									}
								},
								"return": {
									"types": [
										"number"
									],
									"description": "Pixel position of the value on the chart or axis."
								}
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 19211
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.Axis.toValue",
								"description": "Translate a pixel position along the axis to a value in terms of axis\nunits.",
								"kind": "function",
								"parameters": {
									"pixel": {
										"description": "The pixel value coordinate.",
										"types": [
											"number"
										]
									},
									"paneCoordinates": {
										"description": "Whether the input pixel is relative to the chart or just the axis/pane\nitself.",
										"isOptional": true,
										"types": [
											"boolean"
										]
									}
								},
								"return": {
									"types": [
										"number"
									],
									"description": "The axis value."
								}
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 19230
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.Axis.update",
								"description": "Update an axis object with a new set of options. The options are merged\nwith the existing options, so only new or altered options need to be\nspecified.",
								"kind": "function",
								"parameters": {
									"options": {
										"description": "The new options that will be merged in with existing options on the axis.",
										"types": [
											"Highcharts.AxisOptions"
										]
									},
									"redraw": {
										"description": "Whether to redraw the chart after the axis is altered. If doing more\noperations on the chart, it is a good idea to set redraw to false and\ncall {@link Chart#redraw} after.",
										"isOptional": true,
										"types": [
											"boolean"
										]
									}
								},
								"return": {
									"types": [
										"void"
									]
								}
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 21774
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.Axis.userOptions",
								"description": "User's options for this axis without defaults.",
								"kind": "member",
								"types": [
									"Highcharts.AxisOptions"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 18805
									}
								]
							}
						}
					]
				},
				{
					"doclet": {
						"name": "Highcharts.AxisCrosshairOptions",
						"description": "Options for crosshairs on axes.",
						"kind": "typedef",
						"products": [
							"highstock"
						],
						"types": [
							"Highcharts.XAxisCrosshairOptions",
							"Highcharts.YAxisCrosshairOptions"
						]
					},
					"meta": {
						"files": [
							{
								"path": "code/highcharts.src.js",
								"line": 21930
							}
						]
					}
				},
				{
					"doclet": {
						"name": "Highcharts.AxisEventCallbackFunction",
						"description": "",
						"kind": "typedef",
						"types": [
							"function"
						],
						"parameters": {
							"this": {
								"types": [
									"Highcharts.Axis"
								]
							}
						},
						"return": {
							"types": [
								"void"
							]
						}
					},
					"meta": {
						"files": [
							{
								"path": "code/highcharts.src.js",
								"line": 21940
							}
						]
					}
				},
				{
					"doclet": {
						"name": "Highcharts.AxisExtremesTriggerValue",
						"description": "",
						"kind": "typedef",
						"types": [
							"\"navigator\"",
							"\"pan\"",
							"\"rangeSelectorButton\"",
							"\"rangeSelectorInput\"",
							"\"scrollbar\"",
							"\"traverseUpButton\"",
							"\"zoom\""
						]
					},
					"meta": {
						"files": [
							{
								"path": "code/highcharts.src.js",
								"line": 21937
							}
						]
					}
				},
				{
					"doclet": {
						"name": "Highcharts.AxisLabelsFormatterCallbackFunction",
						"description": "",
						"kind": "typedef",
						"types": [
							"function"
						],
						"parameters": {
							"this": {
								"types": [
									"Highcharts.AxisLabelsFormatterContextObject"
								]
							},
							"ctx": {
								"types": [
									"Highcharts.AxisLabelsFormatterContextObject"
								]
							}
						},
						"return": {
							"types": [
								"string"
							]
						}
					},
					"meta": {
						"files": [
							{
								"path": "code/highcharts.src.js",
								"line": 21945
							}
						]
					}
				},
				{
					"doclet": {
						"name": "Highcharts.AxisLabelsFormatterContextObject",
						"description": "",
						"kind": "interface"
					},
					"meta": {
						"files": [
							{
								"path": "code/highcharts.src.js",
								"line": 21954
							}
						]
					},
					"children": [
						{
							"doclet": {
								"name": "Highcharts.AxisLabelsFormatterContextObject.axis",
								"description": "The axis item of the label",
								"kind": "member",
								"types": [
									"Highcharts.Axis"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 21956
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.AxisLabelsFormatterContextObject.chart",
								"description": "The chart instance.",
								"kind": "member",
								"types": [
									"Highcharts.Chart"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 21960
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.AxisLabelsFormatterContextObject.isFirst",
								"description": "Whether the label belongs to the first tick on the axis.",
								"kind": "member",
								"types": [
									"boolean"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 21964
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.AxisLabelsFormatterContextObject.isLast",
								"description": "Whether the label belongs to the last tick on the axis.",
								"kind": "member",
								"types": [
									"boolean"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 21968
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.AxisLabelsFormatterContextObject.pos",
								"description": "The position on the axis in terms of axis values. For category axes, a\nzero-based index. For datetime axes, the JavaScript time in milliseconds\nsince 1970.",
								"kind": "member",
								"types": [
									"number"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 21972
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.AxisLabelsFormatterContextObject.text",
								"description": "The preformatted text as the result of the default formatting. For example\ndates will be formatted as strings, and numbers with language-specific comma\nseparators, thousands separators and numeric symbols like `k` or `M`.",
								"kind": "member",
								"types": [
									"string"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 21978
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.AxisLabelsFormatterContextObject.tick",
								"description": "The Tick instance.",
								"kind": "member",
								"types": [
									"Highcharts.Tick"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 21984
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.AxisLabelsFormatterContextObject.value",
								"description": "This can be either a numeric value or a category string.",
								"kind": "member",
								"types": [
									"number",
									"string"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 21988
									}
								]
							}
						}
					]
				},
				{
					"doclet": {
						"name": "Highcharts.AxisOptions",
						"description": "Options for axes.",
						"kind": "typedef",
						"types": [
							"Highcharts.XAxisOptions",
							"Highcharts.YAxisOptions",
							"Highcharts.ZAxisOptions"
						]
					},
					"meta": {
						"files": [
							{
								"path": "code/highcharts.src.js",
								"line": 21993
							}
						]
					}
				},
				{
					"doclet": {
						"name": "Highcharts.AxisPlotBandsLabelOptions",
						"description": "Options for plot band labels on axes.",
						"kind": "typedef",
						"types": [
							"Highcharts.XAxisPlotBandsLabelOptions",
							"Highcharts.YAxisPlotBandsLabelOptions",
							"Highcharts.ZAxisPlotBandsLabelOptions"
						]
					},
					"meta": {
						"files": [
							{
								"path": "code/highcharts.src.js",
								"line": 23165
							}
						]
					}
				},
				{
					"doclet": {
						"name": "Highcharts.AxisPlotBandsOptions",
						"description": "Options for plot bands on axes.",
						"kind": "typedef",
						"types": [
							"Highcharts.XAxisPlotBandsOptions",
							"Highcharts.YAxisPlotBandsOptions",
							"Highcharts.ZAxisPlotBandsOptions"
						]
					},
					"meta": {
						"files": [
							{
								"path": "code/highcharts.src.js",
								"line": 23160
							}
						]
					}
				},
				{
					"doclet": {
						"name": "Highcharts.AxisPlotLinePathOptionsObject",
						"description": "Options for the path on the Axis to be calculated.",
						"kind": "interface"
					},
					"meta": {
						"files": [
							{
								"path": "code/highcharts.src.js",
								"line": 21892
							}
						]
					},
					"children": [
						{
							"doclet": {
								"name": "Highcharts.AxisPlotLinePathOptionsObject.acrossPanes",
								"description": "Used in Highcharts Stock. When `true`, plot paths\n(crosshair, plotLines, gridLines)\nwill be rendered on all axes when defined on the first axis.",
								"kind": "member",
								"types": [
									"boolean",
									"undefined"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 21909
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.AxisPlotLinePathOptionsObject.force",
								"description": "If `false`, the function will return null when it falls outside the axis\nbounds. If `true`, the function will return a path aligned to the plot area\nsides if it falls outside. If `pass`, it will return a path outside.",
								"kind": "member",
								"types": [
									"string",
									"boolean",
									"undefined"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 21903
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.AxisPlotLinePathOptionsObject.lineWidth",
								"description": "Line width used for calculation crisp line coordinates. Defaults to 1.",
								"kind": "member",
								"types": [
									"number",
									"undefined"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 21899
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.AxisPlotLinePathOptionsObject.old",
								"description": "Use old coordinates (for resizing and rescaling).\nIf not set, defaults to `false`.",
								"kind": "member",
								"types": [
									"boolean",
									"undefined"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 21915
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.AxisPlotLinePathOptionsObject.reverse",
								"description": "Used in Polar axes. Reverse the positions for concatenation of polygonal\nplot bands",
								"kind": "member",
								"types": [
									"boolean",
									"undefined"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 21924
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.AxisPlotLinePathOptionsObject.translatedValue",
								"description": "If given, return the plot line path of a pixel position on the axis.",
								"kind": "member",
								"types": [
									"number",
									"undefined"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 21920
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.AxisPlotLinePathOptionsObject.value",
								"description": "Axis value.",
								"kind": "member",
								"types": [
									"number",
									"undefined"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 21895
									}
								]
							}
						}
					]
				},
				{
					"doclet": {
						"name": "Highcharts.AxisPlotLinesLabelOptions",
						"description": "Options for plot line labels on axes.",
						"kind": "typedef",
						"types": [
							"Highcharts.XAxisPlotLinesLabelOptions",
							"Highcharts.YAxisPlotLinesLabelOptions",
							"Highcharts.ZAxisPlotLinesLabelOptions"
						]
					},
					"meta": {
						"files": [
							{
								"path": "code/highcharts.src.js",
								"line": 23175
							}
						]
					}
				},
				{
					"doclet": {
						"name": "Highcharts.AxisPlotLinesOptions",
						"description": "Options for plot lines on axes.",
						"kind": "typedef",
						"types": [
							"Highcharts.XAxisPlotLinesOptions",
							"Highcharts.YAxisPlotLinesOptions",
							"Highcharts.ZAxisPlotLinesOptions"
						]
					},
					"meta": {
						"files": [
							{
								"path": "code/highcharts.src.js",
								"line": 23170
							}
						]
					}
				},
				{
					"doclet": {
						"name": "Highcharts.AxisPointBreakEventCallbackFunction",
						"description": "",
						"kind": "typedef",
						"types": [
							"function"
						],
						"parameters": {
							"this": {
								"types": [
									"Highcharts.Axis"
								]
							},
							"evt": {
								"types": [
									"Highcharts.AxisPointBreakEventObject"
								]
							}
						},
						"return": {
							"types": [
								"void"
							]
						}
					},
					"meta": {
						"files": [
							{
								"path": "code/highcharts.src.js",
								"line": 21998
							}
						]
					}
				},
				{
					"doclet": {
						"name": "Highcharts.AxisPointBreakEventObject",
						"description": "",
						"kind": "interface"
					},
					"meta": {
						"files": [
							{
								"path": "code/highcharts.src.js",
								"line": 22005
							}
						]
					},
					"children": [
						{
							"doclet": {
								"name": "Highcharts.AxisPointBreakEventObject.brk",
								"description": "",
								"kind": "member",
								"types": [
									"Highcharts.Dictionary.<number>"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 22007
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.AxisPointBreakEventObject.point",
								"description": "",
								"kind": "member",
								"types": [
									"Highcharts.Point"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 22010
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.AxisPointBreakEventObject.preventDefault",
								"description": "",
								"kind": "member",
								"types": [
									"function"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 22013
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.AxisPointBreakEventObject.target",
								"description": "",
								"kind": "member",
								"types": [
									"Highcharts.SVGElement"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 22016
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.AxisPointBreakEventObject.type",
								"description": "",
								"kind": "member",
								"types": [
									"\"pointBreak\"",
									"\"pointInBreak\""
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 22019
									}
								]
							}
						}
					]
				},
				{
					"doclet": {
						"name": "Highcharts.AxisSetExtremesEventCallbackFunction",
						"description": "",
						"kind": "typedef",
						"types": [
							"function"
						],
						"parameters": {
							"this": {
								"types": [
									"Highcharts.Axis"
								]
							},
							"evt": {
								"types": [
									"Highcharts.AxisSetExtremesEventObject"
								]
							}
						},
						"return": {
							"types": [
								"void"
							]
						}
					},
					"meta": {
						"files": [
							{
								"path": "code/highcharts.src.js",
								"line": 22023
							}
						]
					}
				},
				{
					"doclet": {
						"name": "Highcharts.AxisSetExtremesEventObject",
						"description": "",
						"kind": "interface",
						"types": [
							"Highcharts.ExtremesObject"
						]
					},
					"meta": {
						"files": [
							{
								"path": "code/highcharts.src.js",
								"line": 22030
							}
						]
					},
					"children": [
						{
							"doclet": {
								"name": "Highcharts.AxisSetExtremesEventObject.preventDefault",
								"description": "",
								"kind": "member",
								"types": [
									"function"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 22033
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.AxisSetExtremesEventObject.target",
								"description": "",
								"kind": "member",
								"types": [
									"Highcharts.SVGElement"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 22036
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.AxisSetExtremesEventObject.trigger",
								"description": "",
								"kind": "member",
								"types": [
									"Highcharts.AxisExtremesTriggerValue",
									"string"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 22039
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.AxisSetExtremesEventObject.type",
								"description": "",
								"kind": "member",
								"types": [
									"\"setExtremes\""
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 22042
									}
								]
							}
						}
					]
				},
				{
					"doclet": {
						"name": "Highcharts.AxisTickPositionerCallbackFunction",
						"description": "",
						"kind": "typedef",
						"types": [
							"function"
						],
						"parameters": {
							"this": {
								"types": [
									"Highcharts.Axis"
								]
							}
						},
						"return": {
							"types": [
								"Highcharts.AxisTickPositionsArray"
							]
						}
					},
					"meta": {
						"files": [
							{
								"path": "code/highcharts.src.js",
								"line": 22046
							}
						]
					}
				},
				{
					"doclet": {
						"name": "Highcharts.AxisTickPositionsArray",
						"description": "Time ticks.",
						"kind": "interface",
						"types": [
							"Array<number>"
						]
					},
					"meta": {
						"files": [
							{
								"path": "code/highcharts.src.js",
								"line": 4501
							}
						]
					},
					"children": [
						{
							"doclet": {
								"name": "Highcharts.AxisTickPositionsArray.info",
								"description": "",
								"kind": "member",
								"types": [
									"Highcharts.TimeTicksInfoObject",
									"undefined"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 4506
									}
								]
							}
						}
					]
				},
				{
					"doclet": {
						"name": "Highcharts.AxisTitleAlignValue",
						"description": "",
						"kind": "typedef",
						"types": [
							"\"high\"",
							"\"low\"",
							"\"middle\""
						]
					},
					"meta": {
						"files": [
							{
								"path": "code/highcharts.src.js",
								"line": 22057
							}
						]
					}
				},
				{
					"doclet": {
						"name": "Highcharts.AxisTitleOptions",
						"description": "",
						"kind": "typedef",
						"types": [
							"Highcharts.XAxisTitleOptions",
							"Highcharts.YAxisTitleOptions",
							"Highcharts.ZAxisTitleOptions"
						]
					},
					"meta": {
						"files": [
							{
								"path": "code/highcharts.src.js",
								"line": 22060
							}
						]
					}
				},
				{
					"doclet": {
						"name": "Highcharts.AxisTypeValue",
						"description": "",
						"kind": "typedef",
						"types": [
							"\"linear\"",
							"\"logarithmic\"",
							"\"datetime\"",
							"\"category\"",
							"\"treegrid\""
						]
					},
					"meta": {
						"files": [
							{
								"path": "code/highcharts.src.js",
								"line": 22063
							}
						]
					}
				},
				{
					"doclet": {
						"name": "Highcharts.BBoxObject",
						"description": "Bounding box of an element.",
						"kind": "interface",
						"types": [
							"Highcharts.PositionObject"
						]
					},
					"meta": {
						"files": [
							{
								"path": "code/highcharts.src.js",
								"line": 10987
							}
						]
					},
					"children": [
						{
							"doclet": {
								"name": "Highcharts.BBoxObject.height",
								"description": "Height of the bounding box.",
								"kind": "member",
								"types": [
									"number"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 10992
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.BBoxObject.width",
								"description": "Width of the bounding box.",
								"kind": "member",
								"types": [
									"number"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 10997
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.BBoxObject.x",
								"description": "Horizontal position of the bounding box.",
								"kind": "member",
								"types": [
									"number"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 11002
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.BBoxObject.y",
								"description": "Vertical position of the bounding box.",
								"kind": "member",
								"types": [
									"number"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 11007
									}
								]
							}
						}
					]
				},
				{
					"doclet": {
						"name": "Highcharts.BubbleLegendFormatterContextObject",
						"description": "",
						"kind": "interface"
					},
					"meta": {
						"files": [
							{
								"path": "code/highcharts-more.src.js",
								"line": 3507
							},
							{
								"path": "code/modules/map.src.js",
								"line": 4832
							}
						]
					},
					"children": [
						{
							"doclet": {
								"name": "Highcharts.BubbleLegendFormatterContextObject.center",
								"description": "The center y position of the range.",
								"kind": "member",
								"types": [
									"number"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts-more.src.js",
										"line": 3509
									},
									{
										"path": "code/modules/map.src.js",
										"line": 4834
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.BubbleLegendFormatterContextObject.radius",
								"description": "The radius of the bubble range.",
								"kind": "member",
								"types": [
									"number"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts-more.src.js",
										"line": 3513
									},
									{
										"path": "code/modules/map.src.js",
										"line": 4838
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.BubbleLegendFormatterContextObject.value",
								"description": "The bubble value.",
								"kind": "member",
								"types": [
									"number"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts-more.src.js",
										"line": 3517
									},
									{
										"path": "code/modules/map.src.js",
										"line": 4842
									}
								]
							}
						}
					]
				},
				{
					"doclet": {
						"name": "Highcharts.BubbleSizeByValue",
						"description": "",
						"kind": "typedef",
						"types": [
							"\"area\"",
							"\"width\""
						]
					},
					"meta": {
						"files": [
							{
								"path": "code/highcharts-more.src.js",
								"line": 4988
							},
							{
								"path": "code/modules/map.src.js",
								"line": 6313
							}
						]
					}
				},
				{
					"doclet": {
						"name": "Highcharts.ButtonRelativeToValue",
						"description": "",
						"kind": "typedef",
						"types": [
							"\"plotBox\"",
							"\"spacingBox\""
						]
					},
					"meta": {
						"files": [
							{
								"path": "code/highcharts.src.js",
								"line": 7107
							}
						]
					}
				},
				{
					"doclet": {
						"name": "Highcharts.CSSObject",
						"description": "A style object with camel case property names to define visual appearance of\na SVG element or HTML element. The properties can be whatever styles are\nsupported on the given SVG or HTML element.",
						"kind": "interface"
					},
					"meta": {
						"files": [
							{
								"path": "code/highcharts.src.js",
								"line": 1886
							}
						]
					},
					"children": [
						{
							"doclet": {
								"name": "Highcharts.CSSObject.[key:string]",
								"description": "",
								"kind": "member",
								"types": [
									"boolean",
									"number",
									"string",
									"undefined"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 1898
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.CSSObject.background",
								"description": "Background style for the element.",
								"kind": "member",
								"types": [
									"string",
									"undefined"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 1901
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.CSSObject.backgroundColor",
								"description": "Background color of the element.",
								"kind": "member",
								"types": [
									"Highcharts.ColorString",
									"undefined"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 1905
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.CSSObject.border",
								"description": "Border style for the element.",
								"kind": "member",
								"types": [
									"string",
									"undefined"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 1909
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.CSSObject.borderRadius",
								"description": "Radius of the element border.",
								"kind": "member",
								"types": [
									"number",
									"undefined"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 1913
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.CSSObject.color",
								"description": "Color used in the element. The 'contrast' option is a Highcharts custom\nproperty that results in black or white, depending on the background of the\nelement.",
								"kind": "member",
								"types": [
									"'contrast'",
									"Highcharts.ColorString",
									"undefined"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 1917
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.CSSObject.cursor",
								"description": "Style of the mouse cursor when resting over the element.",
								"kind": "member",
								"types": [
									"Highcharts.CursorValue",
									"undefined"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 1923
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.CSSObject.fontFamily",
								"description": "Font family of the element text. Multiple values have to be in decreasing\npreference order and separated by comma.",
								"kind": "member",
								"types": [
									"string",
									"undefined"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 1927
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.CSSObject.fontSize",
								"description": "Font size of the element text.",
								"kind": "member",
								"types": [
									"string",
									"undefined"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 1932
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.CSSObject.fontWeight",
								"description": "Font weight of the element text.",
								"kind": "member",
								"types": [
									"string",
									"undefined"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 1936
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.CSSObject.height",
								"description": "Height of the element.",
								"kind": "member",
								"types": [
									"number",
									"undefined"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 1940
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.CSSObject.lineWidth",
								"description": "Width of the element border.",
								"kind": "member",
								"types": [
									"number",
									"undefined"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 1944
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.CSSObject.opacity",
								"description": "Opacity of the element.",
								"kind": "member",
								"types": [
									"number",
									"undefined"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 1948
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.CSSObject.padding",
								"description": "Space around the element content.",
								"kind": "member",
								"types": [
									"string",
									"undefined"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 1952
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.CSSObject.pointerEvents",
								"description": "Behaviour of the element when the mouse cursor rests over it.",
								"kind": "member",
								"types": [
									"string",
									"undefined"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 1956
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.CSSObject.position",
								"description": "Positioning of the element.",
								"kind": "member",
								"types": [
									"string",
									"undefined"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 1960
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.CSSObject.textAlign",
								"description": "Alignment of the element text.",
								"kind": "member",
								"types": [
									"string",
									"undefined"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 1964
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.CSSObject.textDecoration",
								"description": "Additional decoration of the element text.",
								"kind": "member",
								"types": [
									"string",
									"undefined"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 1968
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.CSSObject.textOutline",
								"description": "Outline style of the element text.",
								"kind": "member",
								"types": [
									"string",
									"undefined"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 1972
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.CSSObject.textOverflow",
								"description": "Line break style of the element text. Highcharts SVG elements support\n`ellipsis` when a `width` is set.",
								"kind": "member",
								"types": [
									"string",
									"undefined"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 1976
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.CSSObject.top",
								"description": "Top spacing of the element relative to the parent element.",
								"kind": "member",
								"types": [
									"string",
									"undefined"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 1981
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.CSSObject.transition",
								"description": "Animated transition of selected element properties.",
								"kind": "member",
								"types": [
									"string",
									"undefined"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 1985
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.CSSObject.whiteSpace",
								"description": "Line break style of the element text.",
								"kind": "member",
								"types": [
									"string",
									"undefined"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 1989
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.CSSObject.width",
								"description": "Width of the element.",
								"kind": "member",
								"types": [
									"number",
									"undefined"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 1993
									}
								]
							}
						}
					]
				},
				{
					"doclet": {
						"name": "Highcharts.CaptionObject",
						"description": "The chart caption. The caption has an `update` method that\nallows modifying the options directly or indirectly via\n`chart.update`.",
						"kind": "interface",
						"types": [
							"Highcharts.SVGElement"
						]
					},
					"meta": {
						"files": [
							{
								"path": "code/highcharts.src.js",
								"line": 33006
							}
						]
					},
					"children": [
						{
							"doclet": {
								"name": "Highcharts.CaptionObject.update",
								"description": "Modify options for the caption.",
								"kind": "function",
								"parameters": {
									"captionOptions": {
										"description": "Options to modify.",
										"types": [
											"Highcharts.CaptionOptions"
										]
									},
									"redraw": {
										"description": "Whether to redraw the chart after the caption is altered. If doing\n       more operations on the chart, it is a good idea to set redraw to false\n       and call {@link Chart#redraw} after.",
										"isOptional": true,
										"types": [
											"boolean"
										]
									}
								},
								"return": {
									"types": [
										"void"
									]
								}
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 33013
									}
								]
							}
						}
					]
				},
				{
					"doclet": {
						"name": "Highcharts.Chart",
						"description": "The Chart class. The recommended constructor is {@link Highcharts#chart}.",
						"kind": "class"
					},
					"meta": {
						"files": [
							{
								"path": "code/highcharts.src.js",
								"line": 30020
							}
						]
					},
					"children": [
						{
							"doclet": {
								"name": "Highcharts.Chart.addAnnotation",
								"description": "Add an annotation to the chart after render time.",
								"kind": "function",
								"parameters": {
									"options": {
										"description": "The annotation options for the new, detailed annotation.",
										"types": [
											"Highcharts.AnnotationsOptions"
										]
									},
									"redraw": {
										"isOptional": true,
										"types": [
											"boolean"
										]
									}
								},
								"return": {
									"types": [
										"Highcharts.Annotation"
									],
									"description": "- The newly generated annotation."
								}
							},
							"meta": {
								"files": [
									{
										"path": "code/modules/annotations.src.js",
										"line": 3585
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.Chart.addAnnotation",
								"description": "Add an annotation to the chart after render time.",
								"kind": "function",
								"parameters": {
									"options": {
										"description": "The annotation options for the new, detailed annotation.",
										"types": [
											"Highcharts.AnnotationsOptions"
										]
									},
									"redraw": {
										"isOptional": true,
										"types": [
											"boolean"
										]
									}
								},
								"return": {
									"types": [
										"Highcharts.Annotation"
									],
									"description": "- The newly generated annotation."
								}
							},
							"meta": {
								"files": [
									{
										"path": "code/modules/annotations-advanced.src.js",
										"line": 3585
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.Chart.addAnnotation",
								"description": "Add an annotation to the chart after render time.",
								"kind": "function",
								"parameters": {
									"options": {
										"description": "The annotation options for the new, detailed annotation.",
										"types": [
											"Highcharts.AnnotationsOptions"
										]
									},
									"redraw": {
										"isOptional": true,
										"types": [
											"boolean"
										]
									}
								},
								"return": {
									"types": [
										"Highcharts.Annotation"
									],
									"description": "- The newly generated annotation."
								}
							},
							"meta": {
								"files": [
									{
										"path": "code/modules/stock-tools.src.js",
										"line": 3586
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.Chart.addAxis",
								"description": "Add an axis to the chart after render time. Note that this method should\nnever be used when adding data synchronously at chart render time, as it\nadds expense to the calculations and rendering. When adding data at the\nsame time as the chart is initialized, add the axis as a configuration\noption instead.",
								"kind": "function",
								"parameters": {
									"options": {
										"description": "The axis options.",
										"types": [
											"Highcharts.AxisOptions"
										]
									},
									"isX": {
										"description": "Whether it is an X axis or a value axis.",
										"isOptional": true,
										"types": [
											"boolean"
										]
									},
									"redraw": {
										"description": "Whether to redraw the chart after adding.",
										"isOptional": true,
										"types": [
											"boolean"
										]
									},
									"animation": {
										"description": "Whether and how to apply animation in the redraw.",
										"isOptional": true,
										"types": [
											"boolean",
											"Partial.<Highcharts.AnimationOptionsObject>"
										]
									}
								},
								"return": {
									"types": [
										"Highcharts.Axis"
									],
									"description": "The newly generated Axis object."
								}
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 32104
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.Chart.addColorAxis",
								"description": "Add a color axis to the chart after render time. Note that this method\nshould never be used when adding data synchronously at chart render time,\nas it adds expense to the calculations and rendering. When adding data at\nthe same time as the chart is initialized, add the axis as a\nconfiguration option instead.",
								"kind": "function",
								"parameters": {
									"options": {
										"description": "The axis options.",
										"types": [
											"Highcharts.ColorAxisOptions"
										]
									},
									"redraw": {
										"description": "Whether to redraw the chart after adding.",
										"isOptional": true,
										"types": [
											"boolean"
										]
									},
									"animation": {
										"description": "Whether and how to apply animation in the redraw.",
										"isOptional": true,
										"types": [
											"boolean",
											"Partial.<Highcharts.AnimationOptionsObject>"
										]
									}
								},
								"return": {
									"types": [
										"Highcharts.ColorAxis"
									],
									"description": "The newly generated Axis object."
								}
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 32134
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.Chart.addCredits",
								"description": "Set a new credits label for the chart.",
								"kind": "function",
								"parameters": {
									"credits": {
										"description": "A configuration object for the new credits.",
										"isOptional": true,
										"types": [
											"Highcharts.CreditsOptions"
										]
									}
								},
								"return": {
									"types": [
										"void"
									]
								}
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 31840
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.Chart.addSeries",
								"description": "Add a series to the chart after render time. Note that this method should\nnever be used when adding data synchronously at chart render time, as it\nadds expense to the calculations and rendering. When adding data at the\nsame time as the chart is initialized, add the series as a configuration\noption instead. With multiple axes, the `offset` is dynamically adjusted.",
								"kind": "function",
								"fires": [
									"Highcharts.Chart#addSeries",
									"Highcharts.Chart#afterAddSeries"
								],
								"parameters": {
									"options": {
										"description": "The config options for the series.",
										"types": [
											"Highcharts.SeriesOptionsType"
										]
									},
									"redraw": {
										"description": "Whether to redraw the chart after adding.",
										"isOptional": true,
										"types": [
											"boolean"
										]
									},
									"animation": {
										"description": "Whether to apply animation, and optionally animation\n       configuration.",
										"isOptional": true,
										"types": [
											"boolean",
											"Partial.<Highcharts.AnimationOptionsObject>"
										]
									}
								},
								"return": {
									"types": [
										"Highcharts.Series"
									],
									"description": "The newly created series object."
								}
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 32053
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.Chart.addSeriesAsDrilldown",
								"description": "Add a series to the chart as drilldown from a specific point in the parent\nseries. This method is used for async drilldown, when clicking a point in a\nseries should result in loading and displaying a more high-resolution series.\nWhen not async, the setup is simpler using the\n[drilldown.series](https://api.highcharts.com/highcharts/drilldown.series)\noptions structure.",
								"kind": "function",
								"parameters": {
									"point": {
										"description": "The point from which the drilldown will start.",
										"types": [
											"Highcharts.Point"
										]
									},
									"options": {
										"description": "The series options for the new, detailed series.",
										"types": [
											"Highcharts.SeriesOptionsType"
										]
									}
								},
								"return": {
									"types": [
										"void"
									]
								}
							},
							"meta": {
								"files": [
									{
										"path": "code/modules/drilldown.src.js",
										"line": 470
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.Chart.axes",
								"description": "All the axes in the chart.",
								"kind": "member",
								"see": [
									"Highcharts.Chart.xAxis",
									"Highcharts.Chart.yAxis"
								],
								"types": [
									"Array.<Highcharts.Axis>"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 30214
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.Chart.cancelSonify",
								"description": "Cancel current sonification and reset cursor.",
								"kind": "function",
								"parameters": {
									"fadeOut": {
										"description": "Fade out as we pause to avoid clicks.",
										"isOptional": true,
										"types": [
											"boolean"
										]
									}
								},
								"return": {
									"types": [
										"void"
									]
								}
							},
							"meta": {
								"files": [
									{
										"path": "code/modules/sonification.src.js",
										"line": 2515
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.Chart.chartHeight",
								"description": "The current pixel height of the chart.",
								"kind": "member",
								"types": [
									"number"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 30929
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.Chart.chartWidth",
								"description": "The current pixel width of the chart.",
								"kind": "member",
								"types": [
									"number"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 30920
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.Chart.constructor",
								"description": "The Chart class. The recommended constructor is {@link Highcharts#chart}.",
								"kind": "constructor",
								"parameters": {
									"renderTo": {
										"description": "The DOM element to render to, or its id.",
										"isOptional": true,
										"types": [
											"string",
											"Highcharts.HTMLDOMElement"
										]
									},
									"options": {
										"description": "The chart options structure.",
										"types": [
											"Highcharts.Options"
										]
									},
									"callback": {
										"description": "Function to run when the chart has loaded and and all external images\n       are loaded. Defining a\n       [chart.events.load](https://api.highcharts.com/highcharts/chart.events.load)\n       handler is equivalent.",
										"isOptional": true,
										"types": [
											"Highcharts.ChartCallbackFunction"
										]
									}
								},
								"return": {
									"types": [
										"void"
									]
								}
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 0
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.Chart.container",
								"description": "The containing HTML element of the chart. The container is\ndynamically inserted into the element given as the `renderTo`\nparameter in the {@link Highcharts#chart} constructor.",
								"kind": "member",
								"types": [
									"Highcharts.HTMLDOMElement"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 31095
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.Chart.credits",
								"description": "The chart's credits label. The label has an `update` method that\nallows setting new options as per the\n[credits options set](https://api.highcharts.com/highcharts/credits).",
								"kind": "member",
								"types": [
									"Highcharts.SVGElement"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 31857
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.Chart.data",
								"description": "The data parser for this chart.",
								"kind": "member",
								"types": [
									"Highcharts.Data",
									"undefined"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/modules/data.src.js",
										"line": 2206
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.Chart.destroy",
								"description": "Remove the chart and purge memory. This method is called internally\nbefore adding a second chart into the same container, as well as on\nwindow unload to prevent leaks.",
								"kind": "function",
								"fires": [
									"Highcharts.Chart#destroy"
								],
								"return": {
									"types": [
										"void"
									]
								}
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 31889
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.Chart.downloadCSV",
								"description": "Generates a data URL of CSV for local download in the browser. This is the\ndefault action for a click on the 'Download CSV' button.\n\nSee {@link Highcharts.Chart#getCSV} to get the CSV data itself.",
								"kind": "function",
								"return": {
									"types": [
										"void"
									]
								}
							},
							"meta": {
								"files": [
									{
										"path": "code/modules/export-data.src.js",
										"line": 1051
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.Chart.downloadXLS",
								"description": "Generates a data URL of an XLS document for local download in the browser.\nThis is the default action for a click on the 'Download XLS' button.\n\nSee {@link Highcharts.Chart#getTable} to get the table data itself.",
								"kind": "function",
								"return": {
									"types": [
										"void"
									]
								}
							},
							"meta": {
								"files": [
									{
										"path": "code/modules/export-data.src.js",
										"line": 1066
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.Chart.drillUp",
								"description": "When the chart is drilled down to a child series, calling `chart.drillUp()`\nwill drill up to the parent series.",
								"kind": "function",
								"return": {
									"types": [
										"void"
									]
								}
							},
							"meta": {
								"files": [
									{
										"path": "code/modules/drilldown.src.js",
										"line": 658
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.Chart.exportChart",
								"description": "Exporting module required. Submit an SVG version of the chart to a server\nalong with some parameters for conversion.",
								"kind": "function",
								"parameters": {
									"exportingOptions": {
										"description": "Exporting options in addition to those defined in\n       [exporting](https://api.highcharts.com/highcharts/exporting).",
										"types": [
											"Highcharts.ExportingOptions"
										]
									},
									"chartOptions": {
										"description": "Additional chart options for the exported chart. For example a\n       different background color can be added here, or `dataLabels` for\n       export only.",
										"types": [
											"Highcharts.Options"
										]
									}
								},
								"return": {
									"types": [
										"void"
									]
								}
							},
							"meta": {
								"files": [
									{
										"path": "code/modules/exporting.src.js",
										"line": 2024
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.Chart.exportChartLocal",
								"description": "Exporting and offline-exporting modules required. Export a chart to\nan image locally in the user's browser.",
								"kind": "function",
								"parameters": {
									"exportingOptions": {
										"description": "Exporting options, the same as in\n        {@link Highcharts.Chart#exportChart}.",
										"isOptional": true,
										"types": [
											"Highcharts.ExportingOptions"
										]
									},
									"chartOptions": {
										"description": "Additional chart options for the exported chart. For example\n        a different background color can be added here, or\n        `dataLabels` for export only.",
										"isOptional": true,
										"types": [
											"Highcharts.Options"
										]
									}
								},
								"return": {
									"types": [
										"void"
									]
								}
							},
							"meta": {
								"files": [
									{
										"path": "code/modules/offline-exporting.src.js",
										"line": 482
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.Chart.fromLatLonToPoint",
								"description": "Highmaps only. Get chart coordinates from latitude/longitude. Returns an\nobject with x and y values corresponding to the `xAxis` and `yAxis`.",
								"kind": "function",
								"parameters": {
									"latLon": {
										"description": "Coordinates.",
										"types": [
											"Highcharts.MapLatLonObject"
										]
									}
								},
								"return": {
									"types": [
										"Highcharts.MapCoordinateObject"
									],
									"description": "X and Y coordinates in terms of chart axis values."
								}
							},
							"meta": {
								"files": [
									{
										"path": "code/modules/map.src.js",
										"line": 8226
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.Chart.fromPointToLatLon",
								"description": "Highmaps only. Calculate latitude/longitude values for a point. Returns an\nobject with the numeric properties `lat` and `lon`.",
								"kind": "function",
								"parameters": {
									"point": {
										"description": "A `Point` instance or anything containing `x` and `y` properties with\n       numeric values.",
										"types": [
											"Highcharts.Point",
											"Highcharts.MapCoordinateObject"
										]
									}
								},
								"return": {
									"types": [
										"Highcharts.MapLatLonObject",
										"undefined"
									],
									"description": "An object with `lat` and `lon` properties."
								}
							},
							"meta": {
								"files": [
									{
										"path": "code/modules/map.src.js",
										"line": 8191
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.Chart.fullscreen",
								"description": "",
								"kind": "member",
								"types": [
									"Highcharts.Fullscreen"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/modules/exporting.src.js",
										"line": 268
									},
									{
										"path": "code/modules/full-screen.src.js",
										"line": 269
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.Chart.get",
								"description": "Get an axis, series or point object by `id` as given in the configuration\noptions. Returns `undefined` if no item is found.",
								"kind": "function",
								"parameters": {
									"id": {
										"description": "The id as given in the configuration options.",
										"types": [
											"string"
										]
									}
								},
								"return": {
									"types": [
										"Highcharts.Axis",
										"Highcharts.Series",
										"Highcharts.Point",
										"undefined"
									],
									"description": "The retrieved item."
								}
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 30606
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.Chart.getCSV",
								"description": "Export-data module required. Returns the current chart data as a CSV string.",
								"kind": "function",
								"parameters": {
									"useLocalDecimalPoint": {
										"description": "Whether to use the local decimal point as detected from the browser.\n       This makes it easier to export data to Excel in the same locale as the\n       user is.",
										"isOptional": true,
										"types": [
											"boolean"
										]
									}
								},
								"return": {
									"types": [
										"string"
									],
									"description": "CSV representation of the data"
								}
							},
							"meta": {
								"files": [
									{
										"path": "code/modules/export-data.src.js",
										"line": 734
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.Chart.getChartHTML",
								"description": "Return the unfiltered innerHTML of the chart container. Used as hook for\nplugins. In styled mode, it also takes care of inlining CSS style rules.",
								"kind": "function",
								"see": [
									"Chart#getSVG"
								],
								"return": {
									"types": [
										"string"
									],
									"description": "The unfiltered SVG of the chart."
								}
							},
							"meta": {
								"files": [
									{
										"path": "code/modules/exporting.src.js",
										"line": 2067
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.Chart.getCurrentSonifyPoints",
								"description": "Get a list of the points currently under cursor.",
								"kind": "function",
								"return": {
									"types": [
										"Array.<Highcharts.Point>"
									],
									"description": "The points currently under the cursor."
								}
							},
							"meta": {
								"files": [
									{
										"path": "code/modules/sonification.src.js",
										"line": 2413
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.Chart.getDataRows",
								"description": "Export-data module required. Returns a two-dimensional array containing the\ncurrent chart data.",
								"kind": "function",
								"fires": [
									"Highcharts.Chart#exportData"
								],
								"parameters": {
									"multiLevelHeaders": {
										"description": "Use multilevel headers for the rows by default. Adds an extra row with\n       top level headers. If a custom columnHeaderFormatter is defined, this\n       can override the behavior.",
										"isOptional": true,
										"types": [
											"boolean"
										]
									}
								},
								"return": {
									"types": [
										"Array.<Array.<(number|string)>>"
									],
									"description": "The current chart data"
								}
							},
							"meta": {
								"files": [
									{
										"path": "code/modules/export-data.src.js",
										"line": 472
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.Chart.getFilename",
								"description": "Get the default file name used for exported charts. By default it creates\na file name based on the chart title.",
								"kind": "function",
								"return": {
									"types": [
										"string"
									],
									"description": "A file name without extension."
								}
							},
							"meta": {
								"files": [
									{
										"path": "code/modules/exporting.src.js",
										"line": 2086
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.Chart.getSVG",
								"description": "Return an SVG representation of the chart.",
								"kind": "function",
								"fires": [
									"Highcharts.Chart#getSVG"
								],
								"parameters": {
									"chartOptions": {
										"description": "Additional chart options for the generated SVG representation. For\n       collections like `xAxis`, `yAxis` or `series`, the additional\n       options is either merged in to the original item of the same\n       `id`, or to the first item if a common id is not found.",
										"isOptional": true,
										"types": [
											"Highcharts.Options"
										]
									}
								},
								"return": {
									"types": [
										"string"
									],
									"description": "The SVG representation of the rendered chart."
								}
							},
							"meta": {
								"files": [
									{
										"path": "code/modules/exporting.src.js",
										"line": 2118
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.Chart.getSelectedPoints",
								"description": "Returns an array of all currently selected points in the chart. Points\ncan be selected by clicking or programmatically by the\n{@link Highcharts.Point#select}\nfunction.",
								"kind": "function",
								"return": {
									"types": [
										"Array.<Highcharts.Point>"
									],
									"description": "The currently selected points."
								}
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 30674
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.Chart.getSelectedSeries",
								"description": "Returns an array of all currently selected series in the chart. Series\ncan be selected either programmatically by the\n{@link Highcharts.Series#select}\nfunction or by checking the checkbox next to the legend item if\n[series.showCheckBox](https://api.highcharts.com/highcharts/plotOptions.series.showCheckbox)\nis true.",
								"kind": "function",
								"return": {
									"types": [
										"Array.<Highcharts.Series>"
									],
									"description": "The currently selected series."
								}
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 30702
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.Chart.getTable",
								"description": "Export-data module required. Build a HTML table with the chart's current\ndata.",
								"kind": "function",
								"fires": [
									"Highcharts.Chart#afterGetTable"
								],
								"parameters": {
									"useLocalDecimalPoint": {
										"description": "Whether to use the local decimal point as detected from the browser.\n       This makes it easier to export data to Excel in the same locale as the\n       user is.",
										"isOptional": true,
										"types": [
											"boolean"
										]
									}
								},
								"return": {
									"types": [
										"string"
									],
									"description": "HTML representation of the data."
								}
							},
							"meta": {
								"files": [
									{
										"path": "code/modules/export-data.src.js",
										"line": 781
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.Chart.hasParallelCoordinates",
								"description": "Flag used in parallel coordinates plot to check if chart has ||-coords\n(parallel coords).",
								"kind": "member",
								"types": [
									"boolean"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/modules/parallel-coordinates.src.js",
										"line": 187
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.Chart.hideData",
								"description": "Export-data module required. Hide the data table when visible.",
								"kind": "function",
								"return": {
									"types": [
										"void"
									]
								}
							},
							"meta": {
								"files": [
									{
										"path": "code/modules/export-data.src.js",
										"line": 1109
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.Chart.hideLoading",
								"description": "Hide the loading layer.",
								"kind": "function",
								"see": [
									"Highcharts.Chart#showLoading"
								],
								"return": {
									"types": [
										"void"
									]
								}
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 32257
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.Chart.hoverPoint",
								"description": "Contains the original hovered point.",
								"kind": "member",
								"types": [
									"Highcharts.Point",
									"null"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 27925
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.Chart.hoverPoints",
								"description": "Contains all hovered points.",
								"kind": "member",
								"types": [
									"Array.<Highcharts.Point>",
									"null"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 27918
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.Chart.hoverSeries",
								"description": "Contains the original hovered series.",
								"kind": "member",
								"types": [
									"Highcharts.Series",
									"null"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 38850
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.Chart.index",
								"description": "Index position of the chart in the {@link Highcharts#charts}\nproperty.",
								"kind": "member",
								"isReadOnly": true,
								"types": [
									"number"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 30263
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.Chart.init",
								"description": "Overridable function that initializes the chart. The constructor's\narguments are passed on directly.",
								"kind": "function",
								"fires": [
									"Highcharts.Chart#init",
									"Highcharts.Chart#afterInit"
								],
								"parameters": {
									"userOptions": {
										"description": "Custom options.",
										"types": [
											"Highcharts.Options"
										]
									},
									"callback": {
										"description": "Function to run when the chart has loaded and and all external\n       images are loaded.",
										"isOptional": true,
										"types": [
											"function"
										]
									}
								},
								"return": {
									"types": [
										"void"
									]
								}
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 30149
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.Chart.inverted",
								"description": "The flag is set to `true` if a series of the chart is inverted.",
								"kind": "member",
								"types": [
									"boolean",
									"undefined"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 31638
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.Chart.isChartSeriesBoosting",
								"description": "Returns true if the chart is in series boost mode.",
								"kind": "function",
								"parameters": {
									"chart": {
										"description": "the chart to check",
										"types": [
											"Highcharts.Chart"
										]
									}
								},
								"return": {
									"types": [
										"boolean"
									],
									"description": "true if the chart is in series boost mode"
								}
							},
							"meta": {
								"files": [
									{
										"path": "code/modules/boost.src.js",
										"line": 3256
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.Chart.isInsidePlot",
								"description": "Check whether a given point is within the plot area.",
								"kind": "function",
								"parameters": {
									"plotX": {
										"description": "Pixel x relative to the plot area.",
										"types": [
											"number"
										]
									},
									"plotY": {
										"description": "Pixel y relative to the plot area.",
										"types": [
											"number"
										]
									},
									"options": {
										"description": "Options object.",
										"isOptional": true,
										"types": [
											"Highcharts.ChartIsInsideOptionsObject"
										]
									}
								},
								"return": {
									"types": [
										"boolean"
									],
									"description": "Returns true if the given point is inside the plot area."
								}
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 30379
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.Chart.langFormat",
								"description": "Apply context to a format string from lang options of the chart.",
								"kind": "function",
								"parameters": {
									"langKey": {
										"description": "Key (using dot notation) into lang option structure.",
										"types": [
											"string"
										]
									},
									"context": {
										"description": "Context to apply to the format string.",
										"types": [
											"Highcharts.Dictionary.<*>"
										]
									}
								},
								"return": {
									"types": [
										"string"
									],
									"description": "The formatted string."
								}
							},
							"meta": {
								"files": [
									{
										"path": "code/modules/accessibility.src.js",
										"line": 9876
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.Chart.legend",
								"description": "The overview of the chart's series.",
								"kind": "member",
								"types": [
									"Highcharts.Legend"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 31764
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.Chart.mapZoom",
								"description": "Highmaps only. Zoom in or out of the map. See also {@link Point#zoomTo}.\nSee {@link Chart#fromLatLonToPoint} for how to get the `centerX` and\n`centerY` parameters for a geographic location.",
								"kind": "function",
								"parameters": {
									"howMuch": {
										"description": "How much to zoom the map. Values less than 1 zooms in. 0.5 zooms\n       in to half the current view. 2 zooms to twice the current view. If\n       omitted, the zoom is reset.",
										"isOptional": true,
										"types": [
											"number"
										]
									},
									"centerX": {
										"description": "The X axis position to center around if available space.",
										"isOptional": true,
										"types": [
											"number"
										]
									},
									"centerY": {
										"description": "The Y axis position to center around if available space.",
										"isOptional": true,
										"types": [
											"number"
										]
									},
									"mouseX": {
										"description": "Fix the zoom to this position if possible. This is used for\n       example in mousewheel events, where the area under the mouse\n       should be fixed as we zoom in.",
										"isOptional": true,
										"types": [
											"number"
										]
									},
									"mouseY": {
										"description": "Fix the zoom to this position if possible.",
										"isOptional": true,
										"types": [
											"number"
										]
									}
								},
								"return": {
									"types": [
										"void"
									]
								}
							},
							"meta": {
								"files": [
									{
										"path": "code/modules/map.src.js",
										"line": 2247
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.Chart.numberFormatter",
								"description": "Callback function to override the default function that formats\nall the numbers in the chart. Returns a string with the formatted\nnumber.",
								"kind": "member",
								"types": [
									"Highcharts.NumberFormatterCallbackFunction"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 30244
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.Chart.options",
								"description": "The options structure for the chart after merging\n{@link #defaultOptions} and {@link #userOptions}. It contains\nmembers for the sub elements like series, legend, tooltip etc.",
								"kind": "member",
								"types": [
									"Highcharts.Options"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 30205
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.Chart.pauseSonify",
								"description": "Pause the running sonification.",
								"kind": "function",
								"parameters": {
									"fadeOut": {
										"description": "Fade out as we pause to avoid clicks.",
										"isOptional": true,
										"types": [
											"boolean"
										]
									}
								},
								"return": {
									"types": [
										"void"
									]
								}
							},
							"meta": {
								"files": [
									{
										"path": "code/modules/sonification.src.js",
										"line": 2459
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.Chart.plotHeight",
								"description": "The current height of the plot area in pixels.",
								"kind": "member",
								"types": [
									"number"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 31408
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.Chart.plotLeft",
								"description": "The current left position of the plot area in pixels.",
								"kind": "member",
								"types": [
									"number"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 31387
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.Chart.plotTop",
								"description": "The current top position of the plot area in pixels.",
								"kind": "member",
								"types": [
									"number"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 31394
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.Chart.plotWidth",
								"description": "The current width of the plot area in pixels.",
								"kind": "member",
								"types": [
									"number"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 31401
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.Chart.pointer",
								"description": "The Pointer that keeps track of mouse and touch interaction.",
								"kind": "member",
								"types": [
									"Highcharts.Pointer"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 32005
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.Chart.print",
								"description": "Exporting module required. Clears away other elements in the page and\nprints the chart as it is displayed. By default, when the exporting\nmodule is enabled, a context button with a drop down menu in the upper\nright corner accesses this function.",
								"kind": "function",
								"fires": [
									"Highcharts.Chart#beforePrint",
									"Highcharts.Chart#afterPrint"
								],
								"return": {
									"types": [
										"void"
									]
								}
							},
							"meta": {
								"files": [
									{
										"path": "code/modules/exporting.src.js",
										"line": 2506
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.Chart.redraw",
								"description": "Redraw the chart after changes have been done to the data, axis extremes\nchart size or chart elements. All methods for updating axes, series or\npoints have a parameter for redrawing the chart. This is `true` by\ndefault. But in many cases you want to do more than one operation on the\nchart before redrawing, for example add a number of points. In those\ncases it is a waste of resources to redraw the chart for each new point\nadded. So you add the points and call `chart.redraw()` after.",
								"kind": "function",
								"fires": [
									"Highcharts.Chart#afterSetExtremes",
									"Highcharts.Chart#beforeRedraw",
									"Highcharts.Chart#predraw",
									"Highcharts.Chart#redraw",
									"Highcharts.Chart#render",
									"Highcharts.Chart#updatedData"
								],
								"parameters": {
									"animation": {
										"description": "If or how to apply animation to the redraw.",
										"isOptional": true,
										"types": [
											"boolean",
											"Partial.<Highcharts.AnimationOptionsObject>"
										]
									}
								},
								"return": {
									"types": [
										"void"
									]
								}
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 30444
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.Chart.reflow",
								"description": "Reflows the chart to its container. By default, the chart reflows\nautomatically to its container following a `window.resize` event, as per\nthe [chart.reflow](https://api.highcharts.com/highcharts/chart.reflow)\noption. However, there are no reliable events for div resize, so if the\ncontainer is resized without a window resize event, this must be called\nexplicitly.",
								"kind": "function",
								"parameters": {
									"e": {
										"description": "Event arguments. Used primarily when the function is called\n       internally as a response to window resize.",
										"isOptional": true,
										"types": [
											"global.Event"
										]
									}
								},
								"return": {
									"types": [
										"void"
									]
								}
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 31202
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.Chart.removeAnnotation",
								"description": "Remove an annotation from the chart.",
								"kind": "function",
								"parameters": {
									"idOrAnnotation": {
										"description": "The annotation's id or direct annotation object.",
										"types": [
											"number",
											"string",
											"Highcharts.Annotation"
										]
									}
								},
								"return": {
									"types": [
										"void"
									]
								}
							},
							"meta": {
								"files": [
									{
										"path": "code/modules/annotations.src.js",
										"line": 3602
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.Chart.removeAnnotation",
								"description": "Remove an annotation from the chart.",
								"kind": "function",
								"parameters": {
									"idOrAnnotation": {
										"description": "The annotation's id or direct annotation object.",
										"types": [
											"number",
											"string",
											"Highcharts.Annotation"
										]
									}
								},
								"return": {
									"types": [
										"void"
									]
								}
							},
							"meta": {
								"files": [
									{
										"path": "code/modules/annotations-advanced.src.js",
										"line": 3602
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.Chart.removeAnnotation",
								"description": "Remove an annotation from the chart.",
								"kind": "function",
								"parameters": {
									"idOrAnnotation": {
										"description": "The annotation's id or direct annotation object.",
										"types": [
											"number",
											"string",
											"Highcharts.Annotation"
										]
									}
								},
								"return": {
									"types": [
										"void"
									]
								}
							},
							"meta": {
								"files": [
									{
										"path": "code/modules/stock-tools.src.js",
										"line": 3603
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.Chart.renderer",
								"description": "The renderer instance of the chart. Each chart instance has only one\nassociated renderer.",
								"kind": "member",
								"types": [
									"Highcharts.SVGRenderer"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 31115
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.Chart.resetSonifyCursor",
								"description": "Reset cursor to start. Requires series.sonify or chart.sonify to have been\nplayed at some point earlier.",
								"kind": "function",
								"return": {
									"types": [
										"void"
									]
								}
							},
							"meta": {
								"files": [
									{
										"path": "code/modules/sonification.src.js",
										"line": 2531
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.Chart.resetSonifyCursorEnd",
								"description": "Reset cursor to end. Requires series.sonify or chart.sonify to have been\nplayed at some point earlier.",
								"kind": "function",
								"return": {
									"types": [
										"void"
									]
								}
							},
							"meta": {
								"files": [
									{
										"path": "code/modules/sonification.src.js",
										"line": 2546
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.Chart.resumeSonify",
								"description": "Resume the currently running sonification. Requires series.sonify or\nchart.sonify to have been played at some point earlier.",
								"kind": "function",
								"parameters": {
									"onEnd": {
										"description": "Callback to call when play finished.",
										"types": [
											"function"
										]
									}
								},
								"return": {
									"types": [
										"void"
									]
								}
							},
							"meta": {
								"files": [
									{
										"path": "code/modules/sonification.src.js",
										"line": 2479
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.Chart.rewindSonify",
								"description": "Play backwards from cursor. Requires series.sonify or chart.sonify to have\nbeen played at some point earlier.",
								"kind": "function",
								"parameters": {
									"onEnd": {
										"description": "Callback to call when play finished.",
										"types": [
											"function"
										]
									}
								},
								"return": {
									"types": [
										"void"
									]
								}
							},
							"meta": {
								"files": [
									{
										"path": "code/modules/sonification.src.js",
										"line": 2497
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.Chart.series",
								"description": "All the current series in the chart.",
								"kind": "member",
								"types": [
									"Array.<Highcharts.Series>"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 30224
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.Chart.setCaption",
								"description": "Set the caption options. This can also be done from {@link Chart#update}.",
								"kind": "function",
								"parameters": {
									"options": {
										"description": "New caption options. The caption text itself is set by the\n       `options.text` property.",
										"types": [
											"Highcharts.CaptionOptions"
										]
									}
								},
								"return": {
									"types": [
										"void"
									]
								}
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 32589
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.Chart.setClassName",
								"description": "Set the {@link Chart.container|chart container's} class name, in\naddition to `highcharts-container`.",
								"kind": "function",
								"parameters": {
									"className": {
										"description": "The additional class name.",
										"isOptional": true,
										"types": [
											"string"
										]
									}
								},
								"return": {
									"types": [
										"void"
									]
								}
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 31006
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.Chart.setSize",
								"description": "Resize the chart to a given width and height. In order to set the width\nonly, the height argument may be skipped. To set the height only, pass\n`undefined` for the width.",
								"kind": "function",
								"fires": [
									"Highcharts.Chart#endResize",
									"Highcharts.Chart#resize"
								],
								"parameters": {
									"width": {
										"description": "The new pixel width of the chart. Since v4.2.6, the argument can\n       be `undefined` in order to preserve the current value (when\n       setting height only), or `null` to adapt to the width of the\n       containing element.",
										"isOptional": true,
										"types": [
											"number",
											"null"
										]
									},
									"height": {
										"description": "The new pixel height of the chart. Since v4.2.6, the argument can\n       be `undefined` in order to preserve the current value, or `null`\n       in order to adapt to the height of the containing element.",
										"isOptional": true,
										"types": [
											"number",
											"null"
										]
									},
									"animation": {
										"description": "Whether and how to apply animation.",
										"isOptional": true,
										"types": [
											"boolean",
											"Partial.<Highcharts.AnimationOptionsObject>"
										]
									}
								},
								"return": {
									"types": [
										"void"
									]
								}
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 31284
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.Chart.setSonifyCursor",
								"description": "Set the cursor to a point or set of points in different series.",
								"kind": "function",
								"parameters": {
									"points": {
										"description": "The point or points to set the cursor to. If setting multiple points\n       under the cursor, the points have to be in different series that are\n       being played simultaneously.",
										"types": [
											"Highcharts.Point",
											"Array.<Highcharts.Point>"
										]
									}
								},
								"return": {
									"types": [
										"void"
									]
								}
							},
							"meta": {
								"files": [
									{
										"path": "code/modules/sonification.src.js",
										"line": 2437
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.Chart.setSubtitle",
								"description": "Shortcut to set the subtitle options. This can also be done from {@link Chart#update} or {@link Chart#setTitle}.",
								"kind": "function",
								"parameters": {
									"options": {
										"description": "New subtitle options. The subtitle text itself is set by the\n       `options.text` property.",
										"types": [
											"Highcharts.SubtitleOptions"
										]
									}
								},
								"return": {
									"types": [
										"void"
									]
								}
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 32575
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.Chart.setTitle",
								"description": "Set a new title or subtitle for the chart.",
								"kind": "function",
								"parameters": {
									"titleOptions": {
										"description": "New title options. The title text itself is set by the\n       `titleOptions.text` property.",
										"isOptional": true,
										"types": [
											"Highcharts.TitleOptions"
										]
									},
									"subtitleOptions": {
										"description": "New subtitle options. The subtitle text itself is set by the\n       `subtitleOptions.text` property.",
										"isOptional": true,
										"types": [
											"Highcharts.SubtitleOptions"
										]
									},
									"redraw": {
										"description": "Whether to redraw the chart or wait for a later call to\n       `chart.redraw()`.",
										"isOptional": true,
										"types": [
											"boolean"
										]
									}
								},
								"return": {
									"types": [
										"void"
									]
								}
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 30723
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.Chart.showLoading",
								"description": "Dim the chart and show a loading text or symbol. Options for the loading\nscreen are defined in {@link\nhttps://api.highcharts.com/highcharts/loading|the loading options}.",
								"kind": "function",
								"parameters": {
									"str": {
										"description": "An optional text to show in the loading label instead of the\n       default one. The default text is set in\n       [lang.loading](https://api.highcharts.com/highcharts/lang.loading).",
										"isOptional": true,
										"types": [
											"string"
										]
									}
								},
								"return": {
									"types": [
										"void"
									]
								}
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 32187
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.Chart.showResetZoom",
								"description": "Display the zoom button, so users can reset zoom to the default view\nsettings.",
								"kind": "function",
								"fires": [
									"Highcharts.Chart#afterShowResetZoom",
									"Highcharts.Chart#beforeShowResetZoom"
								],
								"return": {
									"types": [
										"void"
									]
								}
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 32603
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.Chart.sonify",
								"description": "Sonify a chart.",
								"kind": "function",
								"parameters": {
									"options": {
										"description": "The options for sonifying this chart. If not provided,\n       uses options set on chart and series.",
										"isOptional": true,
										"types": [
											"Highcharts.SonificationOptions"
										]
									}
								},
								"return": {
									"types": [
										"void"
									]
								}
							},
							"meta": {
								"files": [
									{
										"path": "code/modules/sonification.src.js",
										"line": 2351
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.Chart.styledMode",
								"description": "Whether the chart is in styled mode, meaning all presentatinoal\nattributes are avoided.",
								"kind": "member",
								"types": [
									"boolean"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 30253
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.Chart.subtitle",
								"description": "The chart subtitle. The subtitle has an `update` method that\nallows modifying the options directly or indirectly via\n`chart.update`.",
								"kind": "member",
								"types": [
									"Highcharts.SubtitleObject"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 30813
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.Chart.time",
								"description": "The `Time` object associated with the chart. Since v6.0.5,\ntime settings can be applied individually for each chart. If\nno individual settings apply, the `Time` object is shared by\nall instances.",
								"kind": "member",
								"types": [
									"Highcharts.Time"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 30231
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.Chart.title",
								"description": "The chart title. The title has an `update` method that allows\nmodifying the options directly or indirectly via\n`chart.update`.",
								"kind": "member",
								"types": [
									"Highcharts.TitleObject"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 30802
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.Chart.tooltip",
								"description": "Tooltip object for points of series.",
								"kind": "member",
								"types": [
									"Highcharts.Tooltip"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 27333
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.Chart.transformFromLatLon",
								"description": "Highmaps only. Get point from latitude and longitude using specified\ntransform definition.",
								"kind": "function",
								"parameters": {
									"latLon": {
										"description": "A latitude/longitude object.",
										"types": [
											"Highcharts.MapLatLonObject"
										]
									},
									"transform": {
										"description": "The transform definition to use as explained in the\n       {@link https://www.highcharts.com/docs/maps/latlon|documentation}.",
										"types": [
											"*"
										]
									}
								},
								"return": {
									"types": [
										"Highcharts.MapCoordinateObject"
									],
									"description": "An object with `x` and `y` properties."
								}
							},
							"meta": {
								"files": [
									{
										"path": "code/modules/map.src.js",
										"line": 8081
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.Chart.transformToLatLon",
								"description": "Highmaps only. Get latLon from point using specified transform definition.\nThe method returns an object with the numeric properties `lat` and `lon`.",
								"kind": "function",
								"parameters": {
									"point": {
										"description": "A `Point` instance, or any object containing the properties `x` and\n       `y` with numeric values.",
										"types": [
											"Highcharts.Point",
											"Highcharts.MapCoordinateObject"
										]
									},
									"transform": {
										"description": "The transform definition to use as explained in the\n       {@link https://www.highcharts.com/docs/maps/latlon|documentation}.",
										"types": [
											"*"
										]
									}
								},
								"return": {
									"types": [
										"Highcharts.MapLatLonObject",
										"undefined"
									],
									"description": "An object with `lat` and `lon` properties."
								}
							},
							"meta": {
								"files": [
									{
										"path": "code/modules/map.src.js",
										"line": 8143
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.Chart.update",
								"description": "A generic function to update any element of the chart. Elements can be\nenabled and disabled, moved, re-styled, re-formatted etc.\n\nA special case is configuration objects that take arrays, for example\n[xAxis](https://api.highcharts.com/highcharts/xAxis),\n[yAxis](https://api.highcharts.com/highcharts/yAxis) or\n[series](https://api.highcharts.com/highcharts/series). For these\ncollections, an `id` option is used to map the new option set to an\nexisting object. If an existing object of the same id is not found, the\ncorresponding item is updated. So for example, running `chart.update`\nwith a series item without an id, will cause the existing chart's series\nwith the same index in the series array to be updated. When the\n`oneToOne` parameter is true, `chart.update` will also take care of\nadding and removing items from the collection. Read more under the\nparameter description below.\n\nNote that when changing series data, `chart.update` may mutate the passed\ndata options.\n\nSee also the\n[responsive option set](https://api.highcharts.com/highcharts/responsive).\nSwitching between `responsive.rules` basically runs `chart.update` under\nthe hood.",
								"kind": "function",
								"fires": [
									"Highcharts.Chart#update",
									"Highcharts.Chart#afterUpdate"
								],
								"parameters": {
									"options": {
										"description": "A configuration object for the new chart options.",
										"types": [
											"Highcharts.Options"
										]
									},
									"redraw": {
										"description": "Whether to redraw the chart.",
										"isOptional": true,
										"types": [
											"boolean"
										]
									},
									"oneToOne": {
										"description": "When `true`, the `series`, `xAxis`, `yAxis` and `annotations`\n       collections will be updated one to one, and items will be either\n       added or removed to match the new updated options. For example,\n       if the chart has two series and we call `chart.update` with a\n       configuration containing three series, one will be added. If we\n       call `chart.update` with one series, one will be removed. Setting\n       an empty `series` array will remove all series, but leaving out\n       the`series` property will leave all series untouched. If the\n       series have id's, the new series options will be matched by id,\n       and the remaining ones removed.",
										"isOptional": true,
										"types": [
											"boolean"
										]
									},
									"animation": {
										"description": "Whether to apply animation, and optionally animation\n       configuration.",
										"isOptional": true,
										"types": [
											"boolean",
											"Partial.<Highcharts.AnimationOptionsObject>"
										]
									}
								},
								"return": {
									"types": [
										"void"
									]
								}
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 32288
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.Chart.userOptions",
								"description": "The original options given to the constructor or a chart factory\nlike {@link Highcharts.chart} and {@link Highcharts.stockChart}.",
								"kind": "member",
								"types": [
									"Highcharts.Options"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 30188
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.Chart.viewData",
								"description": "Export-data module required. View the data in a table below the chart.",
								"kind": "function",
								"fires": [
									"Highcharts.Chart#afterViewData"
								],
								"return": {
									"types": [
										"void"
									]
								}
							},
							"meta": {
								"files": [
									{
										"path": "code/modules/export-data.src.js",
										"line": 1099
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.Chart.xAxis",
								"description": "A collection of the X axes in the chart.",
								"kind": "member",
								"types": [
									"Array.<Highcharts.Axis>"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 30276
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.Chart.yAxis",
								"description": "A collection of the Y axes in the chart.",
								"kind": "member",
								"types": [
									"Array.<Highcharts.Axis>"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 30283
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.Chart.zoomOut",
								"description": "Zoom the chart out after a user has zoomed in. See also\n[Axis.setExtremes](/class-reference/Highcharts.Axis#setExtremes).",
								"kind": "function",
								"fires": [
									"Highcharts.Chart#selection"
								],
								"return": {
									"types": [
										"void"
									]
								}
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 32641
									}
								]
							}
						}
					]
				},
				{
					"doclet": {
						"name": "Highcharts.ChartAddSeriesCallbackFunction",
						"description": "Gets fired when a series is added to the chart after load time, using the\n`addSeries` method. Returning `false` prevents the series from being added.",
						"kind": "typedef",
						"types": [
							"function"
						],
						"parameters": {
							"this": {
								"description": "The chart on which the event occured.",
								"types": [
									"Highcharts.Chart"
								]
							},
							"event": {
								"description": "The event that occured.",
								"types": [
									"Highcharts.ChartAddSeriesEventObject"
								]
							}
						},
						"return": {
							"types": [
								"void"
							]
						}
					},
					"meta": {
						"files": [
							{
								"path": "code/highcharts.src.js",
								"line": 7110
							}
						]
					}
				},
				{
					"doclet": {
						"name": "Highcharts.ChartAddSeriesEventObject",
						"description": "Contains common event information. Through the `options` property you can\naccess the series options that were passed to the `addSeries` method.",
						"kind": "interface"
					},
					"meta": {
						"files": [
							{
								"path": "code/highcharts.src.js",
								"line": 7122
							}
						]
					},
					"children": [
						{
							"doclet": {
								"name": "Highcharts.ChartAddSeriesEventObject.options",
								"description": "The series options that were passed to the `addSeries` method.",
								"kind": "member",
								"types": [
									"Highcharts.SeriesOptionsType"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 7127
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.ChartAddSeriesEventObject.preventDefault",
								"description": "Prevents the default behaviour of the event.",
								"kind": "member",
								"types": [
									"function"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 7131
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.ChartAddSeriesEventObject.target",
								"description": "The event target.",
								"kind": "member",
								"types": [
									"Highcharts.Chart"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 7135
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.ChartAddSeriesEventObject.type",
								"description": "The event type.",
								"kind": "member",
								"types": [
									"\"addSeries\""
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 7139
									}
								]
							}
						}
					]
				},
				{
					"doclet": {
						"name": "Highcharts.ChartCallbackFunction",
						"description": "Callback for chart constructors.",
						"kind": "typedef",
						"types": [
							"function"
						],
						"parameters": {
							"chart": {
								"description": "Created chart.",
								"types": [
									"Highcharts.Chart"
								]
							}
						},
						"return": {
							"types": [
								"void"
							]
						}
					},
					"meta": {
						"files": [
							{
								"path": "code/highcharts.src.js",
								"line": 32937
							}
						]
					}
				},
				{
					"doclet": {
						"name": "Highcharts.ChartClickCallbackFunction",
						"description": "Gets fired when clicking on the plot background.",
						"kind": "typedef",
						"types": [
							"function"
						],
						"parameters": {
							"this": {
								"description": "The chart on which the event occured.",
								"types": [
									"Highcharts.Chart"
								]
							},
							"event": {
								"description": "The event that occured.",
								"types": [
									"Highcharts.PointerEventObject"
								]
							}
						},
						"return": {
							"types": [
								"void"
							]
						}
					},
					"meta": {
						"files": [
							{
								"path": "code/highcharts.src.js",
								"line": 7144
							}
						]
					}
				},
				{
					"doclet": {
						"name": "Highcharts.ChartClickEventAxisObject",
						"description": "Contains an axes of the clicked spot.",
						"kind": "interface"
					},
					"meta": {
						"files": [
							{
								"path": "code/highcharts.src.js",
								"line": 7155
							}
						]
					},
					"children": [
						{
							"doclet": {
								"name": "Highcharts.ChartClickEventAxisObject.axis",
								"description": "Axis at the clicked spot.",
								"kind": "member",
								"types": [
									"Highcharts.Axis"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 7159
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.ChartClickEventAxisObject.value",
								"description": "Axis value at the clicked spot.",
								"kind": "member",
								"types": [
									"number"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 7163
									}
								]
							}
						}
					]
				},
				{
					"doclet": {
						"name": "Highcharts.ChartClickEventObject",
						"description": "Contains information about the clicked spot on the chart. Remember the unit\nof a datetime axis is milliseconds since 1970-01-01 00:00:00.",
						"kind": "interface",
						"types": [
							"Highcharts.PointerEventObject"
						]
					},
					"meta": {
						"files": [
							{
								"path": "code/highcharts.src.js",
								"line": 7168
							}
						]
					},
					"children": [
						{
							"doclet": {
								"name": "Highcharts.ChartClickEventObject.xAxis",
								"description": "Information about the x-axis on the clicked spot.",
								"kind": "member",
								"types": [
									"Array.<Highcharts.ChartClickEventAxisObject>"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 7174
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.ChartClickEventObject.yAxis",
								"description": "Information about the y-axis on the clicked spot.",
								"kind": "member",
								"types": [
									"Array.<Highcharts.ChartClickEventAxisObject>"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 7178
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.ChartClickEventObject.zAxis",
								"description": "Information about the z-axis on the clicked spot.",
								"kind": "member",
								"types": [
									"Array.<Highcharts.ChartClickEventAxisObject>",
									"undefined"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 7182
									}
								]
							}
						}
					]
				},
				{
					"doclet": {
						"name": "Highcharts.ChartIsInsideOptionsObject",
						"description": "",
						"kind": "interface"
					},
					"meta": {
						"files": [
							{
								"path": "code/highcharts.src.js",
								"line": 33026
							}
						]
					},
					"children": [
						{
							"doclet": {
								"name": "Highcharts.ChartIsInsideOptionsObject.ignoreX",
								"description": "",
								"kind": "member",
								"types": [
									"boolean",
									"undefined"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 33028
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.ChartIsInsideOptionsObject.ignoreY",
								"description": "",
								"kind": "member",
								"types": [
									"boolean",
									"undefined"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 33031
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.ChartIsInsideOptionsObject.inverted",
								"description": "",
								"kind": "member",
								"types": [
									"boolean",
									"undefined"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 33034
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.ChartIsInsideOptionsObject.paneCoordinates",
								"description": "",
								"kind": "member",
								"types": [
									"boolean",
									"undefined"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 33037
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.ChartIsInsideOptionsObject.series",
								"description": "",
								"kind": "member",
								"types": [
									"Highcharts.Series",
									"undefined"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 33040
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.ChartIsInsideOptionsObject.visiblePlotOnly",
								"description": "",
								"kind": "member",
								"types": [
									"boolean",
									"undefined"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 33043
									}
								]
							}
						}
					]
				},
				{
					"doclet": {
						"name": "Highcharts.ChartLoadCallbackFunction",
						"description": "Gets fired when the chart is finished loading.",
						"kind": "typedef",
						"types": [
							"function"
						],
						"parameters": {
							"this": {
								"description": "The chart on which the event occured.",
								"types": [
									"Highcharts.Chart"
								]
							},
							"event": {
								"description": "The event that occured.",
								"types": [
									"global.Event"
								]
							}
						},
						"return": {
							"types": [
								"void"
							]
						}
					},
					"meta": {
						"files": [
							{
								"path": "code/highcharts.src.js",
								"line": 7187
							}
						]
					}
				},
				{
					"doclet": {
						"name": "Highcharts.ChartPositionObject",
						"description": "Chart position and scale.",
						"kind": "interface"
					},
					"meta": {
						"files": [
							{
								"path": "code/highcharts.src.js",
								"line": 28244
							}
						]
					},
					"children": [
						{
							"doclet": {
								"name": "Highcharts.ChartPositionObject.left",
								"description": "",
								"kind": "member",
								"types": [
									"number"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 28248
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.ChartPositionObject.scaleX",
								"description": "",
								"kind": "member",
								"types": [
									"number"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 28251
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.ChartPositionObject.scaleY",
								"description": "",
								"kind": "member",
								"types": [
									"number"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 28254
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.ChartPositionObject.top",
								"description": "",
								"kind": "member",
								"types": [
									"number"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 28257
									}
								]
							}
						}
					]
				},
				{
					"doclet": {
						"name": "Highcharts.ChartRedrawCallbackFunction",
						"description": "Fires when the chart is redrawn, either after a call to `chart.redraw()` or\nafter an axis, series or point is modified with the `redraw` option set to\n`true`.",
						"kind": "typedef",
						"types": [
							"function"
						],
						"parameters": {
							"this": {
								"description": "The chart on which the event occured.",
								"types": [
									"Highcharts.Chart"
								]
							},
							"event": {
								"description": "The event that occured.",
								"types": [
									"global.Event"
								]
							}
						},
						"return": {
							"types": [
								"void"
							]
						}
					},
					"meta": {
						"files": [
							{
								"path": "code/highcharts.src.js",
								"line": 7198
							}
						]
					}
				},
				{
					"doclet": {
						"name": "Highcharts.ChartRenderCallbackFunction",
						"description": "Gets fired after initial load of the chart (directly after the `load` event),\nand after each redraw (directly after the `redraw` event).",
						"kind": "typedef",
						"types": [
							"function"
						],
						"parameters": {
							"this": {
								"description": "The chart on which the event occured.",
								"types": [
									"Highcharts.Chart"
								]
							},
							"event": {
								"description": "The event that occured.",
								"types": [
									"global.Event"
								]
							}
						},
						"return": {
							"types": [
								"void"
							]
						}
					},
					"meta": {
						"files": [
							{
								"path": "code/highcharts.src.js",
								"line": 7211
							}
						]
					}
				},
				{
					"doclet": {
						"name": "Highcharts.ChartSelectionAxisContextObject",
						"description": "Axis context of the selection.",
						"kind": "interface"
					},
					"meta": {
						"files": [
							{
								"path": "code/highcharts.src.js",
								"line": 7256
							}
						]
					},
					"children": [
						{
							"doclet": {
								"name": "Highcharts.ChartSelectionAxisContextObject.axis",
								"description": "The selected Axis.",
								"kind": "member",
								"types": [
									"Highcharts.Axis"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 7260
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.ChartSelectionAxisContextObject.max",
								"description": "The maximum axis value, either automatic or set manually.",
								"kind": "member",
								"types": [
									"number"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 7264
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.ChartSelectionAxisContextObject.min",
								"description": "The minimum axis value, either automatic or set manually.",
								"kind": "member",
								"types": [
									"number"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 7268
									}
								]
							}
						}
					]
				},
				{
					"doclet": {
						"name": "Highcharts.ChartSelectionCallbackFunction",
						"description": "Gets fired when an area of the chart has been selected. The default action\nfor the selection event is to zoom the chart to the selected area. It can be\nprevented by calling `event.preventDefault()` or return false.",
						"kind": "typedef",
						"types": [
							"function"
						],
						"parameters": {
							"this": {
								"description": "The chart on which the event occured.",
								"types": [
									"Highcharts.Chart"
								]
							},
							"event": {
								"description": "Event informations",
								"types": [
									"global.ChartSelectionContextObject"
								]
							}
						},
						"return": {
							"types": [
								"boolean",
								"undefined"
							],
							"description": "Return false to prevent the default action, usually zoom."
						}
					},
					"meta": {
						"files": [
							{
								"path": "code/highcharts.src.js",
								"line": 7223
							}
						]
					}
				},
				{
					"doclet": {
						"name": "Highcharts.ChartSelectionContextObject",
						"description": "The primary axes are `xAxis[0]` and `yAxis[0]`. Remember the unit of a\ndatetime axis is milliseconds since 1970-01-01 00:00:00.",
						"kind": "interface",
						"types": [
							"global.Event"
						]
					},
					"meta": {
						"files": [
							{
								"path": "code/highcharts.src.js",
								"line": 7239
							}
						]
					},
					"children": [
						{
							"doclet": {
								"name": "Highcharts.ChartSelectionContextObject.xAxis",
								"description": "Arrays containing the axes of each dimension and each axis' min and max\nvalues.",
								"kind": "member",
								"types": [
									"Array.<Highcharts.ChartSelectionAxisContextObject>"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 7245
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.ChartSelectionContextObject.yAxis",
								"description": "Arrays containing the axes of each dimension and each axis' min and max\nvalues.",
								"kind": "member",
								"types": [
									"Array.<Highcharts.ChartSelectionAxisContextObject>"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 7250
									}
								]
							}
						}
					]
				},
				{
					"doclet": {
						"name": "Highcharts.Class<T>",
						"description": "Interface description for a class.",
						"kind": "interface",
						"types": [
							"Function"
						]
					},
					"meta": {
						"files": [
							{
								"path": "code/highcharts.src.js",
								"line": 1873
							}
						]
					},
					"children": [
						{
							"doclet": {
								"name": "Highcharts.Class<T>.new",
								"description": "Class costructor.",
								"kind": "function",
								"parameters": {
									"args": {
										"description": "Constructor arguments.",
										"types": [
											"Array.<*>"
										],
										"isVariable": true
									}
								},
								"return": {
									"types": [
										"T"
									],
									"description": "Class instance."
								}
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 1878
									}
								]
							}
						}
					]
				},
				{
					"doclet": {
						"name": "Highcharts.ClipRectElement",
						"description": "A clipping rectangle that can be applied to one or more {@link SVGElement}\ninstances. It is instanciated with the {@link SVGRenderer#clipRect} function\nand applied with the {@link SVGElement#clip} function.",
						"kind": "typedef",
						"types": [
							"Highcharts.SVGElement"
						]
					},
					"meta": {
						"files": [
							{
								"path": "code/highcharts.src.js",
								"line": 14012
							}
						]
					}
				},
				{
					"doclet": {
						"name": "Highcharts.Color",
						"description": "Handle color operations. Some object methods are chainable.",
						"kind": "class"
					},
					"meta": {
						"files": [
							{
								"path": "code/highcharts.src.js",
								"line": 3368
							}
						]
					},
					"children": [
						{
							"doclet": {
								"name": "Highcharts.Color.brighten",
								"description": "Brighten the color instance.",
								"kind": "function",
								"parameters": {
									"alpha": {
										"description": "The alpha value.",
										"types": [
											"number"
										]
									}
								},
								"return": {
									"types": [
										"Highcharts.Color"
									],
									"description": "This color with modifications."
								}
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 3524
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.Color.constructor",
								"description": "Handle color operations. Some object methods are chainable.",
								"kind": "constructor",
								"parameters": {
									"input": {
										"description": "The input color in either rbga or hex format",
										"types": [
											"Highcharts.ColorType"
										]
									}
								},
								"return": {
									"types": [
										"void"
									]
								}
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 0
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.Color.get",
								"description": "Return the color or gradient stops in the specified format",
								"kind": "function",
								"parameters": {
									"format": {
										"description": "Possible values are 'a', 'rgb', 'rgba' (default).",
										"isOptional": true,
										"types": [
											"string"
										]
									}
								},
								"return": {
									"types": [
										"Highcharts.ColorType"
									],
									"description": "This color as a string or gradient stops."
								}
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 3486
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.Color.parse",
								"description": "Creates a color instance out of a color string or object.",
								"kind": "function",
								"isStatic": true,
								"parameters": {
									"input": {
										"description": "The input color in either rbga or hex format.",
										"isOptional": true,
										"types": [
											"Highcharts.ColorType"
										]
									}
								},
								"return": {
									"types": [
										"Highcharts.Color"
									],
									"description": "Color instance."
								}
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 3402
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.Color.setOpacity",
								"description": "Set the color's opacity to a given alpha value.",
								"kind": "function",
								"parameters": {
									"alpha": {
										"description": "Opacity between 0 and 1.",
										"types": [
											"number"
										]
									}
								},
								"return": {
									"types": [
										"Highcharts.Color"
									],
									"description": "Color with modifications."
								}
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 3555
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.Color.tweenTo",
								"description": "Return an intermediate color between two colors.",
								"kind": "function",
								"parameters": {
									"to": {
										"description": "The color object to tween to.",
										"types": [
											"Highcharts.Color"
										]
									},
									"pos": {
										"description": "The intermediate position, where 0 is the from color (current color\nitem), and 1 is the `to` color.",
										"types": [
											"number"
										]
									}
								},
								"return": {
									"types": [
										"Highcharts.ColorType"
									],
									"description": "The intermediate color in rgba notation, or unsupported type."
								}
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 3570
									}
								]
							}
						}
					]
				},
				{
					"doclet": {
						"name": "Highcharts.ColorAxis",
						"description": "The ColorAxis object for inclusion in gradient legends.",
						"kind": "class",
						"types": [
							"Highcharts.Axis"
						]
					},
					"meta": {
						"files": [
							{
								"path": "code/modules/coloraxis.src.js",
								"line": 837
							}
						]
					},
					"children": [
						{
							"doclet": {
								"name": "Highcharts.ColorAxis.constructor",
								"description": "The ColorAxis object for inclusion in gradient legends.",
								"kind": "constructor",
								"parameters": {
									"chart": {
										"description": "The related chart of the color axis.",
										"types": [
											"Highcharts.Chart"
										]
									},
									"userOptions": {
										"description": "The color axis options for initialization.",
										"types": [
											"Highcharts.ColorAxisOptions"
										]
									}
								},
								"return": {
									"types": [
										"void"
									]
								}
							},
							"meta": {
								"files": [
									{
										"path": "code/modules/coloraxis.src.js",
										"line": 0
									}
								]
							}
						}
					]
				},
				{
					"doclet": {
						"name": "Highcharts.ColorAxisTypeValue",
						"description": "Color axis types",
						"kind": "typedef",
						"types": [
							"\"linear\"",
							"\"logarithmic\""
						]
					},
					"meta": {
						"files": [
							{
								"path": "code/modules/coloraxis.src.js",
								"line": 1494
							},
							{
								"path": "code/modules/heatmap.src.js",
								"line": 1492
							},
							{
								"path": "code/modules/map.src.js",
								"line": 1659
							}
						]
					}
				},
				{
					"doclet": {
						"name": "Highcharts.ColorString",
						"description": "A valid color to be parsed and handled by Highcharts. Highcharts internally\nsupports hex colors like `#ffffff`, rgb colors like `rgb(255,255,255)` and\nrgba colors like `rgba(255,255,255,1)`. Other colors may be supported by the\nbrowsers and displayed correctly, but Highcharts is not able to process them\nand apply concepts like opacity and brightening.",
						"kind": "typedef",
						"types": [
							"string"
						]
					},
					"meta": {
						"files": [
							{
								"path": "code/highcharts.src.js",
								"line": 3658
							}
						]
					}
				},
				{
					"doclet": {
						"name": "Highcharts.ColorType",
						"description": "A valid color type than can be parsed and handled by Highcharts. It can be a\ncolor string, a gradient object, or a pattern object.",
						"kind": "typedef",
						"types": [
							"Highcharts.ColorString",
							"Highcharts.GradientColorObject",
							"Highcharts.PatternObject"
						]
					},
					"meta": {
						"files": [
							{
								"path": "code/highcharts.src.js",
								"line": 3667
							}
						]
					}
				},
				{
					"doclet": {
						"name": "Highcharts.CursorValue",
						"description": "All possible cursor styles.",
						"kind": "typedef",
						"types": [
							"'alias'",
							"'all-scroll'",
							"'auto'",
							"'cell'",
							"'col-resize'",
							"'context-menu'",
							"'copy'",
							"'crosshair'",
							"'default'",
							"'e-resize'",
							"'ew-resize'",
							"'grab'",
							"'grabbing'",
							"'help'",
							"'move'",
							"'n-resize'",
							"'ne-resize'",
							"'nesw-resize'",
							"'no-drop'",
							"'none'",
							"'not-allowed'",
							"'ns-resize'",
							"'nw-resize'",
							"'nwse-resize'",
							"'pointer'",
							"'progress'",
							"'row-resize'",
							"'s-resize'",
							"'se-resize'",
							"'sw-resize'",
							"'text'",
							"'vertical-text'",
							"'w-resize'",
							"'wait'",
							"'zoom-in'",
							"'zoom-out'"
						]
					},
					"meta": {
						"files": [
							{
								"path": "code/highcharts.src.js",
								"line": 1998
							}
						]
					}
				},
				{
					"doclet": {
						"name": "Highcharts.DashStyleValue",
						"description": "All possible dash styles.",
						"kind": "typedef",
						"types": [
							"'Dash'",
							"'DashDot'",
							"'Dot'",
							"'LongDash'",
							"'LongDashDot'",
							"'LongDashDotDot'",
							"'ShortDash'",
							"'ShortDashDot'",
							"'ShortDashDotDot'",
							"'ShortDot'",
							"'Solid'"
						]
					},
					"meta": {
						"files": [
							{
								"path": "code/highcharts.src.js",
								"line": 2003
							}
						]
					}
				},
				{
					"doclet": {
						"name": "Highcharts.Data",
						"description": "The Data class",
						"kind": "class"
					},
					"meta": {
						"files": [
							{
								"path": "code/modules/data.src.js",
								"line": 731
							}
						]
					},
					"children": [
						{
							"doclet": {
								"name": "Highcharts.Data.complete",
								"description": "If a complete callback function is provided in the options, interpret the\ncolumns into a Highcharts options object.",
								"kind": "function",
								"return": {
									"types": [
										"void"
									]
								}
							},
							"meta": {
								"files": [
									{
										"path": "code/modules/data.src.js",
										"line": 2015
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.Data.constructor",
								"description": "The Data class",
								"kind": "constructor",
								"parameters": {
									"dataOptions": {
										"types": [
											"Highcharts.DataOptions"
										]
									},
									"chartOptions": {
										"isOptional": true,
										"types": [
											"Highcharts.Options"
										]
									},
									"chart": {
										"isOptional": true,
										"types": [
											"Highcharts.Chart"
										]
									}
								},
								"return": {
									"types": [
										"void"
									]
								}
							},
							"meta": {
								"files": [
									{
										"path": "code/modules/data.src.js",
										"line": 0
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.Data.dateFormats",
								"description": "A collection of available date formats, extendable from the outside to\nsupport custom date formats.",
								"kind": "member",
								"types": [
									"Highcharts.Dictionary.<Highcharts.DataDateFormatObject>"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/modules/data.src.js",
										"line": 757
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.Data.fetchLiveData",
								"description": "Fetch or refetch live data",
								"kind": "function",
								"return": {
									"types": [
										"boolean"
									],
									"description": "The URLs that were tried can be found in the options"
								}
							},
							"meta": {
								"files": [
									{
										"path": "code/modules/data.src.js",
										"line": 1488
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.Data.getColumnDistribution",
								"description": "Get the column distribution. For example, a line series takes a single\ncolumn for Y values. A range series takes two columns for low and high\nvalues respectively, and an OHLC series takes four columns.",
								"kind": "function",
								"return": {
									"types": [
										"void"
									]
								}
							},
							"meta": {
								"files": [
									{
										"path": "code/modules/data.src.js",
										"line": 891
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.Data.getData",
								"description": "Get the parsed data in a form that we can apply directly to the\n`series.data` config. Array positions can be mapped using the\n`series.keys` option.",
								"kind": "function",
								"return": {
									"types": [
										"Array.<Array.<(number|string)>>",
										"undefined"
									],
									"description": "Data rows"
								}
							},
							"meta": {
								"files": [
									{
										"path": "code/modules/data.src.js",
										"line": 1955
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.Data.parseCSV",
								"description": "Parse a CSV input string",
								"kind": "function",
								"parameters": {
									"inOptions": {
										"isOptional": true,
										"types": [
											"Highcharts.DataOptions"
										]
									}
								},
								"return": {
									"types": [
										"Array.<Array.<Highcharts.DataValueType>>"
									]
								}
							},
							"meta": {
								"files": [
									{
										"path": "code/modules/data.src.js",
										"line": 1002
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.Data.parseColumn",
								"description": "Parse a single column. Set properties like .isDatetime and .isNumeric.",
								"kind": "function",
								"parameters": {
									"column": {
										"description": "Column to parse",
										"types": [
											"Array.<Highcharts.DataValueType>"
										]
									},
									"col": {
										"description": "Column index",
										"types": [
											"number"
										]
									}
								},
								"return": {
									"types": [
										"void"
									]
								}
							},
							"meta": {
								"files": [
									{
										"path": "code/modules/data.src.js",
										"line": 1729
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.Data.parseDate",
								"description": "Parse a date and return it as a number. Overridable through\n`options.parseDate`.",
								"kind": "function",
								"parameters": {
									"val": {
										"types": [
											"string"
										]
									}
								},
								"return": {
									"types": [
										"number"
									]
								}
							},
							"meta": {
								"files": [
									{
										"path": "code/modules/data.src.js",
										"line": 1853
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.Data.parseGoogleSpreadsheet",
								"description": "Parse a Google spreadsheet.",
								"kind": "function",
								"return": {
									"types": [
										"boolean"
									],
									"description": "Always returns false, because it is an intermediate fetch."
								}
							},
							"meta": {
								"files": [
									{
										"path": "code/modules/data.src.js",
										"line": 1591
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.Data.parseTable",
								"description": "Parse a HTML table",
								"kind": "function",
								"return": {
									"types": [
										"Array.<Array.<Highcharts.DataValueType>>"
									]
								}
							},
							"meta": {
								"files": [
									{
										"path": "code/modules/data.src.js",
										"line": 1441
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.Data.parseTypes",
								"description": "Parse numeric cells in to number types and date types in to true dates.",
								"kind": "function",
								"return": {
									"types": [
										"void"
									]
								}
							},
							"meta": {
								"files": [
									{
										"path": "code/modules/data.src.js",
										"line": 1717
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.Data.parsed",
								"description": "A hook for working directly on the parsed columns",
								"kind": "function",
								"return": {
									"types": [
										"boolean",
										"undefined"
									]
								}
							},
							"meta": {
								"files": [
									{
										"path": "code/modules/data.src.js",
										"line": 1974
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.Data.rowsToColumns",
								"description": "Reorganize rows into columns.",
								"kind": "function",
								"parameters": {
									"rows": {
										"types": [
											"Array.<Array.<Highcharts.DataValueType>>"
										]
									}
								},
								"return": {
									"types": [
										"Array.<Array.<Highcharts.DataValueType>>",
										"undefined"
									]
								}
							},
							"meta": {
								"files": [
									{
										"path": "code/modules/data.src.js",
										"line": 1925
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.Data.trim",
								"description": "Trim a string from whitespaces.",
								"kind": "function",
								"parameters": {
									"str": {
										"description": "String to trim",
										"types": [
											"string"
										]
									},
									"inside": {
										"description": "Remove all spaces between numbers.",
										"isOptional": true,
										"types": [
											"boolean"
										]
									}
								},
								"return": {
									"types": [
										"string"
									],
									"description": "Trimed string"
								}
							},
							"meta": {
								"files": [
									{
										"path": "code/modules/data.src.js",
										"line": 1690
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.Data.update",
								"description": "Updates the chart with new data options.",
								"kind": "function",
								"parameters": {
									"options": {
										"types": [
											"Highcharts.DataOptions"
										]
									},
									"redraw": {
										"isOptional": true,
										"types": [
											"boolean"
										]
									}
								},
								"return": {
									"types": [
										"void"
									]
								}
							},
							"meta": {
								"files": [
									{
										"path": "code/modules/data.src.js",
										"line": 2145
									}
								]
							}
						}
					]
				},
				{
					"doclet": {
						"name": "Highcharts.DataBeforeParseCallbackFunction",
						"description": "Callback function to modify the CSV before parsing it by the data module.",
						"kind": "typedef",
						"types": [
							"function"
						],
						"parameters": {
							"csv": {
								"description": "The CSV to modify.",
								"types": [
									"string"
								]
							}
						},
						"return": {
							"types": [
								"string"
							],
							"description": "The CSV to parse."
						}
					},
					"meta": {
						"files": [
							{
								"path": "code/modules/data.src.js",
								"line": 258
							}
						]
					}
				},
				{
					"doclet": {
						"name": "Highcharts.DataCompleteCallbackFunction",
						"description": "Callback function that gets called after parsing data.",
						"kind": "typedef",
						"types": [
							"function"
						],
						"parameters": {
							"chartOptions": {
								"description": "The chart options that were used.",
								"types": [
									"Highcharts.Options"
								]
							}
						},
						"return": {
							"types": [
								"void"
							]
						}
					},
					"meta": {
						"files": [
							{
								"path": "code/modules/data.src.js",
								"line": 269
							}
						]
					}
				},
				{
					"doclet": {
						"name": "Highcharts.DataDateFormatCallbackFunction",
						"description": "Callback function that returns the correspondig Date object to a match.",
						"kind": "typedef",
						"types": [
							"function"
						],
						"parameters": {
							"match": {
								"types": [
									"Array.<number>"
								]
							}
						},
						"return": {
							"types": [
								"number"
							]
						}
					},
					"meta": {
						"files": [
							{
								"path": "code/modules/data.src.js",
								"line": 277
							}
						]
					}
				},
				{
					"doclet": {
						"name": "Highcharts.DataDateFormatObject",
						"description": "Structure for alternative date formats to parse.",
						"kind": "interface"
					},
					"meta": {
						"files": [
							{
								"path": "code/modules/data.src.js",
								"line": 286
							}
						]
					},
					"children": [
						{
							"doclet": {
								"name": "Highcharts.DataDateFormatObject.alternative",
								"description": "",
								"kind": "member",
								"types": [
									"string",
									"undefined"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/modules/data.src.js",
										"line": 290
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.DataDateFormatObject.parser",
								"description": "",
								"kind": "member",
								"types": [
									"Highcharts.DataDateFormatCallbackFunction"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/modules/data.src.js",
										"line": 293
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.DataDateFormatObject.regex",
								"description": "",
								"kind": "member",
								"types": [
									"global.RegExp"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/modules/data.src.js",
										"line": 296
									}
								]
							}
						}
					]
				},
				{
					"doclet": {
						"name": "Highcharts.DataGroupingAnchor",
						"description": "The position of the point inside the group.",
						"kind": "typedef",
						"types": [
							"\"start\"",
							"\"middle\"",
							"\"end\""
						]
					},
					"meta": {
						"files": [
							{
								"path": "code/modules/datagrouping.src.js",
								"line": 56
							},
							{
								"path": "code/modules/stock.src.js",
								"line": 1799
							}
						]
					}
				},
				{
					"doclet": {
						"name": "Highcharts.DataGroupingAnchorExtremes",
						"description": "The position of the first or last point in the series inside the group.",
						"kind": "typedef",
						"types": [
							"\"start\"",
							"\"middle\"",
							"\"end\"",
							"\"firstPoint\"",
							"\"lastPoint\""
						]
					},
					"meta": {
						"files": [
							{
								"path": "code/modules/datagrouping.src.js",
								"line": 61
							},
							{
								"path": "code/modules/stock.src.js",
								"line": 1804
							}
						]
					}
				},
				{
					"doclet": {
						"name": "Highcharts.DataGroupingApproximationValue",
						"description": "",
						"kind": "typedef",
						"types": [
							"\"average\"",
							"\"averages\"",
							"\"open\"",
							"\"high\"",
							"\"low\"",
							"\"close\"",
							"\"sum\""
						]
					},
					"meta": {
						"files": [
							{
								"path": "code/modules/datagrouping.src.js",
								"line": 53
							},
							{
								"path": "code/modules/stock.src.js",
								"line": 1796
							}
						]
					}
				},
				{
					"doclet": {
						"name": "Highcharts.DataGroupingInfoObject",
						"description": "",
						"kind": "interface"
					},
					"meta": {
						"files": [
							{
								"path": "code/modules/datagrouping.src.js",
								"line": 66
							},
							{
								"path": "code/modules/stock.src.js",
								"line": 1809
							}
						]
					},
					"children": [
						{
							"doclet": {
								"name": "Highcharts.DataGroupingInfoObject.length",
								"description": "",
								"kind": "member",
								"types": [
									"number"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/modules/datagrouping.src.js",
										"line": 68
									},
									{
										"path": "code/modules/stock.src.js",
										"line": 1811
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.DataGroupingInfoObject.options",
								"description": "",
								"kind": "member",
								"types": [
									"Highcharts.SeriesOptionsType",
									"undefined"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/modules/datagrouping.src.js",
										"line": 71
									},
									{
										"path": "code/modules/stock.src.js",
										"line": 1814
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.DataGroupingInfoObject.start",
								"description": "",
								"kind": "member",
								"types": [
									"number"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/modules/datagrouping.src.js",
										"line": 74
									},
									{
										"path": "code/modules/stock.src.js",
										"line": 1817
									}
								]
							}
						}
					]
				},
				{
					"doclet": {
						"name": "Highcharts.DataLabelsFormatterCallbackFunction",
						"description": "Callback JavaScript function to format the data label as a string. Note that\nif a `format` is defined, the format takes precedence and the formatter is\nignored.",
						"kind": "typedef",
						"types": [
							"function"
						],
						"parameters": {
							"this": {
								"description": "Data label context to format",
								"types": [
									"Highcharts.PointLabelObject"
								]
							},
							"options": {
								"description": "[API options](/highcharts/plotOptions.series.dataLabels) of the data label",
								"types": [
									"Highcharts.DataLabelsOptions"
								]
							}
						},
						"return": {
							"types": [
								"number",
								"string",
								"null",
								"undefined"
							],
							"description": "Formatted data label text"
						}
					},
					"meta": {
						"files": [
							{
								"path": "code/highcharts.src.js",
								"line": 44253
							}
						]
					}
				},
				{
					"doclet": {
						"name": "Highcharts.DataLabelsOverflowValue",
						"description": "Values for handling data labels that flow outside the plot area.",
						"kind": "typedef",
						"types": [
							"\"allow\"",
							"\"justify\""
						]
					},
					"meta": {
						"files": [
							{
								"path": "code/highcharts.src.js",
								"line": 44269
							}
						]
					}
				},
				{
					"doclet": {
						"name": "Highcharts.DataParseDateCallbackFunction",
						"description": "Callback function to parse string representations of dates into\nJavaScript timestamps (milliseconds since 1.1.1970).",
						"kind": "typedef",
						"types": [
							"function"
						],
						"parameters": {
							"dateValue": {
								"types": [
									"string"
								]
							}
						},
						"return": {
							"types": [
								"number"
							],
							"description": "Timestamp (milliseconds since 1.1.1970) as integer for Date class."
						}
					},
					"meta": {
						"files": [
							{
								"path": "code/modules/data.src.js",
								"line": 305
							}
						]
					}
				},
				{
					"doclet": {
						"name": "Highcharts.DataParsedCallbackFunction",
						"description": "Callback function to access the parsed columns, the two-dimentional\ninput data array directly, before they are interpreted into series\ndata and categories.",
						"kind": "typedef",
						"types": [
							"function"
						],
						"parameters": {
							"columns": {
								"description": "The parsed columns by the data module.",
								"types": [
									"Array.<Array.<*>>"
								]
							}
						},
						"return": {
							"types": [
								"boolean",
								"undefined"
							],
							"description": "Return `false` to stop completion, or call `this.complete()` to\n        continue async."
						}
					},
					"meta": {
						"files": [
							{
								"path": "code/modules/data.src.js",
								"line": 316
							}
						]
					}
				},
				{
					"doclet": {
						"name": "Highcharts.DataSortingOptionsObject",
						"description": "Options for `dataSorting`.",
						"kind": "interface"
					},
					"meta": {
						"files": [
							{
								"path": "code/highcharts.src.js",
								"line": 39194
							}
						]
					},
					"children": [
						{
							"doclet": {
								"name": "Highcharts.DataSortingOptionsObject.enabled",
								"description": "Enable or disable data sorting for the series.",
								"kind": "member",
								"types": [
									"boolean",
									"undefined"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 39199
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.DataSortingOptionsObject.matchByName",
								"description": "Whether to allow matching points by name in an update.",
								"kind": "member",
								"types": [
									"boolean",
									"undefined"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 39203
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.DataSortingOptionsObject.sortKey",
								"description": "Determines what data value should be used to sort by.",
								"kind": "member",
								"types": [
									"string",
									"undefined"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 39207
									}
								]
							}
						}
					]
				},
				{
					"doclet": {
						"name": "Highcharts.DataValueType",
						"description": "Possible types for a data item in a column or row.",
						"kind": "typedef",
						"types": [
							"number",
							"string",
							"null"
						]
					},
					"meta": {
						"files": [
							{
								"path": "code/modules/data.src.js",
								"line": 300
							}
						]
					}
				},
				{
					"doclet": {
						"name": "Highcharts.Dictionary<T>",
						"description": "Generic dictionary in TypeScript notation.\nUse the native `AnyRecord` instead.",
						"kind": "interface",
						"isDeprecated": true
					},
					"meta": {
						"files": [
							{
								"path": "code/highcharts.src.js",
								"line": 2008
							}
						]
					},
					"children": [
						{
							"doclet": {
								"name": "Highcharts.Dictionary<T>.[key:string]",
								"description": "",
								"kind": "member",
								"types": [
									"T"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 2014
									}
								]
							}
						}
					]
				},
				{
					"doclet": {
						"name": "Highcharts.DragDropPositionObject",
						"description": "Current drag and drop position.",
						"kind": "interface"
					},
					"meta": {
						"files": [
							{
								"path": "code/modules/draggable-points.src.js",
								"line": 2243
							}
						]
					},
					"children": [
						{
							"doclet": {
								"name": "Highcharts.DragDropPositionObject.chartX",
								"description": "Chart x position",
								"kind": "member",
								"types": [
									"number"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/modules/draggable-points.src.js",
										"line": 2247
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.DragDropPositionObject.chartY",
								"description": "Chart y position",
								"kind": "member",
								"types": [
									"number"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/modules/draggable-points.src.js",
										"line": 2251
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.DragDropPositionObject.guideBox",
								"description": "Drag and drop guide box.",
								"kind": "member",
								"types": [
									"Highcharts.BBoxObject",
									"undefined"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/modules/draggable-points.src.js",
										"line": 2255
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.DragDropPositionObject.points",
								"description": "Updated point data.",
								"kind": "member",
								"types": [
									"Highcharts.Dictionary.<Highcharts.Dictionary.<number>>"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/modules/draggable-points.src.js",
										"line": 2259
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.DragDropPositionObject.prevdX",
								"description": "Delta of previous x position.",
								"kind": "member",
								"types": [
									"number",
									"undefined"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/modules/draggable-points.src.js",
										"line": 2263
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.DragDropPositionObject.prevdY",
								"description": "Delta of previous y position.",
								"kind": "member",
								"types": [
									"number",
									"undefined"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/modules/draggable-points.src.js",
										"line": 2267
									}
								]
							}
						}
					]
				},
				{
					"doclet": {
						"name": "Highcharts.DrilldownCallbackFunction",
						"description": "Gets fired when a drilldown point is clicked, before the new series is added.\nNote that when clicking a category label to trigger multiple series\ndrilldown, one `drilldown` event is triggered per point in the category.",
						"kind": "typedef",
						"types": [
							"function"
						],
						"parameters": {
							"this": {
								"description": "The chart where the event occurs.",
								"types": [
									"Highcharts.Chart"
								]
							},
							"e": {
								"description": "The drilldown event.",
								"types": [
									"Highcharts.DrilldownEventObject"
								]
							}
						},
						"return": {
							"types": [
								"void"
							]
						}
					},
					"meta": {
						"files": [
							{
								"path": "code/modules/drilldown.src.js",
								"line": 56
							}
						]
					}
				},
				{
					"doclet": {
						"name": "Highcharts.DrilldownEventObject",
						"description": "The event arguments when a drilldown point is clicked.",
						"kind": "interface"
					},
					"meta": {
						"files": [
							{
								"path": "code/modules/drilldown.src.js",
								"line": 69
							}
						]
					},
					"children": [
						{
							"doclet": {
								"name": "Highcharts.DrilldownEventObject.category",
								"description": "If a category label was clicked, which index.",
								"kind": "member",
								"types": [
									"number",
									"undefined"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/modules/drilldown.src.js",
										"line": 73
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.DrilldownEventObject.originalEvent",
								"description": "The original browser event (usually click) that triggered the drilldown.",
								"kind": "member",
								"types": [
									"global.Event",
									"undefined"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/modules/drilldown.src.js",
										"line": 77
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.DrilldownEventObject.point",
								"description": "The originating point.",
								"kind": "member",
								"types": [
									"Highcharts.Point"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/modules/drilldown.src.js",
										"line": 85
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.DrilldownEventObject.points",
								"description": "If a category label was clicked, this array holds all points corresponding to\nthe category. Otherwise it is set to false.",
								"kind": "member",
								"types": [
									"boolean",
									"Array.<Highcharts.Point>",
									"undefined"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/modules/drilldown.src.js",
										"line": 89
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.DrilldownEventObject.preventDefault",
								"description": "Prevents the default behaviour of the event.",
								"kind": "member",
								"types": [
									"function"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/modules/drilldown.src.js",
										"line": 81
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.DrilldownEventObject.seriesOptions",
								"description": "Options for the new series. If the event is utilized for async drilldown, the\nseriesOptions are not added, but rather loaded async.",
								"kind": "member",
								"types": [
									"Highcharts.SeriesOptionsType",
									"undefined"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/modules/drilldown.src.js",
										"line": 94
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.DrilldownEventObject.target",
								"description": "The event target.",
								"kind": "member",
								"types": [
									"Highcharts.Chart"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/modules/drilldown.src.js",
										"line": 99
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.DrilldownEventObject.type",
								"description": "The event type.",
								"kind": "member",
								"types": [
									"\"drilldown\""
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/modules/drilldown.src.js",
										"line": 103
									}
								]
							}
						}
					]
				},
				{
					"doclet": {
						"name": "Highcharts.DrillupAllCallbackFunction",
						"description": "This gets fired after all the series have been drilled up. This is especially\nusefull in a chart with multiple drilldown series.",
						"kind": "typedef",
						"types": [
							"function"
						],
						"parameters": {
							"this": {
								"description": "The chart where the event occurs.",
								"types": [
									"Highcharts.Chart"
								]
							},
							"e": {
								"description": "The final drillup event.",
								"types": [
									"Highcharts.DrillupAllEventObject"
								]
							}
						},
						"return": {
							"types": [
								"void"
							]
						}
					},
					"meta": {
						"files": [
							{
								"path": "code/modules/drilldown.src.js",
								"line": 108
							}
						]
					}
				},
				{
					"doclet": {
						"name": "Highcharts.DrillupAllEventObject",
						"description": "The event arguments when all the series have been drilled up.",
						"kind": "interface"
					},
					"meta": {
						"files": [
							{
								"path": "code/modules/drilldown.src.js",
								"line": 120
							}
						]
					},
					"children": [
						{
							"doclet": {
								"name": "Highcharts.DrillupAllEventObject.preventDefault",
								"description": "Prevents the default behaviour of the event.",
								"kind": "member",
								"types": [
									"function"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/modules/drilldown.src.js",
										"line": 124
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.DrillupAllEventObject.target",
								"description": "The event target.",
								"kind": "member",
								"types": [
									"Highcharts.Chart"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/modules/drilldown.src.js",
										"line": 128
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.DrillupAllEventObject.type",
								"description": "The event type.",
								"kind": "member",
								"types": [
									"\"drillupall\""
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/modules/drilldown.src.js",
										"line": 132
									}
								]
							}
						}
					]
				},
				{
					"doclet": {
						"name": "Highcharts.DrillupCallbackFunction",
						"description": "Gets fired when drilling up from a drilldown series.",
						"kind": "typedef",
						"types": [
							"function"
						],
						"parameters": {
							"this": {
								"description": "The chart where the event occurs.",
								"types": [
									"Highcharts.Chart"
								]
							},
							"e": {
								"description": "The drillup event.",
								"types": [
									"Highcharts.DrillupEventObject"
								]
							}
						},
						"return": {
							"types": [
								"void"
							]
						}
					},
					"meta": {
						"files": [
							{
								"path": "code/modules/drilldown.src.js",
								"line": 137
							}
						]
					}
				},
				{
					"doclet": {
						"name": "Highcharts.DrillupEventObject",
						"description": "The event arguments when drilling up from a drilldown series.",
						"kind": "interface"
					},
					"meta": {
						"files": [
							{
								"path": "code/modules/drilldown.src.js",
								"line": 148
							}
						]
					},
					"children": [
						{
							"doclet": {
								"name": "Highcharts.DrillupEventObject.preventDefault",
								"description": "Prevents the default behaviour of the event.",
								"kind": "member",
								"types": [
									"function"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/modules/drilldown.src.js",
										"line": 152
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.DrillupEventObject.seriesOptions",
								"description": "Options for the new series.",
								"kind": "member",
								"types": [
									"Highcharts.SeriesOptionsType",
									"undefined"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/modules/drilldown.src.js",
										"line": 156
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.DrillupEventObject.target",
								"description": "The event target.",
								"kind": "member",
								"types": [
									"Highcharts.Chart"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/modules/drilldown.src.js",
										"line": 160
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.DrillupEventObject.type",
								"description": "The event type.",
								"kind": "member",
								"types": [
									"\"drillup\""
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/modules/drilldown.src.js",
										"line": 164
									}
								]
							}
						}
					]
				},
				{
					"doclet": {
						"name": "Highcharts.Earcon",
						"description": "The Earcon class. Earcon objects represent a certain sound consisting of\none or more instruments playing a predefined sound.",
						"kind": "class"
					},
					"meta": {
						"files": [
							{
								"path": "code/modules/sonification.src.js",
								"line": 969
							}
						]
					},
					"children": [
						{
							"doclet": {
								"name": "Highcharts.Earcon.cancelSonify",
								"description": "Cancel any current sonification of the Earcon. Calls onEnd functions.",
								"kind": "function",
								"parameters": {
									"fadeOut": {
										"description": "Whether or not to fade out as we stop. If false, the earcon is\n       cancelled synchronously.",
										"isOptional": true,
										"types": [
											"boolean"
										]
									}
								},
								"return": {
									"types": [
										"void"
									]
								}
							},
							"meta": {
								"files": [
									{
										"path": "code/modules/sonification.src.js",
										"line": 1057
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.Earcon.constructor",
								"description": "The Earcon class. Earcon objects represent a certain sound consisting of\none or more instruments playing a predefined sound.",
								"kind": "constructor",
								"parameters": {
									"options": {
										"description": "Options for the Earcon instance.",
										"types": [
											"Highcharts.EarconOptionsObject"
										]
									}
								},
								"return": {
									"types": [
										"void"
									]
								}
							},
							"meta": {
								"files": [
									{
										"path": "code/modules/sonification.src.js",
										"line": 0
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.Earcon.sonify",
								"description": "Play the earcon, optionally overriding init options.",
								"kind": "function",
								"parameters": {
									"options": {
										"description": "Override existing options.",
										"types": [
											"Highcharts.EarconOptionsObject"
										]
									}
								},
								"return": {
									"types": [
										"void"
									]
								}
							},
							"meta": {
								"files": [
									{
										"path": "code/modules/sonification.src.js",
										"line": 994
									}
								]
							}
						}
					]
				},
				{
					"doclet": {
						"name": "Highcharts.EarconConfiguration",
						"description": "An Earcon configuration, specifying an Earcon and when to play it.",
						"kind": "interface"
					},
					"meta": {
						"files": [
							{
								"path": "code/modules/sonification.src.js",
								"line": 1446
							}
						]
					},
					"children": [
						{
							"doclet": {
								"name": "Highcharts.EarconConfiguration.condition",
								"description": "A function to determine whether or not to play this earcon on a point. The\nfunction is called for every point, receiving that point as parameter. It\nshould return either a boolean indicating whether or not to play the earcon,\nor a new Earcon instance - in which case the new Earcon will be played.",
								"kind": "member",
								"types": [
									"function",
									"undefined"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/modules/sonification.src.js",
										"line": 1460
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.EarconConfiguration.earcon",
								"description": "An Earcon instance.",
								"kind": "member",
								"types": [
									"Highcharts.Earcon"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/modules/sonification.src.js",
										"line": 1452
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.EarconConfiguration.onPoint",
								"description": "The ID of the point to play the Earcon on.",
								"kind": "member",
								"types": [
									"string",
									"undefined"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/modules/sonification.src.js",
										"line": 1456
									}
								]
							}
						}
					]
				},
				{
					"doclet": {
						"name": "Highcharts.EarconInstrument",
						"description": "Define an Instrument and the options for playing it.",
						"kind": "interface"
					},
					"meta": {
						"files": [
							{
								"path": "code/modules/sonification.src.js",
								"line": 921
							}
						]
					},
					"children": [
						{
							"doclet": {
								"name": "Highcharts.EarconInstrument.instrument",
								"description": "An instrument instance or the name of the instrument in the\nHighcharts.sonification.instruments map.",
								"kind": "member",
								"types": [
									"string",
									"Highcharts.Instrument"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/modules/sonification.src.js",
										"line": 927
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.EarconInstrument.playOptions",
								"description": "The options to pass to Instrument.play.",
								"kind": "member",
								"types": [
									"Highcharts.InstrumentPlayOptionsObject"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/modules/sonification.src.js",
										"line": 932
									}
								]
							}
						}
					]
				},
				{
					"doclet": {
						"name": "Highcharts.EarconOptionsObject",
						"description": "Options for an Earcon.",
						"kind": "interface"
					},
					"meta": {
						"files": [
							{
								"path": "code/modules/sonification.src.js",
								"line": 937
							}
						]
					},
					"children": [
						{
							"doclet": {
								"name": "Highcharts.EarconOptionsObject.id",
								"description": "The unique ID of the Earcon. Generated if not supplied.",
								"kind": "member",
								"types": [
									"string",
									"undefined"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/modules/sonification.src.js",
										"line": 947
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.EarconOptionsObject.instruments",
								"description": "The instruments and their options defining this earcon.",
								"kind": "member",
								"types": [
									"Array.<Highcharts.EarconInstrument>"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/modules/sonification.src.js",
										"line": 943
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.EarconOptionsObject.onEnd",
								"description": "Callback function to call when earcon has finished playing.",
								"kind": "member",
								"types": [
									"function",
									"undefined"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/modules/sonification.src.js",
										"line": 963
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.EarconOptionsObject.pan",
								"description": "Global panning of all instruments. Overrides all panning on individual\ninstruments. Can be a number between -1 and 1.",
								"kind": "member",
								"types": [
									"number",
									"undefined"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/modules/sonification.src.js",
										"line": 951
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.EarconOptionsObject.volume",
								"description": "Master volume for all instruments. Volume settings on individual instruments\ncan still be used for relative volume between the instruments. This setting\ndoes not affect volumes set by functions in individual instruments. Can be a\nnumber between 0 and 1. Defaults to 1.",
								"kind": "member",
								"types": [
									"number",
									"undefined"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/modules/sonification.src.js",
										"line": 956
									}
								]
							}
						}
					]
				},
				{
					"doclet": {
						"name": "Highcharts.EventCallbackFunction<T>",
						"description": "The function callback to execute when the event is fired. The `this` context\ncontains the instance, that fired the event.",
						"kind": "typedef",
						"types": [
							"function"
						],
						"parameters": {
							"this": {
								"types": [
									"T"
								]
							},
							"eventArguments": {
								"description": "Event arguments.",
								"isOptional": true,
								"types": [
									"Highcharts.Dictionary.<*>",
									"Event"
								]
							}
						},
						"return": {
							"types": [
								"boolean",
								"void"
							]
						}
					},
					"meta": {
						"files": [
							{
								"path": "code/highcharts.src.js",
								"line": 2018
							}
						]
					}
				},
				{
					"doclet": {
						"name": "Highcharts.EventOptionsObject",
						"description": "The event options for adding function callback.",
						"kind": "interface"
					},
					"meta": {
						"files": [
							{
								"path": "code/highcharts.src.js",
								"line": 2031
							}
						]
					},
					"children": [
						{
							"doclet": {
								"name": "Highcharts.EventOptionsObject.order",
								"description": "The order the event handler should be called. This opens for having one\nhandler be called before another, independent of in which order they were\nadded.",
								"kind": "member",
								"types": [
									"number"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 2035
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.EventOptionsObject.passive",
								"description": "Whether an event should be passive or not.\nWhen set to `true`, the function specified by listener will never call\n`preventDefault()`.",
								"kind": "member",
								"types": [
									"boolean"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 2041
									}
								]
							}
						}
					]
				},
				{
					"doclet": {
						"name": "Highcharts.ExportDataCallbackFunction",
						"description": "Function callback to execute while data rows are processed for exporting.\nThis allows the modification of data rows before processed into the final\nformat.",
						"kind": "typedef",
						"types": [
							"function"
						],
						"parameters": {
							"this": {
								"description": "Chart context where the event occured.",
								"types": [
									"Highcharts.Chart"
								]
							},
							"event": {
								"description": "Event object with data rows that can be modified.",
								"types": [
									"Highcharts.ExportDataEventObject"
								]
							}
						},
						"return": {
							"types": [
								"void"
							]
						}
					},
					"meta": {
						"files": [
							{
								"path": "code/modules/export-data.src.js",
								"line": 171
							}
						]
					}
				},
				{
					"doclet": {
						"name": "Highcharts.ExportDataEventObject",
						"description": "Contains information about the export data event.",
						"kind": "interface"
					},
					"meta": {
						"files": [
							{
								"path": "code/modules/export-data.src.js",
								"line": 185
							}
						]
					},
					"children": [
						{
							"doclet": {
								"name": "Highcharts.ExportDataEventObject.dataRows",
								"description": "Contains the data rows for the current export task and can be modified.",
								"kind": "member",
								"types": [
									"Array.<Array.<string>>"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/modules/export-data.src.js",
										"line": 189
									}
								]
							}
						}
					]
				},
				{
					"doclet": {
						"name": "Highcharts.ExportingAfterPrintCallbackFunction",
						"description": "Gets fired after a chart is printed through the context menu item or the\nChart.print method.",
						"kind": "typedef",
						"types": [
							"function"
						],
						"parameters": {
							"chart": {
								"description": "The chart on which the event occured.",
								"types": [
									"Highcharts.Chart"
								]
							},
							"event": {
								"description": "The event that occured.",
								"types": [
									"global.Event"
								]
							}
						},
						"return": {
							"types": [
								"void"
							]
						}
					},
					"meta": {
						"files": [
							{
								"path": "code/modules/exporting.src.js",
								"line": 2658
							}
						]
					}
				},
				{
					"doclet": {
						"name": "Highcharts.ExportingBeforePrintCallbackFunction",
						"description": "Gets fired before a chart is printed through the context menu item or the\nChart.print method.",
						"kind": "typedef",
						"types": [
							"function"
						],
						"parameters": {
							"chart": {
								"description": "The chart on which the event occured.",
								"types": [
									"Highcharts.Chart"
								]
							},
							"event": {
								"description": "The event that occured.",
								"types": [
									"global.Event"
								]
							}
						},
						"return": {
							"types": [
								"void"
							]
						}
					},
					"meta": {
						"files": [
							{
								"path": "code/modules/exporting.src.js",
								"line": 2670
							}
						]
					}
				},
				{
					"doclet": {
						"name": "Highcharts.ExportingErrorCallbackFunction",
						"description": "Function to call if the offline-exporting module fails to export a chart on\nthe client side.",
						"kind": "typedef",
						"types": [
							"function"
						],
						"parameters": {
							"options": {
								"description": "The exporting options.",
								"types": [
									"Highcharts.ExportingOptions"
								]
							},
							"err": {
								"description": "The error from the module.",
								"types": [
									"global.Error"
								]
							}
						},
						"return": {
							"types": [
								"void"
							]
						}
					},
					"meta": {
						"files": [
							{
								"path": "code/modules/exporting.src.js",
								"line": 2682
							}
						]
					}
				},
				{
					"doclet": {
						"name": "Highcharts.ExportingMenuObject",
						"description": "Definition for a menu item in the context menu.",
						"kind": "interface"
					},
					"meta": {
						"files": [
							{
								"path": "code/modules/exporting.src.js",
								"line": 2694
							}
						]
					},
					"children": [
						{
							"doclet": {
								"name": "Highcharts.ExportingMenuObject.onclick",
								"description": "The click handler for the menu item.",
								"kind": "member",
								"types": [
									"Highcharts.EventCallbackFunction.<Highcharts.Chart>",
									"undefined"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/modules/exporting.src.js",
										"line": 2708
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.ExportingMenuObject.separator",
								"description": "Indicates a separator line instead of an item.",
								"kind": "member",
								"types": [
									"boolean",
									"undefined"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/modules/exporting.src.js",
										"line": 2713
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.ExportingMenuObject.text",
								"description": "The text for the menu item.",
								"kind": "member",
								"types": [
									"string",
									"undefined"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/modules/exporting.src.js",
										"line": 2698
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.ExportingMenuObject.textKey",
								"description": "If internationalization is required, the key to a language string.",
								"kind": "member",
								"types": [
									"string",
									"undefined"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/modules/exporting.src.js",
										"line": 2703
									}
								]
							}
						}
					]
				},
				{
					"doclet": {
						"name": "Highcharts.ExportingMimeTypeValue",
						"description": "Possible MIME types for exporting.",
						"kind": "typedef",
						"types": [
							"\"image/png\"",
							"\"image/jpeg\"",
							"\"application/pdf\"",
							"\"image/svg+xml\""
						]
					},
					"meta": {
						"files": [
							{
								"path": "code/modules/exporting.src.js",
								"line": 2719
							}
						]
					}
				},
				{
					"doclet": {
						"name": "Highcharts.ExtremesObject",
						"description": "The returned object literal from the {@link Highcharts.Axis#getExtremes}\nfunction.",
						"kind": "interface"
					},
					"meta": {
						"files": [
							{
								"path": "code/highcharts.src.js",
								"line": 22066
							}
						]
					},
					"children": [
						{
							"doclet": {
								"name": "Highcharts.ExtremesObject.dataMax",
								"description": "The maximum value of the axis' associated series.",
								"kind": "member",
								"types": [
									"number"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 22071
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.ExtremesObject.dataMin",
								"description": "The minimum value of the axis' associated series.",
								"kind": "member",
								"types": [
									"number"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 22075
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.ExtremesObject.max",
								"description": "The maximum axis value, either automatic or set manually. If the `max` option\nis not set, `maxPadding` is 0 and `endOnTick` is false, this value will be\nthe same as `dataMax`.",
								"kind": "member",
								"types": [
									"number"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 22079
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.ExtremesObject.min",
								"description": "The minimum axis value, either automatic or set manually. If the `min` option\nis not set, `minPadding` is 0 and `startOnTick` is false, this value will be\nthe same as `dataMin`.",
								"kind": "member",
								"types": [
									"number"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 22085
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.ExtremesObject.userMax",
								"description": "The user defined maximum, either from the `max` option or from a zoom or\n`setExtremes` action.",
								"kind": "member",
								"types": [
									"number"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 22091
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.ExtremesObject.userMin",
								"description": "The user defined minimum, either from the `min` option or from a zoom or\n`setExtremes` action.",
								"kind": "member",
								"types": [
									"number"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 22096
									}
								]
							}
						}
					]
				},
				{
					"doclet": {
						"name": "Highcharts.FlagsShapeValue",
						"description": "",
						"kind": "typedef",
						"types": [
							"\"circlepin\"",
							"\"flag\"",
							"\"squarepin\""
						]
					},
					"meta": {
						"files": [
							{
								"path": "code/modules/stock.src.js",
								"line": 4794
							}
						]
					}
				},
				{
					"doclet": {
						"name": "Highcharts.FontMetricsObject",
						"description": "The font metrics.",
						"kind": "interface"
					},
					"meta": {
						"files": [
							{
								"path": "code/highcharts.src.js",
								"line": 14028
							}
						]
					},
					"children": [
						{
							"doclet": {
								"name": "Highcharts.FontMetricsObject.b",
								"description": "The baseline relative to the top of the box.",
								"kind": "member",
								"types": [
									"number"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 14032
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.FontMetricsObject.f",
								"description": "The font size.",
								"kind": "member",
								"types": [
									"number"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 14037
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.FontMetricsObject.h",
								"description": "The line height.",
								"kind": "member",
								"types": [
									"number"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 14042
									}
								]
							}
						}
					]
				},
				{
					"doclet": {
						"name": "Highcharts.FormatterCallbackFunction<T>",
						"description": "Formats data as a string. Usually the data is accessible throught the `this`\nkeyword.",
						"kind": "typedef",
						"types": [
							"function"
						],
						"parameters": {
							"this": {
								"description": "Context to format",
								"types": [
									"T"
								]
							}
						},
						"return": {
							"types": [
								"string"
							],
							"description": "Formatted text"
						}
					},
					"meta": {
						"files": [
							{
								"path": "code/highcharts.src.js",
								"line": 2048
							}
						]
					}
				},
				{
					"doclet": {
						"name": "Highcharts.Fullscreen",
						"description": "Handles displaying chart's container in the fullscreen mode.\n\n**Note**: Fullscreen is not supported on iPhone due to iOS limitations.",
						"kind": "class"
					},
					"meta": {
						"files": [
							{
								"path": "code/modules/exporting.src.js",
								"line": 48
							},
							{
								"path": "code/modules/full-screen.src.js",
								"line": 49
							}
						]
					},
					"children": [
						{
							"doclet": {
								"name": "Highcharts.Fullscreen.chart",
								"description": "Chart managed by the fullscreen controller.",
								"kind": "member",
								"types": [
									"Highcharts.Chart"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/modules/exporting.src.js",
										"line": 65
									},
									{
										"path": "code/modules/full-screen.src.js",
										"line": 66
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.Fullscreen.close",
								"description": "Stops displaying the chart in fullscreen mode.\nExporting module required.",
								"kind": "function",
								"return": {
									"types": [
										"void"
									]
								}
							},
							"meta": {
								"files": [
									{
										"path": "code/modules/exporting.src.js",
										"line": 118
									},
									{
										"path": "code/modules/full-screen.src.js",
										"line": 119
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.Fullscreen.isOpen",
								"description": "The flag is set to `true` when the chart is displayed in\nthe fullscreen mode.",
								"kind": "member",
								"types": [
									"boolean",
									"undefined"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/modules/exporting.src.js",
										"line": 71
									},
									{
										"path": "code/modules/full-screen.src.js",
										"line": 72
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.Fullscreen.open",
								"description": "Displays the chart in fullscreen mode.\nWhen fired customly by user before exporting context button is created,\nbutton's text will not be replaced - it's on the user side.\nExporting module required.",
								"kind": "function",
								"return": {
									"types": [
										"void"
									]
								}
							},
							"meta": {
								"files": [
									{
										"path": "code/modules/exporting.src.js",
										"line": 152
									},
									{
										"path": "code/modules/full-screen.src.js",
										"line": 153
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.Fullscreen.toggle",
								"description": "Toggles displaying the chart in fullscreen mode.\nBy default, when the exporting module is enabled, a context button with\na drop down menu in the upper right corner accesses this function.\nExporting module required.",
								"kind": "function",
								"return": {
									"types": [
										"void"
									]
								}
							},
							"meta": {
								"files": [
									{
										"path": "code/modules/exporting.src.js",
										"line": 240
									},
									{
										"path": "code/modules/full-screen.src.js",
										"line": 241
									}
								]
							}
						}
					]
				},
				{
					"doclet": {
						"name": "Highcharts.GanttChart",
						"description": "Gantt-optimized chart. Use {@link Highcharts.Chart|Chart} for common charts.",
						"kind": "class",
						"types": [
							"Highcharts.Chart"
						]
					},
					"meta": {
						"files": [
							{
								"path": "code/modules/gantt.src.js",
								"line": 7546
							}
						]
					},
					"children": [
						{
							"doclet": {
								"name": "Highcharts.GanttChart.init",
								"description": "Initializes the chart. The constructor's arguments are passed on\ndirectly.",
								"kind": "function",
								"fires": [
									"Highcharts.GanttChart#init",
									"Highcharts.GanttChart#afterInit"
								],
								"parameters": {
									"userOptions": {
										"description": "Custom options.",
										"types": [
											"Highcharts.Options"
										]
									},
									"callback": {
										"description": "Function to run when the chart has loaded and and all external\n       images are loaded.",
										"isOptional": true,
										"types": [
											"function"
										]
									}
								},
								"return": {
									"types": [
										"void"
									]
								}
							},
							"meta": {
								"files": [
									{
										"path": "code/modules/gantt.src.js",
										"line": 7560
									}
								]
							}
						}
					]
				},
				{
					"doclet": {
						"name": "Highcharts.GeoJSON",
						"description": "Represents the loose structure of a geographic JSON file.",
						"kind": "interface"
					},
					"meta": {
						"files": [
							{
								"path": "code/modules/map.src.js",
								"line": 7924
							}
						]
					},
					"children": [
						{
							"doclet": {
								"name": "Highcharts.GeoJSON.copyright",
								"description": "Full copyright note of the geographic data.",
								"kind": "member",
								"types": [
									"string",
									"undefined"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/modules/map.src.js",
										"line": 7928
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.GeoJSON.copyrightShort",
								"description": "Short copyright note of the geographic data suitable for watermarks.",
								"kind": "member",
								"types": [
									"string",
									"undefined"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/modules/map.src.js",
										"line": 7932
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.GeoJSON.crs",
								"description": "Additional meta information based on the coordinate reference system.",
								"kind": "member",
								"types": [
									"Highcharts.Dictionary.<any>",
									"undefined"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/modules/map.src.js",
										"line": 7936
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.GeoJSON.features",
								"description": "Data sets of geographic features.",
								"kind": "member",
								"types": [
									"Array.<Highcharts.GeoJSONFeature>"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/modules/map.src.js",
										"line": 7940
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.GeoJSON.hc-transform",
								"description": "Map projections and transformations to be used when calculating between\nlat/lon and chart values. Required for lat/lon support on maps. Allows\nresizing, rotating, and moving portions of a map within its projected\ncoordinate system while still retaining lat/lon support. If using lat/lon\non a portion of the map that does not match a `hitZone`, the definition with\nthe key `default` is used.",
								"kind": "member",
								"types": [
									"Highcharts.Dictionary.<Highcharts.GeoJSONTranslation>",
									"undefined"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/modules/map.src.js",
										"line": 7944
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.GeoJSON.title",
								"description": "Title of the geographic data.",
								"kind": "member",
								"types": [
									"string",
									"undefined"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/modules/map.src.js",
										"line": 7953
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.GeoJSON.type",
								"description": "Type of the geographic data. Type of an optimized map collection is\n`FeatureCollection`.",
								"kind": "member",
								"types": [
									"string",
									"undefined"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/modules/map.src.js",
										"line": 7957
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.GeoJSON.version",
								"description": "Version of the geographic data.",
								"kind": "member",
								"types": [
									"string",
									"undefined"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/modules/map.src.js",
										"line": 7962
									}
								]
							}
						}
					]
				},
				{
					"doclet": {
						"name": "Highcharts.GeoJSONFeature",
						"description": "Data set of a geographic feature.",
						"kind": "interface",
						"types": [
							"Highcharts.Dictionary<*>"
						]
					},
					"meta": {
						"files": [
							{
								"path": "code/modules/map.src.js",
								"line": 7967
							}
						]
					},
					"children": [
						{
							"doclet": {
								"name": "Highcharts.GeoJSONFeature.type",
								"description": "Data type of the geographic feature.",
								"kind": "member",
								"types": [
									"string"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/modules/map.src.js",
										"line": 7971
									}
								]
							}
						}
					]
				},
				{
					"doclet": {
						"name": "Highcharts.GeoJSONTranslation",
						"description": "Describes the map projection and transformations applied to a portion of\na map.",
						"kind": "interface"
					},
					"meta": {
						"files": [
							{
								"path": "code/modules/map.src.js",
								"line": 7976
							}
						]
					},
					"children": [
						{
							"doclet": {
								"name": "Highcharts.GeoJSONTranslation.crs",
								"description": "The coordinate reference system used to generate this portion of the map.",
								"kind": "member",
								"types": [
									"string"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/modules/map.src.js",
										"line": 7980
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.GeoJSONTranslation.hitZone",
								"description": "Define the portion of the map that this defintion applies to. Defined as a\nGeoJSON polygon feature object, with `type` and `coordinates` properties.",
								"kind": "member",
								"types": [
									"Highcharts.Dictionary.<*>",
									"undefined"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/modules/map.src.js",
										"line": 7984
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.GeoJSONTranslation.jsonmarginX",
								"description": "Property for internal use for maps generated by Highsoft.",
								"kind": "member",
								"types": [
									"number",
									"undefined"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/modules/map.src.js",
										"line": 7989
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.GeoJSONTranslation.jsonmarginY",
								"description": "Property for internal use for maps generated by Highsoft.",
								"kind": "member",
								"types": [
									"number",
									"undefined"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/modules/map.src.js",
										"line": 7993
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.GeoJSONTranslation.jsonres",
								"description": "Property for internal use for maps generated by Highsoft.",
								"kind": "member",
								"types": [
									"number",
									"undefined"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/modules/map.src.js",
										"line": 7997
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.GeoJSONTranslation.rotation",
								"description": "Specifies clockwise rotation of the coordinates after the projection, but\nbefore scaling and panning. Defined in radians, relative to the coordinate\nsystem origin.",
								"kind": "member",
								"types": [
									"number",
									"undefined"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/modules/map.src.js",
										"line": 8001
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.GeoJSONTranslation.scale",
								"description": "The scaling factor applied to the projected coordinates.",
								"kind": "member",
								"types": [
									"number",
									"undefined"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/modules/map.src.js",
										"line": 8007
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.GeoJSONTranslation.xoffset",
								"description": "Property for internal use for maps generated by Highsoft.",
								"kind": "member",
								"types": [
									"number",
									"undefined"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/modules/map.src.js",
										"line": 8011
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.GeoJSONTranslation.xpan",
								"description": "X offset of projected coordinates after scaling.",
								"kind": "member",
								"types": [
									"number",
									"undefined"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/modules/map.src.js",
										"line": 8015
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.GeoJSONTranslation.yoffset",
								"description": "Property for internal use for maps generated by Highsoft.",
								"kind": "member",
								"types": [
									"number",
									"undefined"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/modules/map.src.js",
										"line": 8019
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.GeoJSONTranslation.ypan",
								"description": "Y offset of projected coordinates after scaling.",
								"kind": "member",
								"types": [
									"number",
									"undefined"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/modules/map.src.js",
										"line": 8023
									}
								]
							}
						}
					]
				},
				{
					"doclet": {
						"name": "Highcharts.Globals",
						"description": "Shared Highcharts properties.",
						"kind": "member"
					},
					"meta": {
						"files": [
							{
								"path": "code/highcharts.src.js",
								"line": 67
							}
						]
					}
				},
				{
					"doclet": {
						"name": "Highcharts.GradientColorObject",
						"description": "Gradient options instead of a solid color.",
						"kind": "interface"
					},
					"meta": {
						"files": [
							{
								"path": "code/highcharts.src.js",
								"line": 3673
							}
						]
					},
					"children": [
						{
							"doclet": {
								"name": "Highcharts.GradientColorObject.linearGradient",
								"description": "Holds an object that defines the start position and the end position relative\nto the shape.",
								"kind": "member",
								"types": [
									"Highcharts.LinearGradientColorObject",
									"undefined"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 3688
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.GradientColorObject.radialGradient",
								"description": "Holds an object that defines the center position and the radius.",
								"kind": "member",
								"types": [
									"Highcharts.RadialGradientColorObject",
									"undefined"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 3693
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.GradientColorObject.stops",
								"description": "The first item in each tuple is the position in the gradient, where 0 is the\nstart of the gradient and 1 is the end of the gradient. Multiple stops can be\napplied. The second item is the color for each stop. This color can also be\ngiven in the rgba format.",
								"kind": "member",
								"types": [
									"Array.<Highcharts.GradientColorStopObject>"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 3697
									}
								]
							}
						}
					]
				},
				{
					"doclet": {
						"name": "Highcharts.GradientColorStopObject",
						"description": "Color stop tuple.",
						"kind": "interface",
						"see": [
							"Highcharts.GradientColorObject"
						]
					},
					"meta": {
						"files": [
							{
								"path": "code/highcharts.src.js",
								"line": 3705
							}
						]
					},
					"children": [
						{
							"doclet": {
								"name": "Highcharts.GradientColorStopObject.0",
								"description": "",
								"kind": "member",
								"types": [
									"number"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 3711
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.GradientColorStopObject.1",
								"description": "",
								"kind": "member",
								"types": [
									"Highcharts.ColorString"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 3714
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.GradientColorStopObject.color",
								"description": "",
								"kind": "member",
								"types": [
									"Highcharts.Color",
									"undefined"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 3717
									}
								]
							}
						}
					]
				},
				{
					"doclet": {
						"name": "Highcharts.HTMLAttributes",
						"description": "An object of key-value pairs for HTML attributes.",
						"kind": "typedef",
						"types": [
							"Highcharts.Dictionary.<(boolean|number|string|function())>"
						]
					},
					"meta": {
						"files": [
							{
								"path": "code/highcharts.src.js",
								"line": 2060
							}
						]
					}
				},
				{
					"doclet": {
						"name": "Highcharts.HTMLDOMElement",
						"description": "An HTML DOM element. The type is a reference to the regular HTMLElement in\nthe global scope.",
						"kind": "typedef",
						"see": [
							"https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement"
						],
						"types": [
							"global.HTMLElement"
						]
					},
					"meta": {
						"files": [
							{
								"path": "code/highcharts.src.js",
								"line": 2065
							}
						]
					}
				},
				{
					"doclet": {
						"name": "Highcharts.Instrument",
						"description": "The Instrument class. Instrument objects represent an instrument capable of\nplaying a certain pitch for a specified duration.",
						"kind": "class"
					},
					"meta": {
						"files": [
							{
								"path": "code/modules/sonification.src.js",
								"line": 155
							}
						]
					},
					"children": [
						{
							"doclet": {
								"name": "Highcharts.Instrument.constructor",
								"description": "The Instrument class. Instrument objects represent an instrument capable of\nplaying a certain pitch for a specified duration.",
								"kind": "constructor",
								"parameters": {
									"options": {
										"description": "Options for the instrument instance.",
										"types": [
											"Highcharts.InstrumentOptionsObject"
										]
									}
								},
								"return": {
									"types": [
										"void"
									]
								}
							},
							"meta": {
								"files": [
									{
										"path": "code/modules/sonification.src.js",
										"line": 0
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.Instrument.copy",
								"description": "Return a copy of an instrument. Only one instrument instance can play at a\ntime, so use this to get a new copy of the instrument that can play alongside\nit. The new instrument copy will receive a new ID unless one is supplied in\noptions.",
								"kind": "function",
								"parameters": {
									"options": {
										"description": "Options to merge in for the copy.",
										"isOptional": true,
										"types": [
											"Highcharts.InstrumentOptionsObject"
										]
									}
								},
								"return": {
									"types": [
										"Highcharts.Instrument"
									],
									"description": "A new Instrument instance with the same options."
								}
							},
							"meta": {
								"files": [
									{
										"path": "code/modules/sonification.src.js",
										"line": 208
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.Instrument.mute",
								"description": "Mute an instrument that is playing. If the instrument is not currently\nplaying, this function does nothing.",
								"kind": "function",
								"return": {
									"types": [
										"void"
									]
								}
							},
							"meta": {
								"files": [
									{
										"path": "code/modules/sonification.src.js",
										"line": 513
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.Instrument.play",
								"description": "Play the instrument according to options.",
								"kind": "function",
								"parameters": {
									"options": {
										"description": "Options for the playback of the instrument.",
										"types": [
											"Highcharts.InstrumentPlayOptionsObject"
										]
									}
								},
								"return": {
									"types": [
										"void"
									]
								}
							},
							"meta": {
								"files": [
									{
										"path": "code/modules/sonification.src.js",
										"line": 401
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.Instrument.stop",
								"description": "Stop the instrument playing.",
								"kind": "function",
								"parameters": {
									"immediately": {
										"description": "Whether to do the stop immediately or fade out.",
										"types": [
											"boolean"
										]
									},
									"onStopped": {
										"description": "Callback function to be called when the stop is completed.",
										"isOptional": true,
										"types": [
											"function"
										]
									},
									"callbackData": {
										"description": "Data to send to the onEnd callback functions.",
										"isOptional": true,
										"types": [
											"*"
										]
									}
								},
								"return": {
									"types": [
										"void"
									]
								}
							},
							"meta": {
								"files": [
									{
										"path": "code/modules/sonification.src.js",
										"line": 522
									}
								]
							}
						}
					]
				},
				{
					"doclet": {
						"name": "Highcharts.InstrumentOptionsObject",
						"description": "A set of options for the Instrument class.",
						"kind": "interface"
					},
					"meta": {
						"files": [
							{
								"path": "code/modules/sonification.src.js",
								"line": 47
							}
						]
					},
					"children": [
						{
							"doclet": {
								"name": "Highcharts.InstrumentOptionsObject.allowedFrequencies",
								"description": "A list of allowed frequencies for this instrument. If trying to play a\nfrequency not on this list, the closest frequency will be used. Set to `null`\nto allow all frequencies to be used. Defaults to `null`.",
								"kind": "member",
								"types": [
									"Array.<number>",
									"undefined"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/modules/sonification.src.js",
										"line": 73
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.InstrumentOptionsObject.id",
								"description": "The unique ID of the instrument. Generated if not supplied.",
								"kind": "member",
								"types": [
									"string",
									"undefined"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/modules/sonification.src.js",
										"line": 58
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.InstrumentOptionsObject.oscillator",
								"description": "Options specific to oscillator instruments.",
								"kind": "member",
								"types": [
									"Highcharts.OscillatorOptionsObject",
									"undefined"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/modules/sonification.src.js",
										"line": 79
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.InstrumentOptionsObject.playCallbackInterval",
								"description": "When using functions to determine frequency or other parameters during\nplayback, this options specifies how often to call the callback functions.\nNumber given in milliseconds. Defaults to 20.",
								"kind": "member",
								"types": [
									"number",
									"undefined"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/modules/sonification.src.js",
										"line": 67
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.InstrumentOptionsObject.type",
								"description": "The type of instrument. Currently only `oscillator` is supported. Defaults\nto `oscillator`.",
								"kind": "member",
								"types": [
									"string",
									"undefined"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/modules/sonification.src.js",
										"line": 53
									}
								]
							}
						}
					]
				},
				{
					"doclet": {
						"name": "Highcharts.InstrumentPlayOptionsObject",
						"description": "Options for playing an instrument.",
						"kind": "interface"
					},
					"meta": {
						"files": [
							{
								"path": "code/modules/sonification.src.js",
								"line": 84
							}
						]
					},
					"children": [
						{
							"doclet": {
								"name": "Highcharts.InstrumentPlayOptionsObject.duration",
								"description": "The duration of the note in milliseconds.",
								"kind": "member",
								"types": [
									"number"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/modules/sonification.src.js",
										"line": 98
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.InstrumentPlayOptionsObject.frequency",
								"description": "The frequency of the note to play. Can be a fixed number, or a function. The\nfunction receives one argument: the relative time of the note playing (0\nbeing the start, and 1 being the end of the note). It should return the\nfrequency number for each point in time. The poll interval of this function\nis specified by the Instrument.playCallbackInterval option.",
								"kind": "member",
								"types": [
									"number",
									"function"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/modules/sonification.src.js",
										"line": 90
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.InstrumentPlayOptionsObject.masterVolume",
								"description": "The master volume multiplier to apply to the instrument, regardless of other\nvolume changes. Defaults to 1.",
								"kind": "member",
								"types": [
									"number",
									"undefined"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/modules/sonification.src.js",
										"line": 62
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.InstrumentPlayOptionsObject.maxFrequency",
								"description": "The maximum frequency to allow. If the instrument has a set of allowed\nfrequencies, the closest frequency is used by default. Use this option to\nstop too high frequencies from being used.",
								"kind": "member",
								"types": [
									"number",
									"undefined"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/modules/sonification.src.js",
										"line": 108
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.InstrumentPlayOptionsObject.minFrequency",
								"description": "The minimum frequency to allow. If the instrument has a set of allowed\nfrequencies, the closest frequency is used by default. Use this option to\nstop too low frequencies from being used.",
								"kind": "member",
								"types": [
									"number",
									"undefined"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/modules/sonification.src.js",
										"line": 102
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.InstrumentPlayOptionsObject.onEnd",
								"description": "Callback function to be called when the play is completed.",
								"kind": "member",
								"types": [
									"function",
									"undefined"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/modules/sonification.src.js",
										"line": 131
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.InstrumentPlayOptionsObject.pan",
								"description": "The panning of the instrument. Can be a fixed number between -1 and 1, or a\nfunction. The function receives one argument: the relative time of the note\nplaying (0 being the start, and 1 being the end of the note). It should\nreturn the panning value for each point in time. The poll interval of this\nfunction is specified by the Instrument.playCallbackInterval option.\nDefaults to 0.",
								"kind": "member",
								"types": [
									"number",
									"function",
									"undefined"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/modules/sonification.src.js",
										"line": 122
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.InstrumentPlayOptionsObject.volume",
								"description": "The volume of the instrument. Can be a fixed number between 0 and 1, or a\nfunction. The function receives one argument: the relative time of the note\nplaying (0 being the start, and 1 being the end of the note). It should\nreturn the volume for each point in time. The poll interval of this function\nis specified by the Instrument.playCallbackInterval option. Defaults to 1.",
								"kind": "member",
								"types": [
									"number",
									"function",
									"undefined"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/modules/sonification.src.js",
										"line": 114
									}
								]
							}
						}
					]
				},
				{
					"doclet": {
						"name": "Highcharts.KeyboardNavigationHandler",
						"description": "Define a keyboard navigation handler for use with a\nHighcharts.AccessibilityComponent instance. This functions as an abstraction\nlayer for keyboard navigation, and defines a map of keyCodes to handler\nfunctions.",
						"kind": "class"
					},
					"meta": {
						"files": [
							{
								"path": "code/modules/accessibility.src.js",
								"line": 585
							}
						]
					},
					"children": [
						{
							"doclet": {
								"name": "Highcharts.KeyboardNavigationHandler.constructor",
								"description": "Define a keyboard navigation handler for use with a\nHighcharts.AccessibilityComponent instance. This functions as an abstraction\nlayer for keyboard navigation, and defines a map of keyCodes to handler\nfunctions.",
								"kind": "constructor",
								"parameters": {
									"chart": {
										"description": "The chart this module should act on.",
										"types": [
											"Highcharts.Chart"
										]
									},
									"options": {
										"description": "Options for the keyboard navigation handler.",
										"types": [
											"Highcharts.KeyboardNavigationHandlerOptionsObject"
										]
									}
								},
								"return": {
									"types": [
										"void"
									]
								}
							},
							"meta": {
								"files": [
									{
										"path": "code/modules/accessibility.src.js",
										"line": 0
									}
								]
							}
						}
					]
				},
				{
					"doclet": {
						"name": "Highcharts.KeyboardNavigationHandlerOptionsObject",
						"description": "Options for the keyboard navigation handler.",
						"kind": "interface"
					},
					"meta": {
						"files": [
							{
								"path": "code/modules/accessibility.src.js",
								"line": 559
							}
						]
					},
					"children": [
						{
							"doclet": {
								"name": "Highcharts.KeyboardNavigationHandlerOptionsObject.init",
								"description": "Function to run on initialization of module.",
								"kind": "member",
								"types": [
									"function"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/modules/accessibility.src.js",
										"line": 569
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.KeyboardNavigationHandlerOptionsObject.keyCodeMap",
								"description": "An array containing pairs of an array of keycodes, mapped to a handler\nfunction. When the keycode is received, the handler is called with the\nkeycode as parameter.",
								"kind": "member",
								"types": [
									"Array.<Array.<Array.<number>, function()>>"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/modules/accessibility.src.js",
										"line": 563
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.KeyboardNavigationHandlerOptionsObject.terminate",
								"description": "Function to run before moving to next/prev module. Receives moving direction\nas parameter: +1 for next, -1 for previous.",
								"kind": "member",
								"types": [
									"function",
									"undefined"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/modules/accessibility.src.js",
										"line": 573
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.KeyboardNavigationHandlerOptionsObject.validate",
								"description": "Function to run to validate module. Should return false if module should not\nrun, true otherwise. Receives chart as parameter.",
								"kind": "member",
								"types": [
									"function",
									"undefined"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/modules/accessibility.src.js",
										"line": 578
									}
								]
							}
						}
					]
				},
				{
					"doclet": {
						"name": "Highcharts.LabelIntersectBoxObject",
						"description": "Containing the position of a box that should be avoided by labels.",
						"kind": "interface"
					},
					"meta": {
						"files": [
							{
								"path": "code/modules/series-label.src.js",
								"line": 49
							}
						]
					},
					"children": [
						{
							"doclet": {
								"name": "Highcharts.LabelIntersectBoxObject.bottom",
								"description": "",
								"kind": "member",
								"types": [
									"number"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/modules/series-label.src.js",
										"line": 53
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.LabelIntersectBoxObject.left",
								"description": "",
								"kind": "member",
								"types": [
									"number"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/modules/series-label.src.js",
										"line": 56
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.LabelIntersectBoxObject.right",
								"description": "",
								"kind": "member",
								"types": [
									"number"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/modules/series-label.src.js",
										"line": 59
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.LabelIntersectBoxObject.top",
								"description": "",
								"kind": "member",
								"types": [
									"number"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/modules/series-label.src.js",
										"line": 62
									}
								]
							}
						}
					]
				},
				{
					"doclet": {
						"name": "Highcharts.Legend",
						"description": "The overview of the chart's series. The legend object is instanciated\ninternally in the chart constructor, and is available from the `chart.legend`\nproperty. Each chart has only one legend.",
						"kind": "class"
					},
					"meta": {
						"files": [
							{
								"path": "code/highcharts.src.js",
								"line": 28479
							}
						]
					},
					"children": [
						{
							"doclet": {
								"name": "Highcharts.Legend.allItems",
								"description": "All items for the legend, which is an array of series for most series\nand an array of points for pie series and its derivatives.",
								"kind": "member",
								"isReadOnly": true,
								"types": [
									"Array.<(Highcharts.Point|Highcharts.Series)>"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 29252
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.Legend.box",
								"description": "SVG element of the legend box.",
								"kind": "member",
								"isReadOnly": true,
								"types": [
									"Highcharts.SVGElement"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 29279
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.Legend.chart",
								"description": "Chart of this legend.",
								"kind": "member",
								"isReadOnly": true,
								"types": [
									"Highcharts.Chart"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 28555
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.Legend.constructor",
								"description": "The overview of the chart's series. The legend object is instanciated\ninternally in the chart constructor, and is available from the `chart.legend`\nproperty. Each chart has only one legend.",
								"kind": "constructor",
								"parameters": {
									"chart": {
										"description": "The chart instance.",
										"types": [
											"Highcharts.Chart"
										]
									},
									"options": {
										"description": "Legend options.",
										"types": [
											"Highcharts.LegendOptions"
										]
									}
								},
								"return": {
									"types": [
										"void"
									]
								}
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 0
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.Legend.group",
								"description": "SVG group of the legend.",
								"kind": "member",
								"isReadOnly": true,
								"types": [
									"Highcharts.SVGElement"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 29225
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.Legend.options",
								"description": "Legend options.",
								"kind": "member",
								"isReadOnly": true,
								"types": [
									"Highcharts.LegendOptions"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 28589
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.Legend.setText",
								"description": "Set the legend item text.",
								"kind": "function",
								"parameters": {
									"item": {
										"description": "The item for which to update the text in the legend.",
										"types": [
											"Highcharts.Point",
											"Highcharts.Series"
										]
									}
								},
								"return": {
									"types": [
										"void"
									]
								}
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 28874
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.Legend.title",
								"description": "SVG element of the legend title.",
								"kind": "member",
								"isReadOnly": true,
								"types": [
									"Highcharts.SVGElement"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 28847
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.Legend.update",
								"description": "Update the legend with new options. Equivalent to running `chart.update`\nwith a legend configuration option.",
								"kind": "function",
								"fires": [
									"Highcharts.Legends#afterUpdate"
								],
								"parameters": {
									"options": {
										"description": "Legend options.",
										"types": [
											"Highcharts.LegendOptions"
										]
									},
									"redraw": {
										"description": "Whether to redraw the chart after the axis is altered. If doing more\noperations on the chart, it is a good idea to set redraw to false and\ncall {@link Chart#redraw} after. Whether to redraw the chart.",
										"isOptional": true,
										"types": [
											"boolean"
										]
									}
								},
								"return": {
									"types": [
										"void"
									]
								}
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 28610
									}
								]
							}
						}
					]
				},
				{
					"doclet": {
						"name": "Highcharts.LinearGradientColorObject",
						"description": "Defines the start position and the end position for a gradient relative\nto the shape. Start position (x1, y1) and end position (x2, y2) are relative\nto the shape, where 0 means top/left and 1 is bottom/right.",
						"kind": "interface"
					},
					"meta": {
						"files": [
							{
								"path": "code/highcharts.src.js",
								"line": 3721
							}
						]
					},
					"children": [
						{
							"doclet": {
								"name": "Highcharts.LinearGradientColorObject.x1",
								"description": "Start horizontal position of the gradient. Float ranges 0-1.",
								"kind": "member",
								"types": [
									"number"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 3727
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.LinearGradientColorObject.x2",
								"description": "End horizontal position of the gradient. Float ranges 0-1.",
								"kind": "member",
								"types": [
									"number"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 3731
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.LinearGradientColorObject.y1",
								"description": "Start vertical position of the gradient. Float ranges 0-1.",
								"kind": "member",
								"types": [
									"number"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 3735
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.LinearGradientColorObject.y2",
								"description": "End vertical position of the gradient. Float ranges 0-1.",
								"kind": "member",
								"types": [
									"number"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 3739
									}
								]
							}
						}
					]
				},
				{
					"doclet": {
						"name": "Highcharts.MapChart",
						"description": "Map-optimized chart. Use {@link Highcharts.Chart|Chart} for common charts.",
						"kind": "class",
						"types": [
							"Highcharts.Chart"
						]
					},
					"meta": {
						"files": [
							{
								"path": "code/modules/map.src.js",
								"line": 2529
							}
						]
					},
					"children": [
						{
							"doclet": {
								"name": "Highcharts.MapChart.init",
								"description": "Initializes the chart. The constructor's arguments are passed on\ndirectly.",
								"kind": "function",
								"fires": [
									"Highcharts.MapChart#init",
									"Highcharts.MapChart#afterInit"
								],
								"parameters": {
									"userOptions": {
										"description": "Custom options.",
										"types": [
											"Highcharts.Options"
										]
									},
									"callback": {
										"description": "Function to run when the chart has loaded and and all external\n       images are loaded.",
										"isOptional": true,
										"types": [
											"function"
										]
									}
								},
								"return": {
									"types": [
										"void"
									]
								}
							},
							"meta": {
								"files": [
									{
										"path": "code/modules/map.src.js",
										"line": 2543
									}
								]
							}
						}
					]
				},
				{
					"doclet": {
						"name": "Highcharts.MapCoordinateObject",
						"description": "Result object of a map transformation.",
						"kind": "interface"
					},
					"meta": {
						"files": [
							{
								"path": "code/modules/map.src.js",
								"line": 8028
							}
						]
					},
					"children": [
						{
							"doclet": {
								"name": "Highcharts.MapCoordinateObject.x",
								"description": "X coordinate on the map.",
								"kind": "member",
								"types": [
									"number"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/modules/map.src.js",
										"line": 8032
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.MapCoordinateObject.y",
								"description": "Y coordinate on the map.",
								"kind": "member",
								"types": [
									"number",
									"null"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/modules/map.src.js",
										"line": 8036
									}
								]
							}
						}
					]
				},
				{
					"doclet": {
						"name": "Highcharts.MapLatLonObject",
						"description": "A latitude/longitude object.",
						"kind": "interface"
					},
					"meta": {
						"files": [
							{
								"path": "code/modules/map.src.js",
								"line": 8041
							}
						]
					},
					"children": [
						{
							"doclet": {
								"name": "Highcharts.MapLatLonObject.lat",
								"description": "The latitude.",
								"kind": "member",
								"types": [
									"number"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/modules/map.src.js",
										"line": 8045
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.MapLatLonObject.lon",
								"description": "The longitude.",
								"kind": "member",
								"types": [
									"number"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/modules/map.src.js",
										"line": 8049
									}
								]
							}
						}
					]
				},
				{
					"doclet": {
						"name": "Highcharts.MarkerClusterDrillCallbackFunction",
						"description": "Function callback when a cluster is clicked.",
						"kind": "typedef",
						"types": [
							"function"
						],
						"parameters": {
							"this": {
								"description": "The point where the event occured.",
								"types": [
									"Highcharts.Point"
								]
							},
							"event": {
								"description": "Event arguments.",
								"types": [
									"Highcharts.PointClickEventObject"
								]
							}
						},
						"return": {
							"types": [
								"void"
							]
						}
					},
					"meta": {
						"files": [
							{
								"path": "code/modules/marker-clusters.src.js",
								"line": 60
							}
						]
					}
				},
				{
					"doclet": {
						"name": "Highcharts.NavigationBindingsOptionsObject",
						"description": "A config object for navigation bindings in annotations.",
						"kind": "interface"
					},
					"meta": {
						"files": [
							{
								"path": "code/modules/annotations.src.js",
								"line": 3930
							},
							{
								"path": "code/modules/annotations-advanced.src.js",
								"line": 6289
							},
							{
								"path": "code/modules/stock-tools.src.js",
								"line": 3931
							}
						]
					},
					"children": [
						{
							"doclet": {
								"name": "Highcharts.NavigationBindingsOptionsObject.className",
								"description": "ClassName of the element for a binding.",
								"kind": "member",
								"types": [
									"string",
									"undefined"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/modules/annotations.src.js",
										"line": 3934
									},
									{
										"path": "code/modules/annotations-advanced.src.js",
										"line": 6293
									},
									{
										"path": "code/modules/stock-tools.src.js",
										"line": 3935
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.NavigationBindingsOptionsObject.end",
								"description": "Last event to be fired after last step event.",
								"kind": "member",
								"types": [
									"function",
									"undefined"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/modules/annotations.src.js",
										"line": 3938
									},
									{
										"path": "code/modules/annotations-advanced.src.js",
										"line": 6297
									},
									{
										"path": "code/modules/stock-tools.src.js",
										"line": 3939
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.NavigationBindingsOptionsObject.init",
								"description": "Initial event, fired on a button click.",
								"kind": "member",
								"types": [
									"function",
									"undefined"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/modules/annotations.src.js",
										"line": 3942
									},
									{
										"path": "code/modules/annotations-advanced.src.js",
										"line": 6301
									},
									{
										"path": "code/modules/stock-tools.src.js",
										"line": 3943
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.NavigationBindingsOptionsObject.start",
								"description": "Event fired on first click on a chart.",
								"kind": "member",
								"types": [
									"function",
									"undefined"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/modules/annotations.src.js",
										"line": 3946
									},
									{
										"path": "code/modules/annotations-advanced.src.js",
										"line": 6305
									},
									{
										"path": "code/modules/stock-tools.src.js",
										"line": 3947
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.NavigationBindingsOptionsObject.steps",
								"description": "Last event to be fired after last step event. Array of step events to be\ncalled sequentially after each user click.",
								"kind": "member",
								"types": [
									"Array.<function()>",
									"undefined"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/modules/annotations.src.js",
										"line": 3950
									},
									{
										"path": "code/modules/annotations-advanced.src.js",
										"line": 6309
									},
									{
										"path": "code/modules/stock-tools.src.js",
										"line": 3951
									}
								]
							}
						}
					]
				},
				{
					"doclet": {
						"name": "Highcharts.NumberFormatterCallbackFunction",
						"description": "Format a number and return a string based on input settings.",
						"kind": "typedef",
						"types": [
							"function"
						],
						"parameters": {
							"number": {
								"description": "The input number to format.",
								"types": [
									"number"
								]
							},
							"decimals": {
								"description": "The amount of decimals. A value of -1 preserves the amount in the\n       input number.",
								"types": [
									"number"
								]
							},
							"decimalPoint": {
								"description": "The decimal point, defaults to the one given in the lang options, or\n       a dot.",
								"isOptional": true,
								"types": [
									"string"
								]
							},
							"thousandsSep": {
								"description": "The thousands separator, defaults to the one given in the lang\n       options, or a space character.",
								"isOptional": true,
								"types": [
									"string"
								]
							}
						},
						"return": {
							"types": [
								"string"
							],
							"description": "The formatted number."
						}
					},
					"meta": {
						"files": [
							{
								"path": "code/highcharts.src.js",
								"line": 32945
							}
						]
					}
				},
				{
					"doclet": {
						"name": "Highcharts.ObjectEachCallbackFunction<T>",
						"description": "The iterator callback.",
						"kind": "typedef",
						"types": [
							"function"
						],
						"parameters": {
							"this": {
								"description": "The context.",
								"types": [
									"T"
								]
							},
							"value": {
								"description": "The property value.",
								"types": [
									"*"
								]
							},
							"key": {
								"description": "The property key.",
								"types": [
									"string"
								]
							},
							"obj": {
								"description": "The object that objectEach is being applied to.",
								"types": [
									"*"
								]
							}
						},
						"return": {
							"types": [
								"void"
							]
						}
					},
					"meta": {
						"files": [
							{
								"path": "code/highcharts.src.js",
								"line": 2073
							}
						]
					}
				},
				{
					"doclet": {
						"name": "Highcharts.OffsetObject",
						"description": "An object containing `left` and `top` properties for the position in the\npage.",
						"kind": "interface"
					},
					"meta": {
						"files": [
							{
								"path": "code/highcharts.src.js",
								"line": 2090
							}
						]
					},
					"children": [
						{
							"doclet": {
								"name": "Highcharts.OffsetObject.left",
								"description": "Left distance to the page border.",
								"kind": "member",
								"types": [
									"number"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 2095
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.OffsetObject.top",
								"description": "Top distance to the page border.",
								"kind": "member",
								"types": [
									"number"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 2099
									}
								]
							}
						}
					]
				},
				{
					"doclet": {
						"name": "Highcharts.OscillatorOptionsObject",
						"description": "",
						"kind": "interface"
					},
					"meta": {
						"files": [
							{
								"path": "code/modules/sonification.src.js",
								"line": 136
							}
						]
					},
					"children": [
						{
							"doclet": {
								"name": "Highcharts.OscillatorOptionsObject.waveformShape",
								"description": "The waveform shape to use for oscillator instruments. Defaults to `sine`.",
								"kind": "member",
								"types": [
									"string",
									"undefined"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/modules/sonification.src.js",
										"line": 140
									}
								]
							}
						}
					]
				},
				{
					"doclet": {
						"name": "Highcharts.PaneBackgroundShapeValue",
						"description": "",
						"kind": "typedef",
						"types": [
							"\"arc\"",
							"\"circle\"",
							"\"solid\""
						]
					},
					"meta": {
						"files": [
							{
								"path": "code/highcharts-more.src.js",
								"line": 44
							}
						]
					}
				},
				{
					"doclet": {
						"name": "Highcharts.PathfinderTypeValue",
						"description": "The default pathfinder algorithm to use for a chart. It is possible to define\nyour own algorithms by adding them to the\n`Highcharts.Pathfinder.prototype.algorithms`\nobject before the chart has been created.\n\nThe default algorithms are as follows:\n\n`straight`: Draws a straight line between the connecting\n points. Does not avoid other points when drawing.\n\n`simpleConnect`: Finds a path between the points using right angles\n only. Takes only starting/ending points into\n account, and will not avoid other points.\n\n`fastAvoid`: Finds a path between the points using right angles\n only. Will attempt to avoid other points, but its\n focus is performance over accuracy. Works well with\n less dense datasets.",
						"kind": "typedef",
						"types": [
							"\"fastAvoid\"",
							"\"simpleConnect\"",
							"\"straight\"",
							"string"
						]
					},
					"meta": {
						"files": [
							{
								"path": "code/modules/gantt.src.js",
								"line": 4658
							},
							{
								"path": "code/modules/pathfinder.src.js",
								"line": 209
							}
						]
					}
				},
				{
					"doclet": {
						"name": "Highcharts.PatternObject",
						"description": "Holds a pattern definition.",
						"kind": "interface"
					},
					"meta": {
						"files": [
							{
								"path": "code/modules/pattern-fill.src.js",
								"line": 585
							}
						]
					},
					"children": [
						{
							"doclet": {
								"name": "Highcharts.PatternObject.animation",
								"description": "Animation options for the image pattern loading.",
								"kind": "member",
								"types": [
									"boolean",
									"Partial.<Highcharts.AnimationOptionsObject>",
									"undefined"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/modules/pattern-fill.src.js",
										"line": 615
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.PatternObject.pattern",
								"description": "Pattern options",
								"kind": "member",
								"types": [
									"Highcharts.PatternOptionsObject"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/modules/pattern-fill.src.js",
										"line": 611
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.PatternObject.patternIndex",
								"description": "Optionally an index referencing which pattern to use. Highcharts adds\n10 default patterns to the `Highcharts.patterns` array. Additional\npattern definitions can be pushed to this array if desired. This option\nis an index into this array.",
								"kind": "member",
								"types": [
									"number",
									"undefined"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/modules/pattern-fill.src.js",
										"line": 619
									}
								]
							}
						}
					]
				},
				{
					"doclet": {
						"name": "Highcharts.PatternOptionsObject",
						"description": "Pattern options",
						"kind": "interface"
					},
					"meta": {
						"files": [
							{
								"path": "code/modules/pattern-fill.src.js",
								"line": 520
							}
						]
					},
					"children": [
						{
							"doclet": {
								"name": "Highcharts.PatternOptionsObject.aspectRatio",
								"description": "For automatically calculated width and height on images, it is possible to\nset an aspect ratio. The image will be zoomed to fill the bounding box,\nmaintaining the aspect ratio defined.",
								"kind": "member",
								"types": [
									"number"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/modules/pattern-fill.src.js",
										"line": 544
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.PatternOptionsObject.backgroundColor",
								"description": "Background color for the pattern if a `path` is set (not images).",
								"kind": "member",
								"types": [
									"Highcharts.ColorString"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/modules/pattern-fill.src.js",
										"line": 524
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.PatternOptionsObject.color",
								"description": "Pattern color, used as default path stroke.",
								"kind": "member",
								"types": [
									"Highcharts.ColorString"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/modules/pattern-fill.src.js",
										"line": 570
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.PatternOptionsObject.height",
								"description": "Analogous to pattern.width.",
								"kind": "member",
								"types": [
									"number"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/modules/pattern-fill.src.js",
										"line": 540
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.PatternOptionsObject.id",
								"description": "ID to assign to the pattern. This is automatically computed if not added, and\nidentical patterns are reused. To refer to an existing pattern for a\nHighcharts color, use `color: \"url(#pattern-id)\"`.",
								"kind": "member",
								"types": [
									"string",
									"undefined"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/modules/pattern-fill.src.js",
										"line": 578
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.PatternOptionsObject.image",
								"description": "URL to an image to use as the pattern.",
								"kind": "member",
								"types": [
									"string"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/modules/pattern-fill.src.js",
										"line": 528
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.PatternOptionsObject.opacity",
								"description": "Opacity of the pattern as a float value from 0 to 1.",
								"kind": "member",
								"types": [
									"number"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/modules/pattern-fill.src.js",
										"line": 574
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.PatternOptionsObject.path",
								"description": "Either an SVG path as string, or an object. As an object, supply the path\nstring in the `path.d` property. Other supported properties are standard SVG\nattributes like `path.stroke` and `path.fill`. If a path is supplied for the\npattern, the `image` property is ignored.",
								"kind": "member",
								"types": [
									"string",
									"Highcharts.SVGAttributes"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/modules/pattern-fill.src.js",
										"line": 558
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.PatternOptionsObject.patternTransform",
								"description": "SVG `patternTransform` to apply to the entire pattern.",
								"kind": "member",
								"see": [
									"[patternTransform demo](https://jsfiddle.net/gh/get/library/pure/highcharts/highcharts/tree/master/samples/highcharts/series/pattern-fill-transform)"
								],
								"types": [
									"string"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/modules/pattern-fill.src.js",
										"line": 565
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.PatternOptionsObject.width",
								"description": "Width of the pattern. For images this is automatically set to the width of\nthe element bounding box if not supplied. For non-image patterns the default\nis 32px. Note that automatic resizing of image patterns to fill a bounding\nbox dynamically is only supported for patterns with an automatically\ncalculated ID.",
								"kind": "member",
								"types": [
									"number"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/modules/pattern-fill.src.js",
										"line": 532
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.PatternOptionsObject.x",
								"description": "Horizontal offset of the pattern. Defaults to 0.",
								"kind": "member",
								"types": [
									"number",
									"undefined"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/modules/pattern-fill.src.js",
										"line": 550
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.PatternOptionsObject.y",
								"description": "Vertical offset of the pattern. Defaults to 0.",
								"kind": "member",
								"types": [
									"number",
									"undefined"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/modules/pattern-fill.src.js",
										"line": 554
									}
								]
							}
						}
					]
				},
				{
					"doclet": {
						"name": "Highcharts.PlotLineOrBand",
						"description": "The object wrapper for plot lines and plot bands",
						"kind": "class"
					},
					"meta": {
						"files": [
							{
								"path": "code/highcharts.src.js",
								"line": 22885
							}
						]
					},
					"children": [
						{
							"doclet": {
								"name": "Highcharts.PlotLineOrBand.constructor",
								"description": "The object wrapper for plot lines and plot bands",
								"kind": "constructor",
								"parameters": {
									"axis": {
										"description": "Related axis.",
										"types": [
											"Highcharts.Axis"
										]
									},
									"options": {
										"description": "Options to use.",
										"isOptional": true,
										"types": [
											"Highcharts.AxisPlotLinesOptions",
											"Highcharts.AxisPlotBandsOptions"
										]
									}
								},
								"return": {
									"types": [
										"void"
									]
								}
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 0
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.PlotLineOrBand.destroy",
								"description": "Remove the plot line or band.",
								"kind": "function",
								"return": {
									"types": [
										"void"
									]
								}
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 23137
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.PlotLineOrBand.label",
								"description": "SVG element of the label.",
								"kind": "member",
								"types": [
									"Highcharts.SVGElement"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 23079
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.PlotLineOrBand.svgElement",
								"description": "SVG element of the plot line or band.",
								"kind": "member",
								"types": [
									"Highcharts.SVGElement"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 22993
									}
								]
							}
						}
					]
				},
				{
					"doclet": {
						"name": "Highcharts.Point",
						"description": "The Point object. The point objects are generated from the `series.data`\nconfiguration objects or raw numbers. They can be accessed from the\n`Series.points` array. Other ways to instantiate points are through {@link Highcharts.Series#addPoint} or {@link Highcharts.Series#setData}.",
						"kind": "class"
					},
					"meta": {
						"files": [
							{
								"path": "code/highcharts.src.js",
								"line": 25304
							}
						]
					},
					"children": [
						{
							"doclet": {
								"name": "Highcharts.Point.cancelSonify",
								"description": "Cancel sonification of a point. Calls onEnd functions.",
								"kind": "function",
								"parameters": {
									"fadeOut": {
										"description": "Whether or not to fade out as we stop. If false, the points are\n       cancelled synchronously.",
										"isOptional": true,
										"types": [
											"boolean"
										]
									}
								},
								"return": {
									"types": [
										"void"
									]
								}
							},
							"meta": {
								"files": [
									{
										"path": "code/modules/sonification.src.js",
										"line": 1403
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.Point.category",
								"description": "For categorized axes this property holds the category name for the\npoint. For other axes it holds the X value.",
								"kind": "member",
								"types": [
									"string"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 25320
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.Point.color",
								"description": "The point's current color.",
								"kind": "member",
								"types": [
									"Highcharts.ColorString",
									"Highcharts.GradientColorObject",
									"Highcharts.PatternObject",
									"undefined"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 25909
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.Point.colorIndex",
								"description": "The point's current color index, used in styled mode instead of\n`color`. The color index is inserted in class names used for styling.",
								"kind": "member",
								"types": [
									"number"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 25328
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.Point.dataGroup",
								"description": "Highcharts Stock only. If a point object is created by data\ngrouping, it doesn't reflect actual points in the raw\ndata. In this case, the `dataGroup` property holds\ninformation that points back to the raw data.\n\n- `dataGroup.start` is the index of the first raw data\n point in the group.\n\n- `dataGroup.length` is the amount of points in the\n group.",
								"kind": "member",
								"products": [
									"highstock"
								],
								"types": [
									"Highcharts.DataGroupingInfoObject",
									"undefined"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 36772
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.Point.doDrilldown",
								"description": "Perform drilldown on a point instance. The [drilldown](https://api.highcharts.com/highcharts/series.line.data.drilldown)\nproperty must be set on the point options.\n\nTo drill down multiple points in the same category, use\n`Axis.drilldownCategory` instead.",
								"kind": "function",
								"return": {
									"types": [
										"void"
									]
								}
							},
							"meta": {
								"files": [
									{
										"path": "code/modules/drilldown.src.js",
										"line": 1011
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.Point.getClassName",
								"description": "Get the CSS class names for individual points. Used internally where the\nreturned value is set on every point.",
								"kind": "function",
								"return": {
									"types": [
										"string"
									],
									"description": "The class names."
								}
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 25639
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.Point.getLabelConfig",
								"description": "Return the configuration hash needed for the data label and tooltip\nformatters.",
								"kind": "function",
								"return": {
									"types": [
										"Highcharts.PointLabelObject"
									],
									"description": "Abstract object used in formatters and formats."
								}
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 25697
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.Point.getZone",
								"description": "In a series with `zones`, return the zone that the point belongs to.",
								"kind": "function",
								"return": {
									"types": [
										"Highcharts.SeriesZonesOptionsObject"
									],
									"description": "The zone item."
								}
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 25732
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.Point.haloPath",
								"description": "Get the path definition for the halo, which is usually a shadow-like\ncircle around the currently hovered point.",
								"kind": "function",
								"parameters": {
									"size": {
										"description": "The radius of the circular halo.",
										"types": [
											"number"
										]
									}
								},
								"return": {
									"types": [
										"Highcharts.SVGPathArray"
									],
									"description": "The path definition."
								}
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 26419
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.Point.index",
								"description": "Contains the point's index in the `Series.points` array.",
								"kind": "member",
								"isReadOnly": true,
								"types": [
									"number"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 36801
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.Point.init",
								"description": "Initialize the point. Called internally based on the `series.data`\noption.",
								"kind": "function",
								"fires": [
									"Highcharts.Point#afterInit"
								],
								"parameters": {
									"series": {
										"description": "The series object containing this point.",
										"types": [
											"Highcharts.Series"
										]
									},
									"options": {
										"description": "The data in either number, array or object format.",
										"types": [
											"Highcharts.PointOptionsType"
										]
									},
									"x": {
										"description": "Optionally, the X value of the point.",
										"isOptional": true,
										"types": [
											"number"
										]
									}
								},
								"return": {
									"types": [
										"Highcharts.Point"
									],
									"description": "The Point instance."
								}
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 25774
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.Point.mock",
								"description": "Indicates if this is a mock point for an annotation.",
								"kind": "member",
								"types": [
									"boolean",
									"undefined"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/modules/annotations.src.js",
										"line": 472
									},
									{
										"path": "code/modules/annotations-advanced.src.js",
										"line": 472
									},
									{
										"path": "code/modules/stock-tools.src.js",
										"line": 473
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.Point.name",
								"description": "The name of the point. The name can be given as the first position of the\npoint configuration array, or as a `name` property in the configuration:",
								"kind": "member",
								"types": [
									"string"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 25339
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.Point.onMouseOut",
								"description": "Runs on mouse out from the point. Called internally from mouse and touch\nevents.",
								"kind": "function",
								"fires": [
									"Highcharts.Point#mouseOut"
								],
								"return": {
									"types": [
										"void"
									]
								}
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 26198
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.Point.onMouseOver",
								"description": "Runs on mouse over the point. Called internally from mouse and touch\nevents.",
								"kind": "function",
								"parameters": {
									"e": {
										"description": "The event arguments.",
										"isOptional": true,
										"types": [
											"Highcharts.PointerEventObject"
										]
									}
								},
								"return": {
									"types": [
										"void"
									]
								}
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 26178
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.Point.options",
								"description": "The point's options as applied in the initial configuration, or\nextended through `Point.update`.\n\nIn TypeScript you have to extend `PointOptionsObject` via an\nadditional interface to allow custom data options:\n\n```\ndeclare interface PointOptionsObject {\n customProperty: string;\n}\n```",
								"kind": "member",
								"types": [
									"Highcharts.PointOptionsObject"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 25363
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.Point.optionsToObject",
								"description": "Transform number or array configs into objects. Also called for object\nconfigs. Used internally to unify the different configuration formats for\npoints. For example, a simple number `10` in a line series will be\ntransformed to `{ y: 10 }`, and an array config like `[1, 10]` in a\nscatter series will be transformed to `{ x: 1, y: 10 }`.",
								"kind": "function",
								"parameters": {
									"options": {
										"description": "The input option.",
										"types": [
											"Highcharts.PointOptionsType"
										]
									}
								},
								"return": {
									"types": [
										"Highcharts.Dictionary.<*>"
									],
									"description": "Transformed options."
								}
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 25804
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.Point.percentage",
								"description": "The percentage for points in a stacked series or pies.",
								"kind": "member",
								"types": [
									"number",
									"undefined"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 25380
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.Point.pointPadding",
								"description": "Heatmap series only. Padding between the points in the heatmap.",
								"kind": "member",
								"types": [
									"number",
									"undefined"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/modules/heatmap.src.js",
										"line": 2368
									},
									{
										"path": "code/modules/map.src.js",
										"line": 7548
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.Point.properties",
								"description": "In Highmaps, when data is loaded from GeoJSON, the GeoJSON\nitem's properies are copied over here.",
								"kind": "member",
								"types": [
									"*"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/modules/map.src.js",
										"line": 8356
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.Point.remove",
								"description": "Remove a point and optionally redraw the series and if necessary the axes",
								"kind": "function",
								"parameters": {
									"redraw": {
										"description": "Whether to redraw the chart or wait for an explicit call. When\n       doing more operations on the chart, for example running\n       `point.remove()` in a loop, it is best practice to set `redraw`\n       to false and call `chart.redraw()` after.",
										"isOptional": true,
										"types": [
											"boolean"
										]
									},
									"animation": {
										"description": "Whether to apply animation, and optionally animation\n       configuration.",
										"isOptional": true,
										"types": [
											"boolean",
											"Partial.<Highcharts.AnimationOptionsObject>"
										]
									}
								},
								"return": {
									"types": [
										"void"
									]
								}
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 26082
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.Point.select",
								"description": "Toggle the selection status of a point.",
								"kind": "function",
								"see": [
									"Highcharts.Chart#getSelectedPoints"
								],
								"fires": [
									"Highcharts.Point#select",
									"Highcharts.Point#unselect"
								],
								"parameters": {
									"selected": {
										"description": "When `true`, the point is selected. When `false`, the point is\nunselected. When `null` or `undefined`, the selection state is toggled.",
										"isOptional": true,
										"types": [
											"boolean"
										]
									},
									"accumulate": {
										"description": "When `true`, the selection is added to other selected points.\nWhen `false`, other selected points are deselected. Internally in\nHighcharts, when\n[allowPointSelect](https://api.highcharts.com/highcharts/plotOptions.series.allowPointSelect)\nis `true`, selected points are accumulated on Control, Shift or Cmd\nclicking the point.",
										"isOptional": true,
										"types": [
											"boolean"
										]
									}
								},
								"return": {
									"types": [
										"void"
									]
								}
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 26107
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.Point.selected",
								"description": "Whether the point is selected or not.",
								"kind": "member",
								"see": [
									"Point#select",
									"Chart#getSelectedPoints"
								],
								"types": [
									"boolean"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 26144
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.Point.series",
								"description": "The series object associated with the point.",
								"kind": "member",
								"types": [
									"Highcharts.Series"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 25388
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.Point.setNestedProperty<T>",
								"description": "Set a value in an object, on the property defined by key. The key\nsupports nested properties using dot notation. The function modifies the\ninput object and does not make a copy.",
								"kind": "function",
								"parameters": {
									"object": {
										"description": "The object to set the value on.",
										"types": [
											"T"
										]
									},
									"value": {
										"description": "The value to set.",
										"types": [
											"*"
										]
									},
									"key": {
										"description": "Key to the property to set.",
										"types": [
											"string"
										]
									}
								},
								"return": {
									"types": [
										"T"
									],
									"description": "The modified object."
								}
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 25917
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.Point.setState",
								"description": "Set the point's state.",
								"kind": "function",
								"fires": [
									"Highcharts.Point#afterSetState"
								],
								"parameters": {
									"state": {
										"description": "The new state, can be one of `'hover'`, `'select'`, `'inactive'`,\n       or `''` (an empty string), `'normal'` or `undefined` to set to\n       normal state.",
										"isOptional": true,
										"types": [
											"Highcharts.PointStateValue",
											"\"\""
										]
									},
									"move": {
										"description": "State for animation.",
										"isOptional": true,
										"types": [
											"boolean"
										]
									}
								},
								"return": {
									"types": [
										"void"
									]
								}
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 26238
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.Point.sliced",
								"description": "Pie series only. Whether to display a slice offset from the\ncenter.",
								"kind": "member",
								"types": [
									"boolean",
									"undefined"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 45194
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.Point.sonify",
								"description": "Sonify a single point.",
								"kind": "function",
								"parameters": {
									"options": {
										"description": "Options for the sonification of the point.",
										"types": [
											"Highcharts.PointSonifyOptionsObject"
										]
									}
								},
								"return": {
									"types": [
										"void"
									]
								}
							},
							"meta": {
								"files": [
									{
										"path": "code/modules/sonification.src.js",
										"line": 1280
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.Point.tooltipFormatter",
								"description": "Extendable method for formatting each point's tooltip line.",
								"kind": "function",
								"parameters": {
									"pointFormat": {
										"description": "The point format.",
										"types": [
											"string"
										]
									}
								},
								"return": {
									"types": [
										"string"
									],
									"description": "A string to be concatenated in to the common tooltip text."
								}
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 25949
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.Point.total",
								"description": "The total of values in either a stack for stacked series, or a pie in a\npie series.",
								"kind": "member",
								"types": [
									"number",
									"undefined"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 25395
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.Point.update",
								"description": "Update point with new options (typically x/y data) and optionally redraw\nthe series.",
								"kind": "function",
								"fires": [
									"Highcharts.Point#update"
								],
								"parameters": {
									"options": {
										"description": "The point options. Point options are handled as described under\n       the `series.type.data` item for each series type. For example\n       for a line series, if options is a single number, the point will\n       be given that number as the marin y value. If it is an array, it\n       will be interpreted as x and y values respectively. If it is an\n       object, advanced options are applied.",
										"types": [
											"Highcharts.PointOptionsType"
										]
									},
									"redraw": {
										"description": "Whether to redraw the chart after the point is updated. If doing\n       more operations on the chart, it is best practice to set\n       `redraw` to false and call `chart.redraw()` after.",
										"isOptional": true,
										"types": [
											"boolean"
										]
									},
									"animation": {
										"description": "Whether to apply animation, and optionally animation\n       configuration.",
										"isOptional": true,
										"types": [
											"boolean",
											"Partial.<Highcharts.AnimationOptionsObject>"
										]
									}
								},
								"return": {
									"types": [
										"void"
									]
								}
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 25982
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.Point.value",
								"description": "Heatmap series only. The value of the point, resulting in a color\ncontroled by options as set in the colorAxis configuration.",
								"kind": "member",
								"types": [
									"number",
									"null",
									"undefined"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/modules/heatmap.src.js",
										"line": 2373
									},
									{
										"path": "code/modules/map.src.js",
										"line": 7553
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.Point.visible",
								"description": "For certain series types, like pie charts, where individual points can\nbe shown or hidden.",
								"kind": "member",
								"defaultValue": "true",
								"types": [
									"boolean"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 25403
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.Point.x",
								"description": "The x value of the point.",
								"kind": "member",
								"types": [
									"number"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 25497
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.Point.x2",
								"description": "The ending X value of the range point.",
								"kind": "member",
								"types": [
									"number",
									"undefined"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/modules/gantt.src.js",
										"line": 118
									},
									{
										"path": "code/modules/xrange.src.js",
										"line": 118
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.Point.y",
								"description": "The y value of the point.",
								"kind": "member",
								"types": [
									"number",
									"undefined"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 25481
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.Point.zoomTo",
								"description": "Highmaps only. Zoom in on the point using the global animation.",
								"kind": "function",
								"return": {
									"types": [
										"void"
									]
								}
							},
							"meta": {
								"files": [
									{
										"path": "code/modules/map.src.js",
										"line": 2795
									}
								]
							}
						}
					]
				},
				{
					"doclet": {
						"name": "Highcharts.PointAccessibilityOptionsObject",
						"description": "",
						"kind": "interface"
					},
					"meta": {
						"files": [
							{
								"path": "code/modules/accessibility.src.js",
								"line": 8282
							}
						]
					},
					"children": [
						{
							"doclet": {
								"name": "Highcharts.PointAccessibilityOptionsObject.description",
								"description": "Provide a description of the data point, announced to screen readers.",
								"kind": "member",
								"types": [
									"string",
									"undefined"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/modules/accessibility.src.js",
										"line": 8284
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.PointAccessibilityOptionsObject.enabled",
								"description": "Enable or disable exposing the point to assistive technology",
								"kind": "member",
								"types": [
									"boolean",
									"undefined"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/modules/accessibility.src.js",
										"line": 8290
									}
								]
							}
						}
					]
				},
				{
					"doclet": {
						"name": "Highcharts.PointClickCallbackFunction",
						"description": "Function callback when a series point is clicked. Return false to cancel the\naction.",
						"kind": "typedef",
						"types": [
							"function"
						],
						"parameters": {
							"this": {
								"description": "The point where the event occured.",
								"types": [
									"Highcharts.Point"
								]
							},
							"event": {
								"description": "Event arguments.",
								"types": [
									"Highcharts.PointClickEventObject"
								]
							}
						},
						"return": {
							"types": [
								"void"
							]
						}
					},
					"meta": {
						"files": [
							{
								"path": "code/highcharts.src.js",
								"line": 26448
							}
						]
					}
				},
				{
					"doclet": {
						"name": "Highcharts.PointClickEventObject",
						"description": "Common information for a click event on a series point.",
						"kind": "interface",
						"types": [
							"Highcharts.PointerEventObject"
						]
					},
					"meta": {
						"files": [
							{
								"path": "code/highcharts.src.js",
								"line": 26460
							}
						]
					},
					"children": [
						{
							"doclet": {
								"name": "Highcharts.PointClickEventObject.point",
								"description": "Clicked point.",
								"kind": "member",
								"types": [
									"Highcharts.Point"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 26465
									}
								]
							}
						}
					]
				},
				{
					"doclet": {
						"name": "Highcharts.PointDragCallbackFunction",
						"description": "Function callback to execute while series points are dragged. Return false to\nstop the default drag action.",
						"kind": "typedef",
						"types": [
							"function"
						],
						"parameters": {
							"this": {
								"description": "Point where the event occured.",
								"types": [
									"Highcharts.Point"
								]
							},
							"event": {
								"description": "Event arguments.",
								"types": [
									"Highcharts.PointDragEventObject"
								]
							}
						},
						"return": {
							"types": [
								"void"
							]
						}
					},
					"meta": {
						"files": [
							{
								"path": "code/modules/draggable-points.src.js",
								"line": 2272
							}
						]
					}
				},
				{
					"doclet": {
						"name": "Highcharts.PointDragDropObject",
						"description": "Contains information about a points new values.",
						"kind": "interface"
					},
					"meta": {
						"files": [
							{
								"path": "code/modules/draggable-points.src.js",
								"line": 2284
							}
						]
					},
					"children": [
						{
							"doclet": {
								"name": "Highcharts.PointDragDropObject.newValues",
								"description": "New values.",
								"kind": "member",
								"types": [
									"Highcharts.Dictionary.<number>"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/modules/draggable-points.src.js",
										"line": 2288
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.PointDragDropObject.point",
								"description": "Updated point.",
								"kind": "member",
								"types": [
									"Highcharts.Point"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/modules/draggable-points.src.js",
										"line": 2292
									}
								]
							}
						}
					]
				},
				{
					"doclet": {
						"name": "Highcharts.PointDragEventObject",
						"description": "Contains common information for a drag event on series points.",
						"kind": "interface"
					},
					"meta": {
						"files": [
							{
								"path": "code/modules/draggable-points.src.js",
								"line": 2297
							}
						]
					},
					"children": [
						{
							"doclet": {
								"name": "Highcharts.PointDragEventObject.newPoints",
								"description": "New points during drag.",
								"kind": "member",
								"types": [
									"Highcharts.Dictionary.<Highcharts.PointDragDropObject>"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/modules/draggable-points.src.js",
										"line": 2309
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.PointDragEventObject.origin",
								"description": "Original data.",
								"kind": "member",
								"types": [
									"Highcharts.DragDropPositionObject"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/modules/draggable-points.src.js",
										"line": 2313
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.PointDragEventObject.preventDefault",
								"description": "Prevent default drag action.",
								"kind": "member",
								"types": [
									"function"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/modules/draggable-points.src.js",
										"line": 2317
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.PointDragEventObject.target",
								"description": "Target point that caused the event.",
								"kind": "member",
								"types": [
									"Highcharts.Point"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/modules/draggable-points.src.js",
										"line": 2321
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.PointDragEventObject.type",
								"description": "Event type.",
								"kind": "member",
								"types": [
									"\"drag\""
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/modules/draggable-points.src.js",
										"line": 2325
									}
								]
							}
						}
					]
				},
				{
					"doclet": {
						"name": "Highcharts.PointDragStartCallbackFunction",
						"description": "Function callback to execute when a series point is dragged.",
						"kind": "typedef",
						"types": [
							"function"
						],
						"parameters": {
							"this": {
								"description": "Point where the event occured.",
								"types": [
									"Highcharts.Point"
								]
							},
							"event": {
								"description": "Event arguments.",
								"types": [
									"Highcharts.PointDragStartEventObject"
								]
							}
						},
						"return": {
							"types": [
								"void"
							]
						}
					},
					"meta": {
						"files": [
							{
								"path": "code/modules/draggable-points.src.js",
								"line": 2330
							}
						]
					}
				},
				{
					"doclet": {
						"name": "Highcharts.PointDragStartEventObject",
						"description": "Contains common information for a drag event on series point.",
						"kind": "interface",
						"types": [
							"global.MouseEvent"
						]
					},
					"meta": {
						"files": [
							{
								"path": "code/modules/draggable-points.src.js",
								"line": 2341
							}
						]
					},
					"children": [
						{
							"doclet": {
								"name": "Highcharts.PointDragStartEventObject.updateProp",
								"description": "Data property being dragged.",
								"kind": "member",
								"types": [
									"string",
									"undefined"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/modules/draggable-points.src.js",
										"line": 2346
									}
								]
							}
						}
					]
				},
				{
					"doclet": {
						"name": "Highcharts.PointDropCallbackFunction",
						"description": "Function callback to execute when series points are dropped.",
						"kind": "typedef",
						"types": [
							"function"
						],
						"parameters": {
							"this": {
								"description": "Point where the event occured.",
								"types": [
									"Highcharts.Point"
								]
							},
							"event": {
								"description": "Event arguments.",
								"types": [
									"Highcharts.PointDropEventObject"
								]
							}
						},
						"return": {
							"types": [
								"void"
							]
						}
					},
					"meta": {
						"files": [
							{
								"path": "code/modules/draggable-points.src.js",
								"line": 2351
							}
						]
					}
				},
				{
					"doclet": {
						"name": "Highcharts.PointDropEventObject",
						"description": "Contains common information for a drop event on series points.",
						"kind": "interface"
					},
					"meta": {
						"files": [
							{
								"path": "code/modules/draggable-points.src.js",
								"line": 2362
							}
						]
					},
					"children": [
						{
							"doclet": {
								"name": "Highcharts.PointDropEventObject.newPoint",
								"description": "New point after drag if only a single one.",
								"kind": "member",
								"types": [
									"Highcharts.PointDragDropObject",
									"undefined"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/modules/draggable-points.src.js",
										"line": 2301
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.PointDropEventObject.newPointId",
								"description": "New point id after drag if only a single one.",
								"kind": "member",
								"types": [
									"string",
									"undefined"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/modules/draggable-points.src.js",
										"line": 2305
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.PointDropEventObject.newPoints",
								"description": "New points after drop.",
								"kind": "member",
								"types": [
									"Highcharts.Dictionary.<Highcharts.PointDragDropObject>"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/modules/draggable-points.src.js",
										"line": 2374
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.PointDropEventObject.numNewPoints",
								"description": "Number of new points.",
								"kind": "member",
								"types": [
									"number"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/modules/draggable-points.src.js",
										"line": 2378
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.PointDropEventObject.origin",
								"description": "Original data.",
								"kind": "member",
								"types": [
									"Highcharts.DragDropPositionObject"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/modules/draggable-points.src.js",
										"line": 2382
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.PointDropEventObject.preventDefault",
								"description": "Prevent default drop action.",
								"kind": "member",
								"types": [
									"function"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/modules/draggable-points.src.js",
										"line": 2386
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.PointDropEventObject.target",
								"description": "Target point that caused the event.",
								"kind": "member",
								"types": [
									"Highcharts.Point"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/modules/draggable-points.src.js",
										"line": 2390
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.PointDropEventObject.type",
								"description": "Event type.",
								"kind": "member",
								"types": [
									"\"drop\""
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/modules/draggable-points.src.js",
										"line": 2394
									}
								]
							}
						}
					]
				},
				{
					"doclet": {
						"name": "Highcharts.PointEventsOptionsObject",
						"description": "",
						"kind": "interface"
					},
					"meta": {
						"files": [
							{
								"path": "code/highcharts.src.js",
								"line": 26594
							}
						]
					},
					"children": [
						{
							"doclet": {
								"name": "Highcharts.PointEventsOptionsObject.select",
								"description": "Fires when the point is selected either programmatically or following a click\non the point. One parameter, `event`, is passed to the function. Returning\n`false` cancels the operation.",
								"kind": "member",
								"types": [
									"Highcharts.PointSelectCallbackFunction",
									"undefined"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 26596
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.PointEventsOptionsObject.unselect",
								"description": "Fires when the point is unselected either programmatically or following a\nclick on the point. One parameter, `event`, is passed to the function.\nReturning `false` cancels the operation.",
								"kind": "member",
								"types": [
									"Highcharts.PointUnselectCallbackFunction",
									"undefined"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 26602
									}
								]
							}
						}
					]
				},
				{
					"doclet": {
						"name": "Highcharts.PointInstrumentMappingObject",
						"description": "Define the parameter mapping for an instrument.",
						"kind": "interface"
					},
					"meta": {
						"files": [
							{
								"path": "code/modules/sonification.src.js",
								"line": 1096
							}
						]
					},
					"children": [
						{
							"doclet": {
								"name": "Highcharts.PointInstrumentMappingObject.duration",
								"description": "Define the duration of the notes for this instrument. This can be a string\nwith a data property name, e.g. `'y'`, in which case this data property is\nused to define the duration relative to the `y`-values of the other points. A\nhigher `y` value would then result in a longer duration. Alternatively,\n`'-y'` can be used, in which case the polarity is inverted, and a higher\n`y` value would result in a shorter duration. This option can also be a\nfixed number or a function. If it is a function, this function is called\nonce before the note starts playing, and should return the duration in\nmilliseconds. It receives two arguments: The point, and the dataExtremes.",
								"kind": "member",
								"types": [
									"string",
									"number",
									"function"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/modules/sonification.src.js",
										"line": 1116
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.PointInstrumentMappingObject.frequency",
								"description": "Define the frequency of the instrument. This can be a string with a data\nproperty name, e.g. `'y'`, in which case this data property is used to define\nthe frequency relative to the `y`-values of the other points. A higher `y`\nvalue would then result in a higher frequency. Alternatively, `'-y'` can be\nused, in which case the polarity is inverted, and a higher `y` value would\nresult in a lower frequency. This option can also be a fixed number or a\nfunction. If it is a function, this function is called in regular intervals\nwhile the note is playing. It receives three arguments: The point, the\ndataExtremes, and the current relative time - where 0 is the beginning of\nthe note and 1 is the end. The function should return the frequency of the\nnote as a number (in Hz).",
								"kind": "member",
								"types": [
									"string",
									"number",
									"function"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/modules/sonification.src.js",
										"line": 1143
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.PointInstrumentMappingObject.pan",
								"description": "Define the panning of the instrument. This can be a string with a data\nproperty name, e.g. `'x'`, in which case this data property is used to define\nthe panning relative to the `x`-values of the other points. A higher `x`\nvalue would then result in a higher panning value (panned further to the\nright). Alternatively, `'-x'` can be used, in which case the polarity is\ninverted, and a higher `x` value would result in a lower panning value\n(panned further to the left). This option can also be a fixed number or a\nfunction. If it is a function, this function is called in regular intervals\nwhile the note is playing. It receives three arguments: The point, the\ndataExtremes, and the current relative time - where 0 is the beginning of\nthe note and 1 is the end. The function should return the panning of the\nnote as a number between -1 and 1.",
								"kind": "member",
								"types": [
									"string",
									"number",
									"function",
									"undefined"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/modules/sonification.src.js",
										"line": 1128
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.PointInstrumentMappingObject.volume",
								"description": "Define the volume of the instrument. This can be a string with a data\nproperty name, e.g. `'y'`, in which case this data property is used to define\nthe volume relative to the `y`-values of the other points. A higher `y` value\nwould then result in a higher volume. Alternatively, `'-y'` can be used,\nwhich inverts the polarity, so that a higher `y` value results in a lower\nvolume. This option can also be a fixed number or a function. If it is a\nfunction, this function is called in regular intervals while the note is\nplaying. It receives three arguments: The point, the dataExtremes, and the\ncurrent relative time - where 0 is the beginning of the note and 1 is the\nend. The function should return the volume of the note as a number between\n0 and 1.",
								"kind": "member",
								"types": [
									"string",
									"number",
									"function"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/modules/sonification.src.js",
										"line": 1102
									}
								]
							}
						}
					]
				},
				{
					"doclet": {
						"name": "Highcharts.PointInstrumentObject",
						"description": "An instrument definition for a point, specifying the instrument to play and\nhow to play it.",
						"kind": "interface"
					},
					"meta": {
						"files": [
							{
								"path": "code/modules/sonification.src.js",
								"line": 1211
							}
						]
					},
					"children": [
						{
							"doclet": {
								"name": "Highcharts.PointInstrumentObject.instrument",
								"description": "An Instrument instance or the name of the instrument in the\nHighcharts.sonification.instruments map.",
								"kind": "member",
								"types": [
									"Highcharts.Instrument",
									"string"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/modules/sonification.src.js",
										"line": 1216
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.PointInstrumentObject.instrumentMapping",
								"description": "Mapping of instrument parameters for this instrument.",
								"kind": "member",
								"types": [
									"Highcharts.PointInstrumentMappingObject"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/modules/sonification.src.js",
										"line": 1221
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.PointInstrumentObject.instrumentOptions",
								"description": "Options for this instrument.",
								"kind": "member",
								"types": [
									"Highcharts.PointInstrumentOptionsObject",
									"undefined"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/modules/sonification.src.js",
										"line": 1225
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.PointInstrumentObject.onEnd",
								"description": "Callback to call when the instrument has stopped playing.",
								"kind": "member",
								"types": [
									"function",
									"undefined"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/modules/sonification.src.js",
										"line": 1229
									}
								]
							}
						}
					]
				},
				{
					"doclet": {
						"name": "Highcharts.PointInstrumentOptionsObject",
						"description": "",
						"kind": "interface"
					},
					"meta": {
						"files": [
							{
								"path": "code/modules/sonification.src.js",
								"line": 1158
							}
						]
					},
					"children": [
						{
							"doclet": {
								"name": "Highcharts.PointInstrumentOptionsObject.maxDuration",
								"description": "The maximum duration for a note when using a data property for duration. Can\nbe overridden by using either a fixed number or a function for\ninstrumentMapping.duration. Defaults to 2000.",
								"kind": "member",
								"types": [
									"number",
									"undefined"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/modules/sonification.src.js",
										"line": 1168
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.PointInstrumentOptionsObject.maxFrequency",
								"description": "The maximum frequency for a note when using a data property for frequency.\nCan be overridden by using either a fixed number or a function for\ninstrumentMapping.frequency. Defaults to 2200.",
								"kind": "member",
								"types": [
									"number",
									"undefined"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/modules/sonification.src.js",
										"line": 1204
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.PointInstrumentOptionsObject.maxPan",
								"description": "The maximum pan value for a note when using a data property for panning. Can\nbe overridden by using either a fixed number or a function for\ninstrumentMapping.pan. Defaults to 1 (fully right).",
								"kind": "member",
								"types": [
									"number",
									"undefined"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/modules/sonification.src.js",
										"line": 1180
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.PointInstrumentOptionsObject.maxVolume",
								"description": "The maximum volume for a note when using a data property for volume. Can be\noverridden by using either a fixed number or a function for\ninstrumentMapping.volume. Defaults to 1.",
								"kind": "member",
								"types": [
									"number",
									"undefined"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/modules/sonification.src.js",
										"line": 1192
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.PointInstrumentOptionsObject.minDuration",
								"description": "The minimum duration for a note when using a data property for duration. Can\nbe overridden by using either a fixed number or a function for\ninstrumentMapping.duration. Defaults to 20.",
								"kind": "member",
								"types": [
									"number",
									"undefined"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/modules/sonification.src.js",
										"line": 1162
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.PointInstrumentOptionsObject.minFrequency",
								"description": "The minimum frequency for a note when using a data property for frequency.\nCan be overridden by using either a fixed number or a function for\ninstrumentMapping.frequency. Defaults to 220.",
								"kind": "member",
								"types": [
									"number",
									"undefined"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/modules/sonification.src.js",
										"line": 1198
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.PointInstrumentOptionsObject.minPan",
								"description": "The minimum pan value for a note when using a data property for panning. Can\nbe overridden by using either a fixed number or a function for\ninstrumentMapping.pan. Defaults to -1 (fully left).",
								"kind": "member",
								"types": [
									"number",
									"undefined"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/modules/sonification.src.js",
										"line": 1174
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.PointInstrumentOptionsObject.minVolume",
								"description": "The minimum volume for a note when using a data property for volume. Can be\noverridden by using either a fixed number or a function for\ninstrumentMapping.volume. Defaults to 0.1.",
								"kind": "member",
								"types": [
									"number",
									"undefined"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/modules/sonification.src.js",
										"line": 1186
									}
								]
							}
						}
					]
				},
				{
					"doclet": {
						"name": "Highcharts.PointInteractionEventObject",
						"description": "Information about the select/unselect event.",
						"kind": "interface",
						"types": [
							"global.Event"
						]
					},
					"meta": {
						"files": [
							{
								"path": "code/highcharts.src.js",
								"line": 26609
							}
						]
					},
					"children": [
						{
							"doclet": {
								"name": "Highcharts.PointInteractionEventObject.accumulate",
								"description": "",
								"kind": "member",
								"types": [
									"boolean"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 26614
									}
								]
							}
						}
					]
				},
				{
					"doclet": {
						"name": "Highcharts.PointLabelObject",
						"description": "Configuration hash for the data label and tooltip formatters.",
						"kind": "interface"
					},
					"meta": {
						"files": [
							{
								"path": "code/highcharts.src.js",
								"line": 26470
							}
						]
					},
					"children": [
						{
							"doclet": {
								"name": "Highcharts.PointLabelObject.color",
								"description": "The point's current color.",
								"kind": "member",
								"types": [
									"Highcharts.ColorString",
									"Highcharts.GradientColorObject",
									"Highcharts.PatternObject",
									"undefined"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 26474
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.PointLabelObject.colorIndex",
								"description": "The point's current color index, used in styled mode instead of `color`. The\ncolor index is inserted in class names used for styling.",
								"kind": "member",
								"types": [
									"number"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 26478
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.PointLabelObject.key",
								"description": "The name of the related point.",
								"kind": "member",
								"types": [
									"string",
									"undefined"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 26483
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.PointLabelObject.percentage",
								"description": "The percentage for related points in a stacked series or pies.",
								"kind": "member",
								"types": [
									"number"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 26487
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.PointLabelObject.point",
								"description": "The related point. The point name, if defined, is available through\n`this.point.name`.",
								"kind": "member",
								"types": [
									"Highcharts.Point"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 26491
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.PointLabelObject.series",
								"description": "The related series. The series name is available through `this.series.name`.",
								"kind": "member",
								"types": [
									"Highcharts.Series"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 26496
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.PointLabelObject.total",
								"description": "The total of values in either a stack for stacked series, or a pie in a pie\nseries.",
								"kind": "member",
								"types": [
									"number",
									"undefined"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 26500
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.PointLabelObject.x",
								"description": "For categorized axes this property holds the category name for the point. For\nother axes it holds the X value.",
								"kind": "member",
								"types": [
									"number",
									"string",
									"undefined"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 26505
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.PointLabelObject.y",
								"description": "The y value of the point.",
								"kind": "member",
								"types": [
									"number",
									"undefined"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 26510
									}
								]
							}
						}
					]
				},
				{
					"doclet": {
						"name": "Highcharts.PointLegendItemClickCallbackFunction",
						"description": "Gets fired when the legend item belonging to a point is clicked. The default\naction is to toggle the visibility of the point. This can be prevented by\nreturning `false` or calling `event.preventDefault()`.",
						"kind": "typedef",
						"types": [
							"function"
						],
						"parameters": {
							"this": {
								"description": "The point on which the event occured.",
								"types": [
									"Highcharts.Point"
								]
							},
							"event": {
								"description": "The event that occured.",
								"types": [
									"Highcharts.PointLegendItemClickEventObject"
								]
							}
						},
						"return": {
							"types": [
								"void"
							]
						}
					},
					"meta": {
						"files": [
							{
								"path": "code/highcharts.src.js",
								"line": 29761
							}
						]
					}
				},
				{
					"doclet": {
						"name": "Highcharts.PointLegendItemClickEventObject",
						"description": "Information about the legend click event.",
						"kind": "interface"
					},
					"meta": {
						"files": [
							{
								"path": "code/highcharts.src.js",
								"line": 29774
							}
						]
					},
					"children": [
						{
							"doclet": {
								"name": "Highcharts.PointLegendItemClickEventObject.browserEvent",
								"description": "Related browser event.",
								"kind": "member",
								"types": [
									"Highcharts.PointerEvent"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 29778
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.PointLegendItemClickEventObject.preventDefault",
								"description": "Prevent the default action of toggle the visibility of the point.",
								"kind": "member",
								"types": [
									"function"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 29782
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.PointLegendItemClickEventObject.target",
								"description": "Related point.",
								"kind": "member",
								"types": [
									"Highcharts.Point"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 29786
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.PointLegendItemClickEventObject.type",
								"description": "Event type.",
								"kind": "member",
								"types": [
									"\"legendItemClick\""
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 29790
									}
								]
							}
						}
					]
				},
				{
					"doclet": {
						"name": "Highcharts.PointMouseOutCallbackFunction",
						"description": "Gets fired when the mouse leaves the area close to the point.",
						"kind": "typedef",
						"types": [
							"function"
						],
						"parameters": {
							"this": {
								"description": "Point where the event occured.",
								"types": [
									"Highcharts.Point"
								]
							},
							"event": {
								"description": "Event that occured.",
								"types": [
									"global.PointerEvent"
								]
							}
						},
						"return": {
							"types": [
								"void"
							]
						}
					},
					"meta": {
						"files": [
							{
								"path": "code/highcharts.src.js",
								"line": 26515
							}
						]
					}
				},
				{
					"doclet": {
						"name": "Highcharts.PointMouseOverCallbackFunction",
						"description": "Gets fired when the mouse enters the area close to the point.",
						"kind": "typedef",
						"types": [
							"function"
						],
						"parameters": {
							"this": {
								"description": "Point where the event occured.",
								"types": [
									"Highcharts.Point"
								]
							},
							"event": {
								"description": "Event that occured.",
								"types": [
									"global.Event"
								]
							}
						},
						"return": {
							"types": [
								"void"
							]
						}
					},
					"meta": {
						"files": [
							{
								"path": "code/highcharts.src.js",
								"line": 26526
							}
						]
					}
				},
				{
					"doclet": {
						"name": "Highcharts.PointOptionsObject",
						"description": "The generic point options for all series.\n\nIn TypeScript you have to extend `PointOptionsObject` with an additional\ndeclaration to allow custom data options:\n\n```\ndeclare interface PointOptionsObject {\n customProperty: string;\n}\n```",
						"kind": "interface"
					},
					"meta": {
						"files": [
							{
								"path": "code/highcharts.src.js",
								"line": 26537
							}
						]
					},
					"children": [
						{
							"doclet": {
								"name": "Highcharts.PointOptionsObject.accessibility",
								"description": "",
								"kind": "member",
								"types": [
									"Highcharts.PointAccessibilityOptionsObject",
									"undefined"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/modules/accessibility.src.js",
										"line": 8299
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.PointOptionsObject.pointPadding",
								"description": "Heatmap series only. Point padding for a single point.",
								"kind": "member",
								"types": [
									"number",
									"undefined"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/modules/heatmap.src.js",
										"line": 2381
									},
									{
										"path": "code/modules/map.src.js",
										"line": 7561
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.PointOptionsObject.value",
								"description": "Heatmap series only. The value of the point, resulting in a color controled\nby options as set in the colorAxis configuration.",
								"kind": "member",
								"types": [
									"number",
									"null",
									"undefined"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/modules/heatmap.src.js",
										"line": 2385
									},
									{
										"path": "code/modules/map.src.js",
										"line": 7565
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.PointOptionsObject.x2",
								"description": "The ending X value of the range point.",
								"kind": "member",
								"types": [
									"number",
									"undefined"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/modules/gantt.src.js",
										"line": 309
									},
									{
										"path": "code/modules/xrange.src.js",
										"line": 309
									}
								]
							}
						}
					]
				},
				{
					"doclet": {
						"name": "Highcharts.PointOptionsType",
						"description": "Possible option types for a data point. Use `null` to indicate a gap.",
						"kind": "typedef",
						"types": [
							"number",
							"string",
							"Highcharts.PointOptionsObject",
							"Array.<(number|string|null)>",
							"null"
						]
					},
					"meta": {
						"files": [
							{
								"path": "code/highcharts.src.js",
								"line": 26551
							}
						]
					}
				},
				{
					"doclet": {
						"name": "Highcharts.PointRemoveCallbackFunction",
						"description": "Gets fired when the point is removed using the `.remove()` method.",
						"kind": "typedef",
						"types": [
							"function"
						],
						"parameters": {
							"this": {
								"description": "Point where the event occured.",
								"types": [
									"Highcharts.Point"
								]
							},
							"event": {
								"description": "Event that occured.",
								"types": [
									"global.Event"
								]
							}
						},
						"return": {
							"types": [
								"void"
							]
						}
					},
					"meta": {
						"files": [
							{
								"path": "code/highcharts.src.js",
								"line": 26556
							}
						]
					}
				},
				{
					"doclet": {
						"name": "Highcharts.PointSelectCallbackFunction",
						"description": "Gets fired when the point is selected either programmatically or following a\nclick on the point.",
						"kind": "typedef",
						"types": [
							"function"
						],
						"parameters": {
							"this": {
								"description": "Point where the event occured.",
								"types": [
									"Highcharts.Point"
								]
							},
							"event": {
								"description": "Event that occured.",
								"types": [
									"Highcharts.PointInteractionEventObject"
								]
							}
						},
						"return": {
							"types": [
								"void"
							]
						}
					},
					"meta": {
						"files": [
							{
								"path": "code/highcharts.src.js",
								"line": 26618
							}
						]
					}
				},
				{
					"doclet": {
						"name": "Highcharts.PointSonifyOptionsObject",
						"description": "Options for sonifying a point.",
						"kind": "interface"
					},
					"meta": {
						"files": [
							{
								"path": "code/modules/sonification.src.js",
								"line": 1234
							}
						]
					},
					"children": [
						{
							"doclet": {
								"name": "Highcharts.PointSonifyOptionsObject.dataExtremes",
								"description": "Optionally provide the minimum/maximum values for the points. If this is not\nsupplied, it is calculated from the points in the chart on demand. This\noption is supplied in the following format, as a map of point data properties\nto objects with min/max values:\n ```js\n dataExtremes: {\n y: {\n min: 0,\n max: 100\n },\n z: {\n min: -10,\n max: 10\n }\n // Properties used and not provided are calculated on demand\n }\n ```",
								"kind": "member",
								"types": [
									"object",
									"undefined"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/modules/sonification.src.js",
										"line": 1241
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.PointSonifyOptionsObject.instruments",
								"description": "The instrument definitions for this point.",
								"kind": "member",
								"types": [
									"Array.<Highcharts.PointInstrumentObject>"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/modules/sonification.src.js",
										"line": 1237
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.PointSonifyOptionsObject.onEnd",
								"description": "Callback called when the sonification has finished.",
								"kind": "member",
								"types": [
									"function",
									"undefined"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/modules/sonification.src.js",
										"line": 1261
									}
								]
							}
						}
					]
				},
				{
					"doclet": {
						"name": "Highcharts.PointStateValue",
						"description": "Possible key values for the point state options.",
						"kind": "typedef",
						"types": [
							"\"hover\"",
							"\"inactive\"",
							"\"normal\"",
							"\"select\""
						]
					},
					"meta": {
						"files": [
							{
								"path": "code/highcharts.src.js",
								"line": 26567
							}
						]
					}
				},
				{
					"doclet": {
						"name": "Highcharts.PointUnselectCallbackFunction",
						"description": "Fires when the point is unselected either programmatically or following a\nclick on the point.",
						"kind": "typedef",
						"types": [
							"function"
						],
						"parameters": {
							"this": {
								"description": "Point where the event occured.",
								"types": [
									"Highcharts.Point"
								]
							},
							"event": {
								"description": "Event that occured.",
								"types": [
									"Highcharts.PointInteractionEventObject"
								]
							}
						},
						"return": {
							"types": [
								"void"
							]
						}
					},
					"meta": {
						"files": [
							{
								"path": "code/highcharts.src.js",
								"line": 26630
							}
						]
					}
				},
				{
					"doclet": {
						"name": "Highcharts.PointUpdateCallbackFunction",
						"description": "Gets fired when the point is updated programmatically through the `.update()`\nmethod.",
						"kind": "typedef",
						"types": [
							"function"
						],
						"parameters": {
							"this": {
								"description": "Point where the event occured.",
								"types": [
									"Highcharts.Point"
								]
							},
							"event": {
								"description": "Event that occured.",
								"types": [
									"Highcharts.PointUpdateEventObject"
								]
							}
						},
						"return": {
							"types": [
								"void"
							]
						}
					},
					"meta": {
						"files": [
							{
								"path": "code/highcharts.src.js",
								"line": 26572
							}
						]
					}
				},
				{
					"doclet": {
						"name": "Highcharts.PointUpdateEventObject",
						"description": "Information about the update event.",
						"kind": "interface",
						"types": [
							"global.Event"
						]
					},
					"meta": {
						"files": [
							{
								"path": "code/highcharts.src.js",
								"line": 26584
							}
						]
					},
					"children": [
						{
							"doclet": {
								"name": "Highcharts.PointUpdateEventObject.options",
								"description": "Options data of the update event.",
								"kind": "member",
								"types": [
									"Highcharts.PointOptionsType"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 26589
									}
								]
							}
						}
					]
				},
				{
					"doclet": {
						"name": "Highcharts.Pointer",
						"description": "The mouse and touch tracker object. Each {@link Chart} item has one\nassosiated Pointer item that can be accessed from the {@link Chart.pointer}\nproperty.",
						"kind": "class"
					},
					"meta": {
						"files": [
							{
								"path": "code/highcharts.src.js",
								"line": 26678
							}
						]
					},
					"children": [
						{
							"doclet": {
								"name": "Highcharts.Pointer.constructor",
								"description": "The mouse and touch tracker object. Each {@link Chart} item has one\nassosiated Pointer item that can be accessed from the {@link Chart.pointer}\nproperty.",
								"kind": "constructor",
								"parameters": {
									"chart": {
										"description": "The chart instance.",
										"types": [
											"Highcharts.Chart"
										]
									},
									"options": {
										"description": "The root options object. The pointer uses options from the chart and tooltip\nstructures.",
										"types": [
											"Highcharts.Options"
										]
									}
								},
								"return": {
									"types": [
										"void"
									]
								}
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 0
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.Pointer.destroy",
								"description": "Destroys the Pointer object and disconnects DOM events.",
								"kind": "function",
								"return": {
									"types": [
										"void"
									]
								}
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 26758
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.Pointer.findNearestKDPoint",
								"description": "Finds the closest point to a set of coordinates, using the k-d-tree\nalgorithm.",
								"kind": "function",
								"parameters": {
									"series": {
										"description": "All the series to search in.",
										"types": [
											"Array.<Highcharts.Series>"
										]
									},
									"shared": {
										"description": "Whether it is a shared tooltip or not.",
										"types": [
											"boolean",
											"undefined"
										]
									},
									"e": {
										"description": "The pointer event object, containing chart coordinates of the pointer.",
										"types": [
											"Highcharts.PointerEventObject"
										]
									}
								},
								"return": {
									"types": [
										"Highcharts.Point",
										"undefined"
									],
									"description": "The point closest to given coordinates."
								}
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 26978
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.Pointer.getChartPosition",
								"description": "Return the cached chartPosition if it is available on the Pointer,\notherwise find it. Running offset is quite expensive, so it should be\navoided when we know the chart hasn't moved.",
								"kind": "function",
								"return": {
									"types": [
										"Highcharts.ChartPositionObject"
									],
									"description": "The offset of the chart container within the page"
								}
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 27087
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.Pointer.getCoordinates",
								"description": "Get the click position in terms of axis values.",
								"kind": "function",
								"parameters": {
									"e": {
										"description": "Pointer event, extended with `chartX` and `chartY` properties.",
										"types": [
											"Highcharts.PointerEventObject"
										]
									}
								},
								"return": {
									"types": [
										"Highcharts.PointerAxisCoordinatesObject"
									]
								}
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 27121
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.Pointer.inClass",
								"description": "Utility to detect whether an element has, or has a parent with, a\nspecificclass name. Used on detection of tracker objects and on deciding\nwhether hovering the tooltip should cause the active series to mouse out.",
								"kind": "function",
								"parameters": {
									"element": {
										"description": "The element to investigate.",
										"types": [
											"Highcharts.SVGDOMElement",
											"Highcharts.HTMLDOMElement"
										]
									},
									"className": {
										"description": "The class name to look for.",
										"types": [
											"string"
										]
									}
								},
								"return": {
									"types": [
										"boolean",
										"undefined"
									],
									"description": "True if either the element or one of its parents has the given class\nname."
								}
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 27279
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.Pointer.normalize",
								"description": "Takes a browser event object and extends it with custom Highcharts\nproperties `chartX` and `chartY` in order to work on the internal\ncoordinate system.",
								"kind": "function",
								"parameters": {
									"e": {
										"description": "Event object in standard browsers.",
										"types": [
											"global.MouseEvent",
											"global.PointerEvent",
											"global.TouchEvent"
										]
									},
									"chartPosition": {
										"description": "Additional chart offset.",
										"isOptional": true,
										"types": [
											"Highcharts.OffsetObject"
										]
									}
								},
								"return": {
									"types": [
										"Highcharts.PointerEventObject"
									],
									"description": "A browser event with extended properties `chartX` and `chartY`."
								}
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 27344
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.Pointer.reset",
								"description": "Reset the tracking by hiding the tooltip, the hover series state and the\nhover point",
								"kind": "function",
								"parameters": {
									"allowMove": {
										"description": "Instead of destroying the tooltip altogether, allow moving it if\npossible.",
										"isOptional": true,
										"types": [
											"boolean"
										]
									},
									"delay": {
										"isOptional": true,
										"types": [
											"number"
										]
									}
								},
								"return": {
									"types": [
										"void"
									]
								}
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 27761
									}
								]
							}
						}
					]
				},
				{
					"doclet": {
						"name": "Highcharts.PointerAxisCoordinateObject",
						"description": "One position in relation to an axis.",
						"kind": "interface"
					},
					"meta": {
						"files": [
							{
								"path": "code/highcharts.src.js",
								"line": 28160
							}
						]
					},
					"children": [
						{
							"doclet": {
								"name": "Highcharts.PointerAxisCoordinateObject.axis",
								"description": "Related axis.",
								"kind": "member",
								"types": [
									"Highcharts.Axis"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 28164
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.PointerAxisCoordinateObject.value",
								"description": "Axis value.",
								"kind": "member",
								"types": [
									"number"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 28169
									}
								]
							}
						}
					]
				},
				{
					"doclet": {
						"name": "Highcharts.PointerAxisCoordinatesObject",
						"description": "Positions in terms of axis values.",
						"kind": "interface"
					},
					"meta": {
						"files": [
							{
								"path": "code/highcharts.src.js",
								"line": 28175
							}
						]
					},
					"children": [
						{
							"doclet": {
								"name": "Highcharts.PointerAxisCoordinatesObject.xAxis",
								"description": "Positions on the x-axis.",
								"kind": "member",
								"types": [
									"Array.<Highcharts.PointerAxisCoordinateObject>"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 28179
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.PointerAxisCoordinatesObject.yAxis",
								"description": "Positions on the y-axis.",
								"kind": "member",
								"types": [
									"Array.<Highcharts.PointerAxisCoordinateObject>"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 28183
									}
								]
							}
						}
					]
				},
				{
					"doclet": {
						"name": "Highcharts.PointerCoordinatesObject",
						"description": "Pointer coordinates.",
						"kind": "interface"
					},
					"meta": {
						"files": [
							{
								"path": "code/highcharts.src.js",
								"line": 28188
							}
						]
					},
					"children": [
						{
							"doclet": {
								"name": "Highcharts.PointerCoordinatesObject.chartX",
								"description": "",
								"kind": "member",
								"types": [
									"number"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 28192
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.PointerCoordinatesObject.chartY",
								"description": "",
								"kind": "member",
								"types": [
									"number"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 28195
									}
								]
							}
						}
					]
				},
				{
					"doclet": {
						"name": "Highcharts.PointerEventObject",
						"description": "A native browser mouse or touch event, extended with position information\nrelative to the {@link Chart.container}.",
						"kind": "interface",
						"types": [
							"global.PointerEvent"
						]
					},
					"meta": {
						"files": [
							{
								"path": "code/highcharts.src.js",
								"line": 28199
							}
						]
					},
					"children": [
						{
							"doclet": {
								"name": "Highcharts.PointerEventObject.chartX",
								"description": "The X coordinate of the pointer interaction relative to the chart.",
								"kind": "member",
								"types": [
									"number"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 28205
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.PointerEventObject.chartY",
								"description": "The Y coordinate of the pointer interaction relative to the chart.",
								"kind": "member",
								"types": [
									"number"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 28210
									}
								]
							}
						}
					]
				},
				{
					"doclet": {
						"name": "Highcharts.PositionObject",
						"description": "An object containing `x` and `y` properties for the position of an element.",
						"kind": "interface"
					},
					"meta": {
						"files": [
							{
								"path": "code/highcharts.src.js",
								"line": 14048
							}
						]
					},
					"children": [
						{
							"doclet": {
								"name": "Highcharts.PositionObject.x",
								"description": "X position of the element.",
								"kind": "member",
								"types": [
									"number"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 14052
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.PositionObject.y",
								"description": "Y position of the element.",
								"kind": "member",
								"types": [
									"number"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 14056
									}
								]
							}
						}
					]
				},
				{
					"doclet": {
						"name": "Highcharts.RadialGradientColorObject",
						"description": "Defines the center position and the radius for a gradient.",
						"kind": "interface"
					},
					"meta": {
						"files": [
							{
								"path": "code/highcharts.src.js",
								"line": 3744
							}
						]
					},
					"children": [
						{
							"doclet": {
								"name": "Highcharts.RadialGradientColorObject.cx",
								"description": "Center horizontal position relative to the shape. Float ranges 0-1.",
								"kind": "member",
								"types": [
									"number"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 3748
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.RadialGradientColorObject.cy",
								"description": "Center vertical position relative to the shape. Float ranges 0-1.",
								"kind": "member",
								"types": [
									"number"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 3752
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.RadialGradientColorObject.r",
								"description": "Radius relative to the shape. Float ranges 0-1.",
								"kind": "member",
								"types": [
									"number"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 3756
									}
								]
							}
						}
					]
				},
				{
					"doclet": {
						"name": "Highcharts.RangeObject",
						"description": "Describes a range.",
						"kind": "interface"
					},
					"meta": {
						"files": [
							{
								"path": "code/highcharts.src.js",
								"line": 2104
							}
						]
					},
					"children": [
						{
							"doclet": {
								"name": "Highcharts.RangeObject.max",
								"description": "Maximum number of the range.",
								"kind": "member",
								"types": [
									"number"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 2108
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.RangeObject.min",
								"description": "Minimum number of the range.",
								"kind": "member",
								"types": [
									"number"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 2112
									}
								]
							}
						}
					]
				},
				{
					"doclet": {
						"name": "Highcharts.RangeSelectorButtonTypeValue",
						"description": "Define the time span for the button",
						"kind": "typedef",
						"types": [
							"\"all\"",
							"\"day\"",
							"\"hour\"",
							"\"millisecond\"",
							"\"minute\"",
							"\"month\"",
							"\"second\"",
							"\"week\"",
							"\"year\"",
							"\"ytd\""
						]
					},
					"meta": {
						"files": [
							{
								"path": "code/modules/accessibility.src.js",
								"line": 4493
							},
							{
								"path": "code/modules/gantt.src.js",
								"line": 8834
							},
							{
								"path": "code/modules/stock.src.js",
								"line": 8283
							}
						]
					}
				},
				{
					"doclet": {
						"name": "Highcharts.RangeSelectorClickCallbackFunction",
						"description": "Callback function to react on button clicks.",
						"kind": "typedef",
						"types": [
							"function"
						],
						"parameters": {
							"e": {
								"description": "Event arguments.",
								"types": [
									"global.Event"
								]
							},
							"Return": {
								"description": "false to cancel the default button event.",
								"types": [
									"boolean",
									"undefined"
								]
							}
						},
						"return": {
							"types": [
								"void"
							]
						}
					},
					"meta": {
						"files": [
							{
								"path": "code/modules/accessibility.src.js",
								"line": 4498
							},
							{
								"path": "code/modules/gantt.src.js",
								"line": 8839
							},
							{
								"path": "code/modules/stock.src.js",
								"line": 8288
							}
						]
					}
				},
				{
					"doclet": {
						"name": "Highcharts.RangeSelectorParseCallbackFunction",
						"description": "Callback function to parse values entered in the input boxes and return a\nvalid JavaScript time as milliseconds since 1970.",
						"kind": "typedef",
						"types": [
							"function"
						],
						"parameters": {
							"value": {
								"description": "Input value to parse.",
								"types": [
									"string"
								]
							}
						},
						"return": {
							"types": [
								"number"
							],
							"description": "Parsed JavaScript time value."
						}
					},
					"meta": {
						"files": [
							{
								"path": "code/modules/accessibility.src.js",
								"line": 4509
							},
							{
								"path": "code/modules/gantt.src.js",
								"line": 8850
							},
							{
								"path": "code/modules/stock.src.js",
								"line": 8299
							}
						]
					}
				},
				{
					"doclet": {
						"name": "Highcharts.RectangleObject",
						"description": "A rectangle.",
						"kind": "interface"
					},
					"meta": {
						"files": [
							{
								"path": "code/highcharts.src.js",
								"line": 14061
							}
						]
					},
					"children": [
						{
							"doclet": {
								"name": "Highcharts.RectangleObject.height",
								"description": "Height of the rectangle.",
								"kind": "member",
								"types": [
									"number"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 14065
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.RectangleObject.width",
								"description": "Width of the rectangle.",
								"kind": "member",
								"types": [
									"number"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 14069
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.RectangleObject.x",
								"description": "Horizontal position of the rectangle.",
								"kind": "member",
								"types": [
									"number"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 14073
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.RectangleObject.y",
								"description": "Vertical position of the rectangle.",
								"kind": "member",
								"types": [
									"number"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 14077
									}
								]
							}
						}
					]
				},
				{
					"doclet": {
						"name": "Highcharts.RelativeSize",
						"description": "If a number is given, it defines the pixel length. If a percentage string is\ngiven, like for example `'50%'`, the setting defines a length relative to a\nbase size, for example the size of a container.",
						"kind": "typedef",
						"types": [
							"number",
							"string"
						]
					},
					"meta": {
						"files": [
							{
								"path": "code/highcharts.src.js",
								"line": 2117
							}
						]
					}
				},
				{
					"doclet": {
						"name": "Highcharts.Renderer",
						"description": "The symbol callbacks are generated on the SVGRenderer object in all browsers.\nEven VML browsers need this in order to generate shapes in export. Now share\nthem with the VMLRenderer.",
						"kind": "member"
					},
					"meta": {
						"files": [
							{
								"path": "code/modules/stock.src.js",
								"line": 4205
							}
						]
					}
				},
				{
					"doclet": {
						"name": "Highcharts.ResponsiveCallbackFunction",
						"description": "A callback function to gain complete control on when the responsive rule\napplies.",
						"kind": "typedef",
						"types": [
							"function"
						],
						"parameters": {
							"this": {
								"description": "Chart context.",
								"types": [
									"Highcharts.Chart"
								]
							}
						},
						"return": {
							"types": [
								"boolean"
							],
							"description": "Return `true` if it applies."
						}
					},
					"meta": {
						"files": [
							{
								"path": "code/highcharts.src.js",
								"line": 47362
							}
						]
					}
				},
				{
					"doclet": {
						"name": "Highcharts.SVGAttributes",
						"description": "An object of key-value pairs for SVG attributes. Attributes in Highcharts\nelements for the most parts correspond to SVG, but some are specific to\nHighcharts, like `zIndex`, `rotation`, `rotationOriginX`,\n`rotationOriginY`, `translateX`, `translateY`, `scaleX` and `scaleY`. SVG\nattributes containing a hyphen are _not_ camel-cased, they should be\nquoted to preserve the hyphen.",
						"kind": "interface"
					},
					"meta": {
						"files": [
							{
								"path": "code/highcharts.src.js",
								"line": 11013
							}
						]
					},
					"children": [
						{
							"doclet": {
								"name": "Highcharts.SVGAttributes.[key:string]",
								"description": "",
								"kind": "member",
								"types": [
									"*"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 11030
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.SVGAttributes.d",
								"description": "",
								"kind": "member",
								"types": [
									"string",
									"Highcharts.SVGPathArray",
									"undefined"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 11033
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.SVGAttributes.fill",
								"description": "",
								"kind": "member",
								"types": [
									"Highcharts.ColorString",
									"Highcharts.GradientColorObject",
									"Highcharts.PatternObject",
									"undefined"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 11036
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.SVGAttributes.inverted",
								"description": "",
								"kind": "member",
								"types": [
									"boolean",
									"undefined"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 11039
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.SVGAttributes.matrix",
								"description": "",
								"kind": "member",
								"types": [
									"Array.<number>",
									"undefined"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 11042
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.SVGAttributes.rotation",
								"description": "",
								"kind": "member",
								"types": [
									"number",
									"undefined"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 11045
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.SVGAttributes.rotationOriginX",
								"description": "",
								"kind": "member",
								"types": [
									"number",
									"undefined"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 11048
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.SVGAttributes.rotationOriginY",
								"description": "",
								"kind": "member",
								"types": [
									"number",
									"undefined"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 11051
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.SVGAttributes.scaleX",
								"description": "",
								"kind": "member",
								"types": [
									"number",
									"undefined"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 11054
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.SVGAttributes.scaleY",
								"description": "",
								"kind": "member",
								"types": [
									"number",
									"undefined"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 11057
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.SVGAttributes.stroke",
								"description": "",
								"kind": "member",
								"types": [
									"Highcharts.ColorString",
									"Highcharts.GradientColorObject",
									"Highcharts.PatternObject",
									"undefined"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 11060
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.SVGAttributes.style",
								"description": "",
								"kind": "member",
								"types": [
									"string",
									"Highcharts.CSSObject",
									"undefined"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 11063
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.SVGAttributes.translateX",
								"description": "",
								"kind": "member",
								"types": [
									"number",
									"undefined"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 11066
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.SVGAttributes.translateY",
								"description": "",
								"kind": "member",
								"types": [
									"number",
									"undefined"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 11069
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.SVGAttributes.zIndex",
								"description": "",
								"kind": "member",
								"types": [
									"number",
									"undefined"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 11072
									}
								]
							}
						}
					]
				},
				{
					"doclet": {
						"name": "Highcharts.SVGDOMElement",
						"description": "An SVG DOM element. The type is a reference to the regular SVGElement in the\nglobal scope.",
						"kind": "typedef",
						"see": [
							"https://developer.mozilla.org/en-US/docs/Web/API/SVGElement"
						],
						"types": [
							"globals.GlobalSVGElement"
						]
					},
					"meta": {
						"files": [
							{
								"path": "code/highcharts.src.js",
								"line": 11076
							}
						]
					}
				},
				{
					"doclet": {
						"name": "Highcharts.SVGElement",
						"description": "The SVGElement prototype is a JavaScript wrapper for SVG elements used in the\nrendering layer of Highcharts. Combined with the\n{@link Highcharts.SVGRenderer}\nobject, these prototypes allow freeform annotation in the charts or even in\nHTML pages without instanciating a chart. The SVGElement can also wrap HTML\nlabels, when `text` or `label` elements are created with the `useHTML`\nparameter.\n\nThe SVGElement instances are created through factory functions on the\n{@link Highcharts.SVGRenderer}\nobject, like\n{@link Highcharts.SVGRenderer#rect|rect},\n{@link Highcharts.SVGRenderer#path|path},\n{@link Highcharts.SVGRenderer#text|text},\n{@link Highcharts.SVGRenderer#label|label},\n{@link Highcharts.SVGRenderer#g|g}\nand more.",
						"kind": "class"
					},
					"meta": {
						"files": [
							{
								"path": "code/highcharts.src.js",
								"line": 8846
							}
						]
					},
					"children": [
						{
							"doclet": {
								"name": "Highcharts.SVGElement.add",
								"description": "Add the element to the DOM. All elements must be added this way.",
								"kind": "function",
								"parameters": {
									"parent": {
										"description": "The parent item to add it to. If undefined, the element is added\n       to the {@link Highcharts.SVGRenderer.box}.",
										"isOptional": true,
										"types": [
											"Highcharts.SVGElement"
										]
									}
								},
								"return": {
									"types": [
										"Highcharts.SVGElement"
									],
									"description": "Returns the SVGElement for chaining."
								}
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 8940
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.SVGElement.addClass",
								"description": "Add a class name to an element.",
								"kind": "function",
								"parameters": {
									"className": {
										"description": "The new class name to add.",
										"types": [
											"string"
										]
									},
									"replace": {
										"description": "When true, the existing class name(s) will be overwritten with the new\none. When false, the new one is added.",
										"isOptional": true,
										"types": [
											"boolean"
										]
									}
								},
								"return": {
									"types": [
										"Highcharts.SVGElement"
									],
									"description": "Return the SVG element for chainability."
								}
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 8989
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.SVGElement.align",
								"description": "Align the element relative to the chart or another box.",
								"kind": "function",
								"parameters": {
									"alignOptions": {
										"description": "The alignment options. The function can be called without this\n       parameter in order to re-align an element after the box has been\n       updated.",
										"isOptional": true,
										"types": [
											"Highcharts.AlignObject"
										]
									},
									"alignByTranslate": {
										"description": "Align element by translation.",
										"isOptional": true,
										"types": [
											"boolean"
										]
									},
									"box": {
										"description": "The box to align to, needs a width and height. When the box is a\n       string, it refers to an object in the Renderer. For example, when\n       box is `spacingBox`, it refers to `Renderer.spacingBox` which\n       holds `width`, `height`, `x` and `y` properties.",
										"isOptional": true,
										"types": [
											"string",
											"Highcharts.BBoxObject"
										]
									}
								},
								"return": {
									"types": [
										"Highcharts.SVGElement"
									],
									"description": "Returns the SVGElement for chaining."
								}
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 9040
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.SVGElement.animate",
								"description": "Animate to given attributes or CSS properties.",
								"kind": "function",
								"parameters": {
									"params": {
										"description": "SVG attributes or CSS to animate.",
										"types": [
											"Highcharts.SVGAttributes"
										]
									},
									"options": {
										"description": "Animation options.",
										"isOptional": true,
										"types": [
											"boolean",
											"Partial.<Highcharts.AnimationOptionsObject>"
										]
									},
									"complete": {
										"description": "Function to perform at the end of animation.",
										"isOptional": true,
										"types": [
											"function"
										]
									}
								},
								"return": {
									"types": [
										"Highcharts.SVGElement"
									],
									"description": "Returns the SVGElement for chaining."
								}
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 9142
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.SVGElement.attr",
								"description": "",
								"kind": "function",
								"parameters": {
									"key": {
										"types": [
											"string"
										]
									}
								},
								"return": {
									"types": [
										"number",
										"string"
									]
								}
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 9278
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.SVGElement.attr",
								"description": "Apply native and custom attributes to the SVG elements.\n\nIn order to set the rotation center for rotation, set x and y to 0 and\nuse `translateX` and `translateY` attributes to position the element\ninstead.\n\nAttributes frequently used in Highcharts are `fill`, `stroke`,\n`stroke-width`.",
								"kind": "function",
								"parameters": {
									"hash": {
										"description": "The native and custom SVG attributes.",
										"isOptional": true,
										"types": [
											"string",
											"Highcharts.SVGAttributes"
										]
									},
									"val": {
										"description": "If the type of the first argument is `string`, the second can be a\n       value, which will serve as a single attribute setter. If the first\n       argument is a string and the second is undefined, the function\n       serves as a getter and the current value of the property is\n       returned.",
										"isOptional": true,
										"types": [
											"number",
											"string",
											"Highcharts.SVGPathArray"
										]
									},
									"complete": {
										"description": "A callback function to execute after setting the attributes. This\n       makes the function compliant and interchangeable with the\n       {@link SVGElement#animate} function.",
										"isOptional": true,
										"types": [
											"function"
										]
									},
									"continueAnimation": {
										"description": "Used internally when `.attr` is called as part of an animation\n       step. Otherwise, calling `.attr` for an attribute will stop\n       animation for that attribute.",
										"isOptional": true,
										"types": [
											"boolean"
										]
									}
								},
								"return": {
									"types": [
										"Highcharts.SVGElement"
									],
									"description": "If used as a setter, it returns the current\n        {@link Highcharts.SVGElement} so the calls can be chained. If\n        used as a getter, the current value of the attribute is returned."
								}
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 9282
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.SVGElement.clip",
								"description": "Apply a clipping rectangle to this element.",
								"kind": "function",
								"parameters": {
									"clipRect": {
										"description": "The clipping rectangle. If skipped, the current clip is removed.",
										"isOptional": true,
										"types": [
											"Highcharts.ClipRectElement"
										]
									}
								},
								"return": {
									"types": [
										"Highcharts.SVGElement"
									],
									"description": "Returns the SVG element to allow chaining."
								}
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 9397
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.SVGElement.crisp",
								"description": "Calculate the coordinates needed for drawing a rectangle crisply and\nreturn the calculated attributes.",
								"kind": "function",
								"parameters": {
									"rect": {
										"description": "Rectangle to crisp.",
										"types": [
											"Highcharts.RectangleObject"
										]
									},
									"strokeWidth": {
										"description": "The stroke width to consider when computing crisp positioning. It can\nalso be set directly on the rect parameter.",
										"isOptional": true,
										"types": [
											"number"
										]
									}
								},
								"return": {
									"types": [
										"Highcharts.RectangleObject"
									],
									"description": "The modified rectangle arguments."
								}
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 9413
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.SVGElement.css",
								"description": "Set styles for the element. In addition to CSS styles supported by\nnative SVG and HTML elements, there are also some custom made for\nHighcharts, like `width`, `ellipsis` and `textOverflow` for SVG text\nelements.",
								"kind": "function",
								"parameters": {
									"styles": {
										"description": "The new CSS styles.",
										"types": [
											"Highcharts.CSSObject"
										]
									}
								},
								"return": {
									"types": [
										"Highcharts.SVGElement"
									],
									"description": "Return the SVG element for chaining."
								}
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 9566
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.SVGElement.destroy",
								"description": "Destroy the element and element wrapper and clear up the DOM and event\nhooks.",
								"kind": "function",
								"return": {
									"types": [
										"void"
									]
								}
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 9695
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.SVGElement.element",
								"description": "The primary DOM node. Each `SVGElement` instance wraps a main DOM\nnode, but may also represent more nodes.",
								"kind": "member",
								"types": [
									"Highcharts.SVGDOMElement",
									"Highcharts.HTMLDOMElement"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 10117
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.SVGElement.fadeIn",
								"description": "A general fadeIn method.",
								"kind": "function",
								"parameters": {
									"animation": {
										"description": "The animation options for the element fade.",
										"isOptional": true,
										"types": [
											"boolean",
											"Partial.<Highcharts.AnimationOptionsObject>"
										]
									}
								},
								"return": {
									"types": [
										"void"
									]
								}
							},
							"meta": {
								"files": [
									{
										"path": "code/modules/drilldown.src.js",
										"line": 448
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.SVGElement.fadeOut",
								"description": "Fade out an element by animating its opacity down to 0, and hide it on\ncomplete. Used internally for the tooltip.",
								"kind": "function",
								"parameters": {
									"duration": {
										"description": "The fade duration in milliseconds.",
										"isOptional": true,
										"types": [
											"number"
										]
									}
								},
								"return": {
									"types": [
										"void"
									]
								}
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 9850
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.SVGElement.getBBox",
								"description": "Get the bounding box (width, height, x and y) for the element. Generally\nused to get rendered text size. Since this is called a lot in charts,\nthe results are cached based on text properties, in order to save DOM\ntraffic. The returned bounding box includes the rotation, so for example\na single text line of rotation 90 will report a greater height, and a\nwidth corresponding to the line-height.",
								"kind": "function",
								"parameters": {
									"reload": {
										"description": "Skip the cache and get the updated DOM bouding box.",
										"isOptional": true,
										"types": [
											"boolean"
										]
									},
									"rot": {
										"description": "Override the element's rotation. This is internally used on axis\n       labels with a value of 0 to find out what the bounding box would\n       be have been if it were not rotated.",
										"isOptional": true,
										"types": [
											"number"
										]
									}
								},
								"return": {
									"types": [
										"Highcharts.BBoxObject"
									],
									"description": "The bounding box with `x`, `y`, `width` and `height` properties."
								}
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 9886
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.SVGElement.getStyle",
								"description": "Get the computed style. Only in styled mode.",
								"kind": "function",
								"parameters": {
									"prop": {
										"description": "The property name to check for.",
										"types": [
											"string"
										]
									}
								},
								"return": {
									"types": [
										"string"
									],
									"description": "The current computed value."
								}
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 10041
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.SVGElement.hasClass",
								"description": "Check if an element has the given class name.",
								"kind": "function",
								"parameters": {
									"className": {
										"description": "The class name to check for.",
										"types": [
											"string"
										]
									}
								},
								"return": {
									"types": [
										"boolean"
									],
									"description": "Whether the class name is found."
								}
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 10060
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.SVGElement.hide",
								"description": "Hide the element, similar to setting the `visibility` attribute to\n`hidden`.",
								"kind": "function",
								"parameters": {
									"hideByTranslation": {
										"description": "The flag to determine if element should be hidden by moving out\n       of the viewport. Used for example for dataLabels.",
										"isOptional": true,
										"types": [
											"boolean"
										]
									}
								},
								"return": {
									"types": [
										"Highcharts.SVGElement"
									],
									"description": "Returns the SVGElement for chaining."
								}
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 10076
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.SVGElement.init",
								"description": "Initialize the SVG element. This function only exists to make the\ninitialization process overridable. It should not be called directly.",
								"kind": "function",
								"parameters": {
									"renderer": {
										"description": "The SVGRenderer instance to initialize to.",
										"types": [
											"Highcharts.SVGRenderer"
										]
									},
									"nodeName": {
										"description": "The SVG node name.",
										"types": [
											"string"
										]
									}
								},
								"return": {
									"types": [
										"void"
									]
								}
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 10104
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.SVGElement.invert",
								"description": "Invert a group, rotate and flip. This is used internally on inverted\ncharts, where the points and graphs are drawn as if not inverted, then\nthe series group elements are inverted.",
								"kind": "function",
								"parameters": {
									"inverted": {
										"description": "Whether to invert or not. An inverted shape can be un-inverted by\n       setting it to false.",
										"types": [
											"boolean"
										]
									}
								},
								"return": {
									"types": [
										"Highcharts.SVGElement"
									],
									"description": "Return the SVGElement for chaining."
								}
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 10136
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.SVGElement.on",
								"description": "Add an event listener. This is a simple setter that replaces the\nprevious event of the same type added by this function, as opposed to\nthe {@link Highcharts#addEvent} function.",
								"kind": "function",
								"parameters": {
									"eventType": {
										"description": "The event type.",
										"types": [
											"string"
										]
									},
									"handler": {
										"description": "The handler callback.",
										"types": [
											"function"
										]
									}
								},
								"return": {
									"types": [
										"Highcharts.SVGElement"
									],
									"description": "The SVGElement for chaining."
								}
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 10155
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.SVGElement.removeClass",
								"description": "Remove a class name from the element.",
								"kind": "function",
								"parameters": {
									"className": {
										"description": "The class name to remove.",
										"types": [
											"string",
											"RegExp"
										]
									}
								},
								"return": {
									"types": [
										"Highcharts.SVGElement"
									],
									"description": "Returns the SVG element for chainability."
								}
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 10197
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.SVGElement.renderer",
								"description": "The renderer that the SVGElement belongs to.",
								"kind": "member",
								"types": [
									"Highcharts.SVGRenderer"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 10127
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.SVGElement.setRadialReference",
								"description": "Set the coordinates needed to draw a consistent radial gradient across\na shape regardless of positioning inside the chart. Used on pie slices\nto make all the slices have the same radial reference point.",
								"kind": "function",
								"parameters": {
									"coordinates": {
										"description": "The center reference. The format is `[centerX, centerY, diameter]` in\npixels.",
										"types": [
											"Array.<number>"
										]
									}
								},
								"return": {
									"types": [
										"Highcharts.SVGElement"
									],
									"description": "Returns the SVGElement for chaining."
								}
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 10241
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.SVGElement.shadow",
								"description": "Add a shadow to the element. Must be called after the element is added to\nthe DOM. In styled mode, this method is not used, instead use `defs` and\nfilters.",
								"kind": "function",
								"parameters": {
									"shadowOptions": {
										"description": "The shadow options. If `true`, the default options are applied. If\n       `false`, the current shadow will be removed.",
										"isOptional": true,
										"types": [
											"boolean",
											"Highcharts.ShadowOptionsObject"
										]
									},
									"group": {
										"description": "The SVG group element where the shadows will be applied. The\n       default is to add it to the same parent as the current element.\n       Internally, this is ised for pie slices, where all the shadows are\n       added to an element behind all the slices.",
										"isOptional": true,
										"types": [
											"Highcharts.SVGElement"
										]
									},
									"cutOff": {
										"description": "Used internally for column shadows.",
										"isOptional": true,
										"types": [
											"boolean"
										]
									}
								},
								"return": {
									"types": [
										"Highcharts.SVGElement"
									],
									"description": "Returns the SVGElement for chaining."
								}
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 10402
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.SVGElement.show",
								"description": "Show the element after it has been hidden.",
								"kind": "function",
								"parameters": {
									"inherit": {
										"description": "Set the visibility attribute to `inherit` rather than `visible`.\n       The difference is that an element with `visibility=\"visible\"`\n       will be visible even if the parent is hidden.",
										"isOptional": true,
										"types": [
											"boolean"
										]
									}
								},
								"return": {
									"types": [
										"Highcharts.SVGElement"
									],
									"description": "Returns the SVGElement for chaining."
								}
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 10506
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.SVGElement.strokeWidth",
								"description": "Get the computed stroke width in pixel values. This is used extensively\nwhen drawing shapes to ensure the shapes are rendered crisp and\npositioned correctly relative to each other. Using\n`shape-rendering: crispEdges` leaves us less control over positioning,\nfor example when we want to stack columns next to each other, or position\nthings pixel-perfectly within the plot box.\n\nThe common pattern when placing a shape is:\n- Create the SVGElement and add it to the DOM. In styled mode, it will\n now receive a stroke width from the style sheet. In classic mode we\n will add the `stroke-width` attribute.\n- Read the computed `elem.strokeWidth()`.\n- Place it based on the stroke width.",
								"kind": "function",
								"return": {
									"types": [
										"number"
									],
									"description": "The stroke width in pixels. Even if the given stroke widtch (in CSS or by\nattributes) is based on `em` or other units, the pixel size is returned."
								}
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 10552
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.SVGElement.toFront",
								"description": "Bring the element to the front. Alternatively, a new zIndex can be set.",
								"kind": "function",
								"return": {
									"types": [
										"Highcharts.SVGElement"
									],
									"description": "Returns the SVGElement for chaining."
								}
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 10671
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.SVGElement.translate",
								"description": "Move an object and its children by x and y values.",
								"kind": "function",
								"parameters": {
									"x": {
										"description": "The x value.",
										"types": [
											"number"
										]
									},
									"y": {
										"description": "The y value.",
										"types": [
											"number"
										]
									}
								},
								"return": {
									"types": [
										"Highcharts.SVGElement"
									]
								}
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 10687
									}
								]
							}
						}
					]
				},
				{
					"doclet": {
						"name": "Highcharts.SVGPathArray",
						"description": "Array of path commands, that will go into the `d` attribute of an SVG\nelement.",
						"kind": "typedef",
						"types": [
							"Array.<(Array.<Highcharts.SVGPathCommand>|Array.<Highcharts.SVGPathCommand, number>|Array.<Highcharts.SVGPathCommand, number, number>|Array.<Highcharts.SVGPathCommand, number, number, number, number>|Array.<Highcharts.SVGPathCommand, number, number, number, number, number, number>|Array.<Highcharts.SVGPathCommand, number, number, number, number, number, number, number>)>"
						]
					},
					"meta": {
						"files": [
							{
								"path": "code/highcharts.src.js",
								"line": 14123
							}
						]
					}
				},
				{
					"doclet": {
						"name": "Highcharts.SVGPathCommand",
						"description": "Possible path commands in an SVG path array. Valid values are `A`, `C`, `H`,\n`L`, `M`, `Q`, `S`, `T`, `V`, `Z`.",
						"kind": "typedef",
						"values": "[\"a\",\"c\",\"h\",\"l\",\"m\",\"q\",\"s\",\"t\",\"v\",\"z\",\"A\",\"C\",\"H\",\"L\",\"M\",\"Q\",\"S\",\"T\",\"V\",\"Z\"]",
						"types": [
							"string"
						]
					},
					"meta": {
						"files": [
							{
								"path": "code/highcharts.src.js",
								"line": 14129
							}
						]
					}
				},
				{
					"doclet": {
						"name": "Highcharts.SVGRenderer",
						"description": "Allows direct access to the Highcharts rendering layer in order to draw\nprimitive shapes like circles, rectangles, paths or text directly on a chart,\nor independent from any chart. The SVGRenderer represents a wrapper object\nfor SVG in modern browsers. Through the VMLRenderer, part of the `oldie.js`\nmodule, it also brings vector graphics to IE <= 8.\n\nAn existing chart's renderer can be accessed through {@link Chart.renderer}.\nThe renderer can also be used completely decoupled from a chart.",
						"kind": "class"
					},
					"meta": {
						"files": [
							{
								"path": "code/highcharts.src.js",
								"line": 12310
							}
						]
					},
					"children": [
						{
							"doclet": {
								"name": "Highcharts.SVGRenderer.Element",
								"description": "A pointer to the renderer's associated Element class. The VMLRenderer\nwill have a pointer to VMLElement here.",
								"kind": "member",
								"types": [
									"Highcharts.SVGElement"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 13951
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.SVGRenderer.arc",
								"description": "Draw and return an arc.",
								"kind": "function",
								"parameters": {
									"x": {
										"description": "Center X position.",
										"isOptional": true,
										"types": [
											"number"
										]
									},
									"y": {
										"description": "Center Y position.",
										"isOptional": true,
										"types": [
											"number"
										]
									},
									"r": {
										"description": "The outer radius' of the arc.",
										"isOptional": true,
										"types": [
											"number"
										]
									},
									"innerR": {
										"description": "Inner radius like used in donut charts.",
										"isOptional": true,
										"types": [
											"number"
										]
									},
									"start": {
										"description": "The starting angle of the arc in radians, where 0 is to the right and\n`-Math.PI/2` is up.",
										"isOptional": true,
										"types": [
											"number"
										]
									},
									"end": {
										"description": "The ending angle of the arc in radians, where 0 is to the right and\n`-Math.PI/2` is up.",
										"isOptional": true,
										"types": [
											"number"
										]
									}
								},
								"return": {
									"types": [
										"Highcharts.SVGElement"
									],
									"description": "The generated wrapper element."
								}
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 13035
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.SVGRenderer.arc",
								"description": "Draw and return an arc. Overloaded function that takes arguments object.",
								"kind": "function",
								"parameters": {
									"attribs": {
										"description": "Initial SVG attributes.",
										"types": [
											"Highcharts.SVGAttributes"
										]
									}
								},
								"return": {
									"types": [
										"Highcharts.SVGElement"
									],
									"description": "The generated wrapper element."
								}
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 13065
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.SVGRenderer.box",
								"description": "The root `svg` node of the renderer.",
								"kind": "member",
								"types": [
									"Highcharts.SVGDOMElement"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 12370
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.SVGRenderer.boxWrapper",
								"description": "The wrapper for the root `svg` node of the renderer.",
								"kind": "member",
								"types": [
									"Highcharts.SVGElement"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 12377
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.SVGRenderer.button",
								"description": "Create a button with preset states.",
								"kind": "function",
								"parameters": {
									"text": {
										"description": "The text or HTML to draw.",
										"types": [
											"string"
										]
									},
									"x": {
										"description": "The x position of the button's left side.",
										"types": [
											"number"
										]
									},
									"y": {
										"description": "The y position of the button's top side.",
										"types": [
											"number"
										]
									},
									"callback": {
										"description": "The function to execute on button click or touch.",
										"types": [
											"Highcharts.EventCallbackFunction.<Highcharts.SVGElement>"
										]
									},
									"theme": {
										"description": "SVG attributes for the normal state.",
										"isOptional": true,
										"types": [
											"Highcharts.SVGAttributes"
										]
									},
									"hoverState": {
										"description": "SVG attributes for the hover state.",
										"isOptional": true,
										"types": [
											"Highcharts.SVGAttributes"
										]
									},
									"pressedState": {
										"description": "SVG attributes for the pressed state.",
										"isOptional": true,
										"types": [
											"Highcharts.SVGAttributes"
										]
									},
									"disabledState": {
										"description": "SVG attributes for the disabled state.",
										"isOptional": true,
										"types": [
											"Highcharts.SVGAttributes"
										]
									},
									"shape": {
										"description": "The shape type.",
										"isOptional": true,
										"types": [
											"Highcharts.SymbolKeyValue"
										]
									},
									"useHTML": {
										"description": "Wether to use HTML to render the label.",
										"isOptional": true,
										"types": [
											"boolean"
										]
									}
								},
								"return": {
									"types": [
										"Highcharts.SVGElement"
									],
									"description": "The button element."
								}
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 12761
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.SVGRenderer.circle",
								"description": "Draw a circle, wraps the SVG `circle` element.",
								"kind": "function",
								"parameters": {
									"x": {
										"description": "The center x position.",
										"isOptional": true,
										"types": [
											"number"
										]
									},
									"y": {
										"description": "The center y position.",
										"isOptional": true,
										"types": [
											"number"
										]
									},
									"r": {
										"description": "The radius.",
										"isOptional": true,
										"types": [
											"number"
										]
									}
								},
								"return": {
									"types": [
										"Highcharts.SVGElement"
									],
									"description": "The generated wrapper element."
								}
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 12995
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.SVGRenderer.circle",
								"description": "Draw a circle, wraps the SVG `circle` element.",
								"kind": "function",
								"parameters": {
									"attribs": {
										"description": "The initial attributes.",
										"isOptional": true,
										"types": [
											"Highcharts.SVGAttributes"
										]
									}
								},
								"return": {
									"types": [
										"Highcharts.SVGElement"
									],
									"description": "The generated wrapper element."
								}
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 13014
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.SVGRenderer.clipRect",
								"description": "Define a clipping rectangle. The clipping rectangle is later applied\nto {@link SVGElement} objects through the {@link SVGElement#clip}\nfunction.",
								"kind": "function",
								"parameters": {
									"x": {
										"isOptional": true,
										"types": [
											"number"
										]
									},
									"y": {
										"isOptional": true,
										"types": [
											"number"
										]
									},
									"width": {
										"isOptional": true,
										"types": [
											"number"
										]
									},
									"height": {
										"isOptional": true,
										"types": [
											"number"
										]
									}
								},
								"return": {
									"types": [
										"Highcharts.ClipRectElement"
									],
									"description": "A clipping rectangle."
								}
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 13478
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.SVGRenderer.constructor",
								"description": "Allows direct access to the Highcharts rendering layer in order to draw\nprimitive shapes like circles, rectangles, paths or text directly on a chart,\nor independent from any chart. The SVGRenderer represents a wrapper object\nfor SVG in modern browsers. Through the VMLRenderer, part of the `oldie.js`\nmodule, it also brings vector graphics to IE <= 8.\n\nAn existing chart's renderer can be accessed through {@link Chart.renderer}.\nThe renderer can also be used completely decoupled from a chart.",
								"kind": "constructor",
								"parameters": {
									"container": {
										"description": "Where to put the SVG in the web page.",
										"types": [
											"Highcharts.HTMLDOMElement"
										]
									},
									"width": {
										"description": "The width of the SVG.",
										"types": [
											"number"
										]
									},
									"height": {
										"description": "The height of the SVG.",
										"types": [
											"number"
										]
									},
									"style": {
										"description": "The box style, if not in styleMode",
										"isOptional": true,
										"types": [
											"Highcharts.CSSObject"
										]
									},
									"forExport": {
										"description": "Whether the rendered content is intended for export.",
										"isOptional": true,
										"types": [
											"boolean"
										]
									},
									"allowHTML": {
										"description": "Whether the renderer is allowed to include HTML text, which will be\n       projected on top of the SVG.",
										"isOptional": true,
										"types": [
											"boolean"
										]
									},
									"styledMode": {
										"description": "Whether the renderer belongs to a chart that is in styled mode.\n       If it does, it will avoid setting presentational attributes in\n       some cases, but not when set explicitly through `.attr` and `.css`\n       etc.",
										"isOptional": true,
										"types": [
											"boolean"
										]
									}
								},
								"return": {
									"types": [
										"void"
									]
								}
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 0
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.SVGRenderer.createElement",
								"description": "Create a wrapper for an SVG element. Serves as a factory for\n{@link SVGElement}, but this function is itself mostly called from\nprimitive factories like {@link SVGRenderer#path}, {@link SVGRenderer#rect} or {@link SVGRenderer#text}.",
								"kind": "function",
								"parameters": {
									"nodeName": {
										"description": "The node name, for example `rect`, `g` etc.",
										"types": [
											"string"
										]
									}
								},
								"return": {
									"types": [
										"Highcharts.SVGElement"
									],
									"description": "The generated SVGElement."
								}
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 12687
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.SVGRenderer.crispLine",
								"description": "Make a straight line crisper by not spilling out to neighbour pixels.",
								"kind": "function",
								"parameters": {
									"points": {
										"description": "The original points on the format `[['M', 0, 0], ['L', 100, 0]]`.",
										"types": [
											"Highcharts.SVGPathArray"
										]
									},
									"width": {
										"description": "The width of the line.",
										"types": [
											"number"
										]
									},
									"roundingFunction": {
										"description": "The rounding function name on the `Math` object, can be one of\n       `round`, `floor` or `ceil`.",
										"isOptional": true,
										"types": [
											"string"
										]
									}
								},
								"return": {
									"types": [
										"Highcharts.SVGPathArray"
									],
									"description": "The original points array, but modified to render crisply."
								}
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 12916
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.SVGRenderer.definition",
								"description": "General method for adding a definition to the SVG `defs` tag. Can be used\nfor gradients, fills, filters etc. Styled mode only. A hook for adding\ngeneral definitions to the SVG's defs tag. Definitions can be referenced\nfrom the CSS by its `id`. Read more in\n[gradients, shadows and patterns](https://www.highcharts.com/docs/chart-design-and-style/gradients-shadows-and-patterns).\nStyled mode only.",
								"kind": "function",
								"parameters": {
									"def": {
										"description": "A serialized form of an SVG definition, including children.",
										"types": [
											"Highcharts.ASTNode"
										]
									}
								},
								"return": {
									"types": [
										"Highcharts.SVGElement"
									],
									"description": "The inserted node."
								}
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 12508
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.SVGRenderer.defs",
								"description": "A pointer to the `defs` node of the root SVG.",
								"kind": "member",
								"types": [
									"Highcharts.SVGElement"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 12387
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.SVGRenderer.destroy",
								"description": "Destroys the renderer and its allocated members.",
								"kind": "function",
								"return": {
									"types": [
										"null"
									]
								}
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 12660
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.SVGRenderer.draw",
								"description": "Dummy function for plugins, called every time the renderer is updated.\nPrior to Highcharts 5, this was used for the canvg renderer.",
								"kind": "function",
								"isDeprecated": true,
								"return": {
									"types": [
										"void"
									]
								}
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 13987
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.SVGRenderer.escapes",
								"description": "A collection of characters mapped to HTML entities. When `useHTML` on an\nelement is true, these entities will be rendered correctly by HTML. In\nthe SVG pseudo-HTML, they need to be unescaped back to simple characters,\nso for example `&lt;` will render as `<`.",
								"kind": "member",
								"types": [
									"Highcharts.Dictionary.<string>"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 13960
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.SVGRenderer.fontMetrics",
								"description": "Utility to return the baseline offset and total line height from the font\nsize.",
								"kind": "function",
								"parameters": {
									"fontSize": {
										"description": "The current font size to inspect. If not given, the font size\n       will be found from the DOM element.",
										"isOptional": true,
										"types": [
											"number",
											"string"
										]
									},
									"elem": {
										"description": "The element to inspect for a current font size.",
										"isOptional": true,
										"types": [
											"Highcharts.SVGElement",
											"Highcharts.SVGDOMElement"
										]
									}
								},
								"return": {
									"types": [
										"Highcharts.FontMetricsObject"
									],
									"description": "The font metrics."
								}
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 13578
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.SVGRenderer.g",
								"description": "Create and return an svg group element. Child\n{@link Highcharts.SVGElement} objects are added to the group by using the\ngroup as the first parameter in {@link Highcharts.SVGElement#add|add()}.",
								"kind": "function",
								"parameters": {
									"name": {
										"description": "The group will be given a class name of `highcharts-{name}`. This\n       can be used for styling and scripting.",
										"isOptional": true,
										"types": [
											"string"
										]
									}
								},
								"return": {
									"types": [
										"Highcharts.SVGElement"
									],
									"description": "The generated wrapper element."
								}
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 13213
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.SVGRenderer.getContrast",
								"description": "Returns white for dark colors and black for bright colors.",
								"kind": "function",
								"parameters": {
									"rgba": {
										"description": "The color to get the contrast for.",
										"types": [
											"Highcharts.ColorString"
										]
									}
								},
								"return": {
									"types": [
										"Highcharts.ColorString"
									],
									"description": "The contrast color, either `#000000` or `#FFFFFF`."
								}
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 12738
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.SVGRenderer.image",
								"description": "Display an image.",
								"kind": "function",
								"parameters": {
									"src": {
										"description": "The image source.",
										"types": [
											"string"
										]
									},
									"x": {
										"description": "The X position.",
										"isOptional": true,
										"types": [
											"number"
										]
									},
									"y": {
										"description": "The Y position.",
										"isOptional": true,
										"types": [
											"number"
										]
									},
									"width": {
										"description": "The image width. If omitted, it defaults to the image file width.",
										"isOptional": true,
										"types": [
											"number"
										]
									},
									"height": {
										"description": "The image height. If omitted it defaults to the image file\n       height.",
										"isOptional": true,
										"types": [
											"number"
										]
									},
									"onload": {
										"description": "Event handler for image load.",
										"isOptional": true,
										"types": [
											"function"
										]
									}
								},
								"return": {
									"types": [
										"Highcharts.SVGElement"
									],
									"description": "The generated wrapper element."
								}
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 13233
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.SVGRenderer.init",
								"description": "Initialize the SVGRenderer. Overridable initializer function that takes\nthe same parameters as the constructor.",
								"kind": "function",
								"parameters": {
									"container": {
										"description": "Where to put the SVG in the web page.",
										"types": [
											"Highcharts.HTMLDOMElement"
										]
									},
									"width": {
										"description": "The width of the SVG.",
										"types": [
											"number"
										]
									},
									"height": {
										"description": "The height of the SVG.",
										"types": [
											"number"
										]
									},
									"style": {
										"description": "The box style, if not in styleMode",
										"isOptional": true,
										"types": [
											"Highcharts.CSSObject"
										]
									},
									"forExport": {
										"description": "Whether the rendered content is intended for export.",
										"isOptional": true,
										"types": [
											"boolean"
										]
									},
									"allowHTML": {
										"description": "Whether the renderer is allowed to include HTML text, which will be\nprojected on top of the SVG.",
										"isOptional": true,
										"types": [
											"boolean"
										]
									},
									"styledMode": {
										"description": "Whether the renderer belongs to a chart that is in styled mode. If it\ndoes, it will avoid setting presentational attributes in some cases, but\nnot when set explicitly through `.attr` and `.css` etc.",
										"isOptional": true,
										"types": [
											"boolean"
										]
									}
								},
								"return": {
									"types": [
										"void"
									]
								}
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 12416
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.SVGRenderer.isHidden",
								"description": "Detect whether the renderer is hidden. This happens when one of the\nparent elements has `display: none`. Used internally to detect when we\nneedto render preliminarily in another div to get the text bounding boxes\nright.",
								"kind": "function",
								"return": {
									"types": [
										"boolean"
									],
									"description": "True if it is hidden."
								}
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 12646
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.SVGRenderer.label",
								"description": "Draw a label, which is an extended text element with support for border\nand background. Highcharts creates a `g` element with a text and a `path`\nor `rect` inside, to make it behave somewhat like a HTML div. Border and\nbackground are set through `stroke`, `stroke-width` and `fill` attributes\nusing the {@link Highcharts.SVGElement#attr|attr} method. To update the\ntext after render, run `label.attr({ text: 'New text' })`.",
								"kind": "function",
								"parameters": {
									"str": {
										"description": "The initial text string or (subset) HTML to render.",
										"types": [
											"string"
										]
									},
									"x": {
										"description": "The x position of the label's left side.",
										"types": [
											"number"
										]
									},
									"y": {
										"description": "The y position of the label's top side or baseline, depending on\n       the `baseline` parameter.",
										"isOptional": true,
										"types": [
											"number"
										]
									},
									"shape": {
										"description": "The shape of the label's border/background, if any. Defaults to\n       `rect`. Other possible values are `callout` or other shapes\n       defined in {@link Highcharts.SVGRenderer#symbols}.",
										"isOptional": true,
										"types": [
											"string"
										]
									},
									"anchorX": {
										"description": "In case the `shape` has a pointer, like a flag, this is the\n       coordinates it should be pinned to.",
										"isOptional": true,
										"types": [
											"number"
										]
									},
									"anchorY": {
										"description": "In case the `shape` has a pointer, like a flag, this is the\n       coordinates it should be pinned to.",
										"isOptional": true,
										"types": [
											"number"
										]
									},
									"useHTML": {
										"description": "Wether to use HTML to render the label.",
										"isOptional": true,
										"types": [
											"boolean"
										]
									},
									"baseline": {
										"description": "Whether to position the label relative to the text baseline,\n       like {@link Highcharts.SVGRenderer#text|renderer.text}, or to the\n       upper border of the rectangle.",
										"isOptional": true,
										"types": [
											"boolean"
										]
									},
									"className": {
										"description": "Class name for the group.",
										"isOptional": true,
										"types": [
											"string"
										]
									}
								},
								"return": {
									"types": [
										"Highcharts.SVGElement"
									],
									"description": "The generated label."
								}
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 13885
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.SVGRenderer.path",
								"description": "Draw a path, wraps the SVG `path` element.",
								"kind": "function",
								"parameters": {
									"path": {
										"description": "An SVG path definition in array form.",
										"isOptional": true,
										"types": [
											"Highcharts.SVGPathArray"
										]
									}
								},
								"return": {
									"types": [
										"Highcharts.SVGElement"
									],
									"description": "The generated wrapper element."
								}
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 12951
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.SVGRenderer.path",
								"description": "Draw a path, wraps the SVG `path` element.",
								"kind": "function",
								"parameters": {
									"attribs": {
										"description": "The initial attributes.",
										"isOptional": true,
										"types": [
											"Highcharts.SVGAttributes"
										]
									}
								},
								"return": {
									"types": [
										"Highcharts.SVGElement"
									],
									"description": "The generated wrapper element."
								}
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 12972
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.SVGRenderer.rect",
								"description": "Draw and return a rectangle.",
								"kind": "function",
								"parameters": {
									"x": {
										"description": "Left position.",
										"isOptional": true,
										"types": [
											"number"
										]
									},
									"y": {
										"description": "Top position.",
										"isOptional": true,
										"types": [
											"number"
										]
									},
									"width": {
										"description": "Width of the rectangle.",
										"isOptional": true,
										"types": [
											"number"
										]
									},
									"height": {
										"description": "Height of the rectangle.",
										"isOptional": true,
										"types": [
											"number"
										]
									},
									"r": {
										"description": "Border corner radius.",
										"isOptional": true,
										"types": [
											"number"
										]
									},
									"strokeWidth": {
										"description": "A stroke width can be supplied to allow crisp drawing.",
										"isOptional": true,
										"types": [
											"number"
										]
									}
								},
								"return": {
									"types": [
										"Highcharts.SVGElement"
									],
									"description": "The generated wrapper element."
								}
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 13101
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.SVGRenderer.rect",
								"description": "Draw and return a rectangle.",
								"kind": "function",
								"parameters": {
									"attributes": {
										"description": "General SVG attributes for the rectangle.",
										"isOptional": true,
										"types": [
											"Highcharts.SVGAttributes"
										]
									}
								},
								"return": {
									"types": [
										"Highcharts.SVGElement"
									],
									"description": "The generated wrapper element."
								}
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 13126
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.SVGRenderer.setSize",
								"description": "Resize the {@link SVGRenderer#box} and re-align all aligned child\nelements.",
								"kind": "function",
								"parameters": {
									"width": {
										"description": "The new pixel width.",
										"types": [
											"number"
										]
									},
									"height": {
										"description": "The new pixel height.",
										"types": [
											"number"
										]
									},
									"animate": {
										"description": "Whether and how to animate.",
										"isOptional": true,
										"types": [
											"boolean",
											"Partial.<Highcharts.AnimationOptionsObject>"
										]
									}
								},
								"return": {
									"types": [
										"void"
									]
								}
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 13177
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.SVGRenderer.setStyle",
								"description": "Apply the global style on the renderer, mixed with the default styles.",
								"kind": "function",
								"parameters": {
									"style": {
										"description": "CSS to apply.",
										"types": [
											"Highcharts.CSSObject"
										]
									}
								},
								"return": {
									"types": [
										"void"
									]
								}
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 12635
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.SVGRenderer.symbol",
								"description": "Draw a symbol out of pre-defined shape paths from\n{@link SVGRenderer#symbols}.\nIt is used in Highcharts for point makers, which cake a `symbol` option,\nand label and button backgrounds like in the tooltip and stock flags.",
								"kind": "function",
								"parameters": {
									"symbol": {
										"description": "The symbol name.",
										"types": [
											"string"
										]
									},
									"x": {
										"description": "The X coordinate for the top left position.",
										"isOptional": true,
										"types": [
											"number"
										]
									},
									"y": {
										"description": "The Y coordinate for the top left position.",
										"isOptional": true,
										"types": [
											"number"
										]
									},
									"width": {
										"description": "The pixel width.",
										"isOptional": true,
										"types": [
											"number"
										]
									},
									"height": {
										"description": "The pixel height.",
										"isOptional": true,
										"types": [
											"number"
										]
									},
									"options": {
										"description": "Additional options, depending on the actual symbol drawn.",
										"isOptional": true,
										"types": [
											"Highcharts.SymbolOptionsObject"
										]
									}
								},
								"return": {
									"types": [
										"Highcharts.SVGElement"
									]
								}
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 13311
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.SVGRenderer.symbols",
								"description": "An extendable collection of functions for defining symbol paths.",
								"kind": "member",
								"types": [
									"Highcharts.SymbolDictionary"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 13980
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.SVGRenderer.text",
								"description": "Draw text. The text can contain a subset of HTML, like spans and anchors\nand some basic text styling of these. For more advanced features like\nborder and background, use {@link Highcharts.SVGRenderer#label} instead.\nTo update the text after render, run `text.attr({ text: 'New text' })`.",
								"kind": "function",
								"parameters": {
									"str": {
										"description": "The text of (subset) HTML to draw.",
										"isOptional": true,
										"types": [
											"string"
										]
									},
									"x": {
										"description": "The x position of the text's lower left corner.",
										"isOptional": true,
										"types": [
											"number"
										]
									},
									"y": {
										"description": "The y position of the text's lower left corner.",
										"isOptional": true,
										"types": [
											"number"
										]
									},
									"useHTML": {
										"description": "Use HTML to render the text.",
										"isOptional": true,
										"types": [
											"boolean"
										]
									}
								},
								"return": {
									"types": [
										"Highcharts.SVGElement"
									],
									"description": "The text object."
								}
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 13517
									}
								]
							}
						}
					]
				},
				{
					"doclet": {
						"name": "Highcharts.SankeyNodeObject",
						"description": "A node in a sankey diagram.",
						"kind": "interface",
						"products": [
							"highcharts"
						],
						"types": [
							"Highcharts.Point"
						]
					},
					"meta": {
						"files": [
							{
								"path": "code/modules/sankey.src.js",
								"line": 1459
							}
						]
					},
					"children": [
						{
							"doclet": {
								"name": "Highcharts.SankeyNodeObject.color",
								"description": "The color of the auto generated node.",
								"kind": "member",
								"types": [
									"Highcharts.ColorString",
									"Highcharts.GradientColorObject",
									"Highcharts.PatternObject"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/modules/sankey.src.js",
										"line": 1465
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.SankeyNodeObject.colorIndex",
								"description": "The color index of the auto generated node, especially for use in styled\nmode.",
								"kind": "member",
								"types": [
									"number"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/modules/sankey.src.js",
										"line": 1470
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.SankeyNodeObject.column",
								"description": "An optional column index of where to place the node. The default behaviour is\nto place it next to the preceding node.",
								"kind": "member",
								"see": [
									"{@link https://jsfiddle.net/gh/get/library/pure/highcharts/highcharts/tree/master/samples/highcharts/plotoptions/sankey-node-column/|Highcharts-Demo:}\n     Specified node column"
								],
								"types": [
									"number"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/modules/sankey.src.js",
										"line": 1476
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.SankeyNodeObject.id",
								"description": "The id of the auto-generated node, refering to the `from` or `to` setting of\nthe link.",
								"kind": "member",
								"types": [
									"string"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/modules/sankey.src.js",
										"line": 1486
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.SankeyNodeObject.name",
								"description": "The name to display for the node in data labels and tooltips. Use this when\nthe name is different from the `id`. Where the id must be unique for each\nnode, this is not necessary for the name.",
								"kind": "member",
								"see": [
									"{@link https://jsfiddle.net/gh/get/library/pure/highcharts/highcharts/tree/master/samples/highcharts/css/sankey/|Highcharts-Demo:}\n        Sankey diagram with node options"
								],
								"products": [
									"highcharts"
								],
								"types": [
									"string"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/modules/sankey.src.js",
										"line": 1492
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.SankeyNodeObject.offset",
								"description": "The vertical offset of a node in terms of weight. Positive values shift the\nnode downwards, negative shift it upwards.",
								"kind": "member",
								"defaultValue": "0",
								"see": [
									"{@link https://jsfiddle.net/gh/get/library/pure/highcharts/highcharts/tree/master/samples/highcharts/plotoptions/sankey-node-column/|Highcharts-Demo:}\n        Specified node offset"
								],
								"types": [
									"number"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/modules/sankey.src.js",
										"line": 1503
									}
								]
							}
						}
					]
				},
				{
					"doclet": {
						"name": "Highcharts.ScreenReaderClickCallbackFunction",
						"description": "",
						"kind": "typedef",
						"types": [
							"function"
						],
						"parameters": {
							"evt": {
								"description": "Mouse click event",
								"types": [
									"global.MouseEvent"
								]
							}
						},
						"return": {
							"types": [
								"void"
							]
						}
					},
					"meta": {
						"files": [
							{
								"path": "code/modules/accessibility.src.js",
								"line": 8305
							}
						]
					}
				},
				{
					"doclet": {
						"name": "Highcharts.ScreenReaderFormatterCallbackFunction<T>",
						"description": "Creates a formatted string for the screen reader module.",
						"kind": "typedef",
						"types": [
							"function"
						],
						"parameters": {
							"context": {
								"description": "Context to format",
								"types": [
									"T"
								]
							}
						},
						"return": {
							"types": [
								"string"
							],
							"description": "Formatted string for the screen reader module."
						}
					},
					"meta": {
						"files": [
							{
								"path": "code/modules/accessibility.src.js",
								"line": 8313
							}
						]
					}
				},
				{
					"doclet": {
						"name": "Highcharts.SelectDataObject",
						"description": "Axis-specific data of a selection.",
						"kind": "interface"
					},
					"meta": {
						"files": [
							{
								"path": "code/highcharts.src.js",
								"line": 28216
							}
						]
					},
					"children": [
						{
							"doclet": {
								"name": "Highcharts.SelectDataObject.axis",
								"description": "",
								"kind": "member",
								"types": [
									"Highcharts.Axis"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 28220
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.SelectDataObject.max",
								"description": "",
								"kind": "member",
								"types": [
									"number"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 28223
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.SelectDataObject.min",
								"description": "",
								"kind": "member",
								"types": [
									"number"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 28226
									}
								]
							}
						}
					]
				},
				{
					"doclet": {
						"name": "Highcharts.SelectEventObject",
						"description": "Object for select events.",
						"kind": "interface"
					},
					"meta": {
						"files": [
							{
								"path": "code/highcharts.src.js",
								"line": 28230
							}
						]
					},
					"children": [
						{
							"doclet": {
								"name": "Highcharts.SelectEventObject.originalEvent",
								"description": "",
								"kind": "member",
								"types": [
									"global.Event"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 28234
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.SelectEventObject.xAxis",
								"description": "",
								"kind": "member",
								"types": [
									"Array.<Highcharts.SelectDataObject>"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 28237
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.SelectEventObject.yAxis",
								"description": "",
								"kind": "member",
								"types": [
									"Array.<Highcharts.SelectDataObject>"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 28240
									}
								]
							}
						}
					]
				},
				{
					"doclet": {
						"name": "Highcharts.Series",
						"description": "This is the base series prototype that all other series types inherit from.\nA new series is initialized either through the\n[series](https://api.highcharts.com/highcharts/series)\noption structure, or after the chart is initialized, through\n{@link Highcharts.Chart#addSeries}.\n\nThe object can be accessed in a number of ways. All series and point event\nhandlers give a reference to the `series` object. The chart object has a\n{@link Highcharts.Chart#series|series} property that is a collection of all\nthe chart's series. The point objects and axis objects also have the same\nreference.\n\nAnother way to reference the series programmatically is by `id`. Add an id\nin the series configuration options, and get the series object by\n{@link Highcharts.Chart#get}.\n\nConfiguration options for the series are given in three levels. Options for\nall series in a chart are given in the\n[plotOptions.series](https://api.highcharts.com/highcharts/plotOptions.series)\nobject. Then options for all series of a specific type\nare given in the plotOptions of that type, for example `plotOptions.line`.\nNext, options for one single series are given in the series array, or as\narguments to `chart.addSeries`.\n\nThe data in the series is stored in various arrays.\n\n- First, `series.options.data` contains all the original config options for\n each point whether added by options or methods like `series.addPoint`.\n\n- Next, `series.data` contains those values converted to points, but in case\n the series data length exceeds the `cropThreshold`, or if the data is\n grouped, `series.data` doesn't contain all the points. It only contains the\n points that have been created on demand.\n\n- Then there's `series.points` that contains all currently visible point\n objects. In case of cropping, the cropped-away points are not part of this\n array. The `series.points` array starts at `series.cropStart` compared to\n `series.data` and `series.options.data`. If however the series data is\n grouped, these can't be correlated one to one.\n\n- `series.xData` and `series.processedXData` contain clean x values,\n equivalent to `series.data` and `series.points`.\n\n- `series.yData` and `series.processedYData` contain clean y values,\n equivalent to `series.data` and `series.points`.",
						"kind": "class"
					},
					"meta": {
						"files": [
							{
								"path": "code/highcharts.src.js",
								"line": 35514
							}
						]
					},
					"children": [
						{
							"doclet": {
								"name": "Highcharts.Series.addPoint",
								"description": "Add a point to the series after render time. The point can be added at\nthe end, or by giving it an X value, to the start or in the middle of the\nseries.",
								"kind": "function",
								"fires": [
									"Highcharts.Series#addPoint"
								],
								"parameters": {
									"options": {
										"description": "The point options. If options is a single number, a point with\n       that y value is appended to the series. If it is an array, it will\n       be interpreted as x and y values respectively. If it is an\n       object, advanced options as outlined under `series.data` are\n       applied.",
										"types": [
											"Highcharts.PointOptionsType"
										]
									},
									"redraw": {
										"description": "Whether to redraw the chart after the point is added. When adding\n       more than one point, it is highly recommended that the redraw\n       option be set to false, and instead {@link Chart#redraw} is\n       explicitly called after the adding of points is finished.\n       Otherwise, the chart will redraw after adding each point.",
										"isOptional": true,
										"types": [
											"boolean"
										]
									},
									"shift": {
										"description": "If true, a point is shifted off the start of the series as one is\n       appended to the end.",
										"isOptional": true,
										"types": [
											"boolean"
										]
									},
									"animation": {
										"description": "Whether to apply animation, and optionally animation\n       configuration.",
										"isOptional": true,
										"types": [
											"boolean",
											"Partial.<Highcharts.AnimationOptionsObject>"
										]
									},
									"withEvent": {
										"description": "Used internally, whether to fire the series `addPoint` event.",
										"isOptional": true,
										"types": [
											"boolean"
										]
									}
								},
								"return": {
									"types": [
										"void"
									]
								}
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 38370
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.Series.animate",
								"description": "Animate in the series. Called internally twice. First with the `init`\nparameter set to true, which sets up the initial state of the\nanimation. Then when ready, it is called with the `init` parameter\nundefined, in order to perform the actual animation. After the\nsecond run, the function is removed.",
								"kind": "function",
								"parameters": {
									"init": {
										"description": "Initialize the animation.",
										"isOptional": true,
										"types": [
											"boolean"
										]
									}
								},
								"return": {
									"types": [
										"void"
									]
								}
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 37343
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.Series.area",
								"description": "SVG element of area-based charts. Can be used for styling\npurposes. If zones are configured, this element will be\nhidden and replaced by multiple zone areas, accessible\nvia `series['zone-area-x']` (where x is a number,\nstarting with 0).",
								"kind": "member",
								"types": [
									"Highcharts.SVGElement",
									"undefined"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 40852
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.Series.chart",
								"description": "Read only. The chart that the series belongs to.",
								"kind": "member",
								"types": [
									"Highcharts.Chart"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 35609
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.Series.constructor",
								"description": "This is the base series prototype that all other series types inherit from.\nA new series is initialized either through the\n[series](https://api.highcharts.com/highcharts/series)\noption structure, or after the chart is initialized, through\n{@link Highcharts.Chart#addSeries}.\n\nThe object can be accessed in a number of ways. All series and point event\nhandlers give a reference to the `series` object. The chart object has a\n{@link Highcharts.Chart#series|series} property that is a collection of all\nthe chart's series. The point objects and axis objects also have the same\nreference.\n\nAnother way to reference the series programmatically is by `id`. Add an id\nin the series configuration options, and get the series object by\n{@link Highcharts.Chart#get}.\n\nConfiguration options for the series are given in three levels. Options for\nall series in a chart are given in the\n[plotOptions.series](https://api.highcharts.com/highcharts/plotOptions.series)\nobject. Then options for all series of a specific type\nare given in the plotOptions of that type, for example `plotOptions.line`.\nNext, options for one single series are given in the series array, or as\narguments to `chart.addSeries`.\n\nThe data in the series is stored in various arrays.\n\n- First, `series.options.data` contains all the original config options for\n each point whether added by options or methods like `series.addPoint`.\n\n- Next, `series.data` contains those values converted to points, but in case\n the series data length exceeds the `cropThreshold`, or if the data is\n grouped, `series.data` doesn't contain all the points. It only contains the\n points that have been created on demand.\n\n- Then there's `series.points` that contains all currently visible point\n objects. In case of cropping, the cropped-away points are not part of this\n array. The `series.points` array starts at `series.cropStart` compared to\n `series.data` and `series.options.data`. If however the series data is\n grouped, these can't be correlated one to one.\n\n- `series.xData` and `series.processedXData` contain clean x values,\n equivalent to `series.data` and `series.points`.\n\n- `series.yData` and `series.processedYData` contain clean y values,\n equivalent to `series.data` and `series.points`.",
								"kind": "constructor",
								"parameters": {
									"chart": {
										"description": "The chart instance.",
										"types": [
											"Highcharts.Chart"
										]
									},
									"options": {
										"description": "The series options.",
										"types": [
											"Highcharts.SeriesOptionsType",
											"object"
										]
									}
								},
								"return": {
									"types": [
										"void"
									]
								}
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 0
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.Series.data",
								"description": "Read only. An array containing those values converted to points.\nIn case the series data length exceeds the `cropThreshold`, or if\nthe data is grouped, `series.data` doesn't contain all the\npoints. Also, in case a series is hidden, the `data` array may be\nempty. To access raw values, `series.options.data` will always be\nup to date. `Series.data` only contains the points that have been\ncreated on demand. To modify the data, use\n{@link Highcharts.Series#setData} or\n{@link Highcharts.Point#update}.",
								"kind": "member",
								"see": [
									"Series.points"
								],
								"types": [
									"Array.<Highcharts.Point>"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 36832
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.Series.dataMax",
								"description": "Contains the maximum value of the series' data point. Some series\ntypes like `networkgraph` do not support this property as they\nlack a `y`-value.",
								"kind": "member",
								"isReadOnly": true,
								"types": [
									"number",
									"undefined"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 36978
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.Series.dataMin",
								"description": "Contains the minimum value of the series' data point. Some series\ntypes like `networkgraph` do not support this property as they\nlack a `y`-value.",
								"kind": "member",
								"isReadOnly": true,
								"types": [
									"number",
									"undefined"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 36969
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.Series.destroyGraphics",
								"description": "If implemented in the core, parts of this can probably be\nshared with other similar methods in Highcharts.",
								"kind": "function",
								"return": {
									"types": [
										"void"
									]
								}
							},
							"meta": {
								"files": [
									{
										"path": "code/modules/boost.src.js",
										"line": 3601
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.Series.drawGraph",
								"description": "Draw the graph. Called internally when rendering line-like series\ntypes. The first time it generates the `series.graph` item and\noptionally other series-wide items like `series.area` for area\ncharts. On subsequent calls these items are updated with new\npositions and attributes.",
								"kind": "function",
								"return": {
									"types": [
										"void"
									]
								}
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 40813
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.Series.drawPoints",
								"description": "Draw the markers for line-like series types, and columns or other\ngraphical representation for {@link Point} objects for other series\ntypes. The resulting element is typically stored as\n{@link Point.graphic}, and is created on the first call and updated\nand moved on subsequent calls.",
								"kind": "function",
								"return": {
									"types": [
										"void"
									]
								}
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 37394
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.Series.enterBoost",
								"description": "Enter boost mode and apply boost-specific properties.",
								"kind": "function",
								"return": {
									"types": [
										"void"
									]
								}
							},
							"meta": {
								"files": [
									{
										"path": "code/modules/boost.src.js",
										"line": 3528
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.Series.exitBoost",
								"description": "Exit from boost mode and restore non-boost properties.",
								"kind": "function",
								"return": {
									"types": [
										"void"
									]
								}
							},
							"meta": {
								"files": [
									{
										"path": "code/modules/boost.src.js",
										"line": 3554
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.Series.getName",
								"description": "Return series name in \"Series {Number}\" format or the one defined by\na user. This method can be simply overridden as series name format\ncan vary (e.g. technical indicators).",
								"kind": "function",
								"return": {
									"types": [
										"string"
									],
									"description": "The series name."
								}
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 36026
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.Series.getPlotBox",
								"description": "Get the translation and scale for the plot area of this series.",
								"kind": "function",
								"return": {
									"types": [
										"Highcharts.SeriesPlotBoxObject"
									]
								}
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 37916
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.Series.getPoint",
								"description": "Return a full Point object based on the index.\nThe boost module uses stripped point objects for performance reasons.",
								"kind": "function",
								"parameters": {
									"boostPoint": {
										"description": "A stripped-down point object",
										"types": [
											"object",
											"Highcharts.Point"
										]
									}
								},
								"return": {
									"types": [
										"Highcharts.Point"
									],
									"description": "A Point object as per https://api.highcharts.com/highcharts#Point"
								}
							},
							"meta": {
								"files": [
									{
										"path": "code/modules/boost.src.js",
										"line": 3307
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.Series.getValidPoints",
								"description": "Return the series points with null points filtered out.",
								"kind": "function",
								"parameters": {
									"points": {
										"description": "The points to inspect, defaults to {@link Series.points}.",
										"isOptional": true,
										"types": [
											"Array.<Highcharts.Point>"
										]
									},
									"insideOnly": {
										"description": "Whether to inspect only the points that are inside the visible view.",
										"isOptional": true,
										"types": [
											"boolean"
										]
									},
									"allowNull": {
										"description": "Whether to allow null points to pass as valid points.",
										"isOptional": true,
										"types": [
											"boolean"
										]
									}
								},
								"return": {
									"types": [
										"Array.<Highcharts.Point>"
									],
									"description": "The valid points."
								}
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 37168
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.Series.graph",
								"description": "SVG element of line-based charts. Can be used for styling\npurposes. If zones are configured, this element will be\nhidden and replaced by multiple zone lines, accessible\nvia `series['zone-graph-x']` (where x is a number,\nstarting with 0).",
								"kind": "member",
								"types": [
									"Highcharts.SVGElement",
									"undefined"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 40862
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.Series.hide",
								"description": "Hide the series if visible. If the\n[chart.ignoreHiddenSeries](https://api.highcharts.com/highcharts/chart.ignoreHiddenSeries)\noption is true, the chart is redrawn without this series.",
								"kind": "function",
								"fires": [
									"Highcharts.Series#hide"
								],
								"return": {
									"types": [
										"void"
									]
								}
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 39088
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.Series.index",
								"description": "Contains the series' index in the `Chart.series` array.",
								"kind": "member",
								"isReadOnly": true,
								"types": [
									"number"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 30367
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.Series.is",
								"description": "Check whether the series item is itself or inherits from a certain\nseries type.",
								"kind": "function",
								"parameters": {
									"type": {
										"description": "The type of series to check for, can be either\n       featured or custom series types. For example `column`, `pie`,\n       `ohlc` etc.",
										"types": [
											"string"
										]
									}
								},
								"return": {
									"types": [
										"boolean"
									],
									"description": "True if this item is or inherits from the given type."
								}
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 35705
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.Series.markerAttribs",
								"description": "Get non-presentational attributes for a point. Used internally for\nboth styled mode and classic. Can be overridden for different series\ntypes.",
								"kind": "function",
								"see": [
									"Series#pointAttribs"
								],
								"parameters": {
									"point": {
										"description": "The Point to inspect.",
										"types": [
											"Highcharts.Point"
										]
									},
									"state": {
										"description": "The state, can be either `hover`, `select` or undefined.",
										"isOptional": true,
										"types": [
											"string"
										]
									}
								},
								"return": {
									"types": [
										"Highcharts.SVGAttributes"
									],
									"description": "A hash containing those attributes that are not settable from CSS."
								}
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 37501
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.Series.markerAttribs",
								"description": "Get non-presentational attributes for a point. Used internally for\nboth styled mode and classic. Set correct position in link with connector\nline.",
								"kind": "function",
								"see": [
									"Series#pointAttribs"
								],
								"parameters": {
									"this": {
										"description": "The series of points.",
										"types": [
											"Highcharts.Series"
										]
									}
								},
								"return": {
									"types": [
										"Highcharts.SVGAttributes"
									],
									"description": "A hash containing those attributes that are not settable from\n        CSS."
								}
							},
							"meta": {
								"files": [
									{
										"path": "code/modules/dumbbell.src.js",
										"line": 562
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.Series.name",
								"description": "The series name as given in the options. Defaults to\n\"Series {n}\".",
								"kind": "member",
								"types": [
									"string"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 35637
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.Series.onMouseOut",
								"description": "Runs on mouse out of the series graphical items.",
								"kind": "function",
								"fires": [
									"Highcharts.Series#mouseOut"
								],
								"return": {
									"types": [
										"void"
									]
								}
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 38858
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.Series.onMouseOver",
								"description": "Runs on mouse over the series graphical items.",
								"kind": "function",
								"fires": [
									"Highcharts.Series#mouseOver"
								],
								"return": {
									"types": [
										"void"
									]
								}
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 38827
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.Series.options",
								"description": "Read only. The series' current options. To update, use\n{@link Series#update}.",
								"kind": "member",
								"types": [
									"Highcharts.SeriesOptionsType"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 35624
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.Series.points",
								"description": "An array containing all currently visible point objects. In case\nof cropping, the cropped-away points are not part of this array.\nThe `series.points` array starts at `series.cropStart` compared\nto `series.data` and `series.options.data`. If however the series\ndata is grouped, these can't be correlated one to one. To modify\nthe data, use {@link Highcharts.Series#setData} or\n{@link Highcharts.Point#update}.",
								"kind": "member",
								"types": [
									"Array.<Highcharts.Point>"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 36849
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.Series.remove",
								"description": "Remove a series and optionally redraw the chart.",
								"kind": "function",
								"fires": [
									"Highcharts.Series#remove"
								],
								"parameters": {
									"redraw": {
										"description": "Whether to redraw the chart or wait for an explicit call to\n       {@link Highcharts.Chart#redraw}.",
										"isOptional": true,
										"types": [
											"boolean"
										]
									},
									"animation": {
										"description": "Whether to apply animation, and optionally animation\n       configuration.",
										"isOptional": true,
										"types": [
											"boolean",
											"Partial.<Highcharts.AnimationOptionsObject>"
										]
									},
									"withEvent": {
										"description": "Used internally, whether to fire the series `remove` event.",
										"isOptional": true,
										"types": [
											"boolean"
										]
									}
								},
								"return": {
									"types": [
										"void"
									]
								}
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 38544
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.Series.removePoint",
								"description": "Remove a point from the series. Unlike the\n{@link Highcharts.Point#remove} method, this can also be done on a point\nthat is not instanciated because it is outside the view or subject to\nHighcharts Stock data grouping.",
								"kind": "function",
								"fires": [
									"Highcharts.Point#remove"
								],
								"parameters": {
									"i": {
										"description": "The index of the point in the {@link Highcharts.Series.data|data}\n       array.",
										"types": [
											"number"
										]
									},
									"redraw": {
										"description": "Whether to redraw the chart after the point is added. When\n       removing more than one point, it is highly recommended that the\n       `redraw` option be set to `false`, and instead {@link\n       Highcharts.Chart#redraw} is explicitly called after the adding of\n       points is finished.",
										"isOptional": true,
										"types": [
											"boolean"
										]
									},
									"animation": {
										"description": "Whether and optionally how the series should be animated.",
										"isOptional": true,
										"types": [
											"boolean",
											"Partial.<Highcharts.AnimationOptionsObject>"
										]
									}
								},
								"return": {
									"types": [
										"void"
									]
								}
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 38484
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.Series.render",
								"description": "Render the graph and markers. Called internally when first rendering\nand later when redrawing the chart. This function can be extended in\nplugins, but normally shouldn't be called directly.",
								"kind": "function",
								"fires": [
									"Highcharts.Series#afterRender"
								],
								"return": {
									"types": [
										"void"
									]
								}
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 37959
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.Series.searchPoint",
								"description": "Find the nearest point from a pointer event. This applies to series that\nuse k-d-trees to get the nearest point. Native pointer events must be\nnormalized using `Pointer.normalize`, that adds `chartX` and `chartY`\nproperties.",
								"kind": "function",
								"parameters": {
									"e": {
										"description": "The normalized pointer event",
										"types": [
											"Highcharts.PointerEvent"
										]
									},
									"compareX": {
										"description": "Search only by the X value, not Y",
										"isOptional": true,
										"types": [
											"boolean"
										]
									}
								},
								"return": {
									"types": [
										"Point",
										"undefined"
									],
									"description": "The closest point to the pointer event"
								}
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 38090
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.Series.select",
								"description": "Select or unselect the series. This means its\n{@link Highcharts.Series.selected|selected}\nproperty is set, the checkbox in the legend is toggled and when selected,\nthe series is returned by the {@link Highcharts.Chart#getSelectedSeries}\nfunction.",
								"kind": "function",
								"fires": [
									"Highcharts.Series#select",
									"Highcharts.Series#unselect"
								],
								"parameters": {
									"selected": {
										"description": "True to select the series, false to unselect. If undefined, the selection\nstate is toggled.",
										"isOptional": true,
										"types": [
											"boolean"
										]
									}
								},
								"return": {
									"types": [
										"void"
									]
								}
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 39102
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.Series.selected",
								"description": "Read only. The series' selected state as set by {@link Highcharts.Series#select}.",
								"kind": "member",
								"types": [
									"boolean"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 35655
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.Series.setCompare",
								"description": "Highcharts Stock only. Set the\n[compare](https://api.highcharts.com/highstock/plotOptions.series.compare)\nmode of the series after render time. In most cases it is more useful running\n{@link Axis#setCompare} on the X axis to update all its series.",
								"kind": "function",
								"parameters": {
									"compare": {
										"description": "Can be one of `null` (default), `\"percent\"` or `\"value\"`.",
										"isOptional": true,
										"types": [
											"string"
										]
									}
								},
								"return": {
									"types": [
										"void"
									]
								}
							},
							"meta": {
								"files": [
									{
										"path": "code/modules/stock.src.js",
										"line": 11333
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.Series.setData",
								"description": "Apply a new set of data to the series and optionally redraw it. The\nnew data array is passed by reference (except in case of\n`updatePoints`), and may later be mutated when updating the chart\ndata.\n\nNote the difference in behaviour when setting the same amount of\npoints, or a different amount of points, as handled by the\n`updatePoints` parameter.",
								"kind": "function",
								"parameters": {
									"data": {
										"description": "Takes an array of data in the same format as described under\n       `series.{type}.data` for the given series type, for example a\n       line series would take data in the form described under\n       [series.line.data](https://api.highcharts.com/highcharts/series.line.data).",
										"types": [
											"Array.<Highcharts.PointOptionsType>"
										]
									},
									"redraw": {
										"description": "Whether to redraw the chart after the series is altered. If\n       doing more operations on the chart, it is a good idea to set\n       redraw to false and call {@link Chart#redraw} after.",
										"isOptional": true,
										"types": [
											"boolean"
										]
									},
									"animation": {
										"description": "When the updated data is the same length as the existing data,\n       points will be updated by default, and animation visualizes\n       how the points are changed. Set false to disable animation, or\n       a configuration object to set duration or easing.",
										"isOptional": true,
										"types": [
											"boolean",
											"Partial.<Highcharts.AnimationOptionsObject>"
										]
									},
									"updatePoints": {
										"description": "When this is true, points will be updated instead of replaced\n       whenever possible. This occurs a) when the updated data is the\n       same length as the existing data, b) when points are matched\n       by their id's, or c) when points can be matched by X values.\n       This allows updating with animation and performs better. In\n       this case, the original array is not passed by reference. Set\n       `false` to prevent.",
										"isOptional": true,
										"types": [
											"boolean"
										]
									}
								},
								"return": {
									"types": [
										"void"
									]
								}
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 36307
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.Series.setState",
								"description": "Set the state of the series. Called internally on mouse interaction\noperations, but it can also be called directly to visually\nhighlight a series.",
								"kind": "function",
								"parameters": {
									"state": {
										"description": "The new state, can be either `'hover'`, `'inactive'`, `'select'`,\n       or `''` (an empty string), `'normal'` or `undefined` to set to\n       normal state.",
										"isOptional": true,
										"types": [
											"Highcharts.SeriesStateValue",
											"\"\""
										]
									},
									"inherit": {
										"description": "Determines if state should be inherited by points too.",
										"isOptional": true,
										"types": [
											"boolean"
										]
									}
								},
								"return": {
									"types": [
										"void"
									]
								}
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 38893
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.Series.setVisible",
								"description": "Show or hide the series.",
								"kind": "function",
								"fires": [
									"Highcharts.Series#hide",
									"Highcharts.Series#show"
								],
								"parameters": {
									"visible": {
										"description": "True to show the series, false to hide. If undefined, the visibility is\ntoggled.",
										"isOptional": true,
										"types": [
											"boolean"
										]
									},
									"redraw": {
										"description": "Whether to redraw the chart after the series is altered. If doing more\noperations on the chart, it is a good idea to set redraw to false and\ncall {@link Chart#redraw|chart.redraw()} after.",
										"isOptional": true,
										"types": [
											"boolean"
										]
									}
								},
								"return": {
									"types": [
										"void"
									]
								}
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 39004
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.Series.show",
								"description": "Show the series if hidden.",
								"kind": "function",
								"fires": [
									"Highcharts.Series#show"
								],
								"return": {
									"types": [
										"void"
									]
								}
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 39076
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.Series.sonify",
								"description": "Sonify a series.",
								"kind": "function",
								"parameters": {
									"options": {
										"description": "The options for sonifying this series. If not provided,\n       uses options set on chart and series.",
										"isOptional": true,
										"types": [
											"Highcharts.SonifySeriesOptionsObject"
										]
									}
								},
								"return": {
									"types": [
										"void"
									]
								}
							},
							"meta": {
								"files": [
									{
										"path": "code/modules/sonification.src.js",
										"line": 1823
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.Series.translate",
								"description": "Translate data points from raw data values to chart specific\npositioning data needed later in the `drawPoints` and `drawGraph`\nfunctions. This function can be overridden in plugins and custom\nseries type implementations.",
								"kind": "function",
								"fires": [
									"Highcharts.Series#events:translate"
								],
								"return": {
									"types": [
										"void"
									]
								}
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 37010
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.Series.type",
								"description": "Read only. The series' type, like \"line\", \"area\", \"column\" etc.\nThe type in the series options anc can be altered using\n{@link Series#update}.",
								"kind": "member",
								"types": [
									"string"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 35616
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.Series.update",
								"description": "Update the series with a new set of options. For a clean and precise\nhandling of new options, all methods and elements from the series are\nremoved, and it is initialized from scratch. Therefore, this method is\nmore performance expensive than some other utility methods like {@link Series#setData} or {@link Series#setVisible}.\n\nNote that `Series.update` may mutate the passed `data` options.",
								"kind": "function",
								"fires": [
									"Highcharts.Series#update",
									"Highcharts.Series#afterUpdate"
								],
								"parameters": {
									"options": {
										"description": "New options that will be merged with the series' existing options.",
										"types": [
											"Highcharts.SeriesOptionsType"
										]
									},
									"redraw": {
										"description": "Whether to redraw the chart after the series is altered. If doing\n       more operations on the chart, it is a good idea to set redraw to\n       false and call {@link Chart#redraw} after.",
										"isOptional": true,
										"types": [
											"boolean"
										]
									}
								},
								"return": {
									"types": [
										"void"
									]
								}
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 38589
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.Series.userOptions",
								"description": "Contains series options by the user without defaults.",
								"kind": "member",
								"types": [
									"Highcharts.SeriesOptionsType"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 35959
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.Series.visible",
								"description": "Read only. The series' visibility state as set by {@link Series#show}, {@link Series#hide}, or in the initial\nconfiguration.",
								"kind": "member",
								"types": [
									"boolean"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 35646
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.Series.xAxis",
								"description": "Read only. The unique xAxis object associated\nwith the series.",
								"kind": "member",
								"types": [
									"Highcharts.Axis"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 35790
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.Series.yAxis",
								"description": "Read only. The unique yAxis object associated\nwith the series.",
								"kind": "member",
								"types": [
									"Highcharts.Axis"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 35797
									}
								]
							}
						}
					]
				},
				{
					"doclet": {
						"name": "Highcharts.SeriesAfterAnimateCallbackFunction",
						"description": "Function callback when a series has been animated.",
						"kind": "typedef",
						"types": [
							"function"
						],
						"parameters": {
							"this": {
								"description": "The series where the event occured.",
								"types": [
									"Highcharts.Series"
								]
							},
							"event": {
								"description": "Event arguments.",
								"types": [
									"Highcharts.SeriesAfterAnimateEventObject"
								]
							}
						},
						"return": {
							"types": [
								"void"
							]
						}
					},
					"meta": {
						"files": [
							{
								"path": "code/highcharts.src.js",
								"line": 39212
							}
						]
					}
				},
				{
					"doclet": {
						"name": "Highcharts.SeriesAfterAnimateEventObject",
						"description": "Event information regarding completed animation of a series.",
						"kind": "interface"
					},
					"meta": {
						"files": [
							{
								"path": "code/highcharts.src.js",
								"line": 39223
							}
						]
					},
					"children": [
						{
							"doclet": {
								"name": "Highcharts.SeriesAfterAnimateEventObject.target",
								"description": "Animated series.",
								"kind": "member",
								"types": [
									"Highcharts.Series"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 39227
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.SeriesAfterAnimateEventObject.type",
								"description": "Event type.",
								"kind": "member",
								"types": [
									"\"afterAnimate\""
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 39231
									}
								]
							}
						}
					]
				},
				{
					"doclet": {
						"name": "Highcharts.SeriesCheckboxClickCallbackFunction",
						"description": "Function callback when the checkbox next to the series' name in the legend is\nclicked.",
						"kind": "typedef",
						"types": [
							"function"
						],
						"parameters": {
							"this": {
								"description": "The series where the event occured.",
								"types": [
									"Highcharts.Series"
								]
							},
							"event": {
								"description": "Event arguments.",
								"types": [
									"Highcharts.SeriesCheckboxClickEventObject"
								]
							}
						},
						"return": {
							"types": [
								"void"
							]
						}
					},
					"meta": {
						"files": [
							{
								"path": "code/highcharts.src.js",
								"line": 39236
							}
						]
					}
				},
				{
					"doclet": {
						"name": "Highcharts.SeriesCheckboxClickEventObject",
						"description": "Event information regarding check of a series box.",
						"kind": "interface"
					},
					"meta": {
						"files": [
							{
								"path": "code/highcharts.src.js",
								"line": 39248
							}
						]
					},
					"children": [
						{
							"doclet": {
								"name": "Highcharts.SeriesCheckboxClickEventObject.checked",
								"description": "Whether the box has been checked.",
								"kind": "member",
								"types": [
									"boolean"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 39252
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.SeriesCheckboxClickEventObject.item",
								"description": "Related series.",
								"kind": "member",
								"types": [
									"Highcharts.Series"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 39256
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.SeriesCheckboxClickEventObject.target",
								"description": "Related series.",
								"kind": "member",
								"types": [
									"Highcharts.Series"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 39260
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.SeriesCheckboxClickEventObject.type",
								"description": "Event type.",
								"kind": "member",
								"types": [
									"\"checkboxClick\""
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 39264
									}
								]
							}
						}
					]
				},
				{
					"doclet": {
						"name": "Highcharts.SeriesClickCallbackFunction",
						"description": "Function callback when a series is clicked. Return false to cancel toogle\nactions.",
						"kind": "typedef",
						"types": [
							"function"
						],
						"parameters": {
							"this": {
								"description": "The series where the event occured.",
								"types": [
									"Highcharts.Series"
								]
							},
							"event": {
								"description": "Event arguments.",
								"types": [
									"Highcharts.SeriesClickEventObject"
								]
							}
						},
						"return": {
							"types": [
								"void"
							]
						}
					},
					"meta": {
						"files": [
							{
								"path": "code/highcharts.src.js",
								"line": 39269
							}
						]
					}
				},
				{
					"doclet": {
						"name": "Highcharts.SeriesClickEventObject",
						"description": "Common information for a click event on a series.",
						"kind": "interface",
						"types": [
							"global.Event"
						]
					},
					"meta": {
						"files": [
							{
								"path": "code/highcharts.src.js",
								"line": 39281
							}
						]
					},
					"children": [
						{
							"doclet": {
								"name": "Highcharts.SeriesClickEventObject.point",
								"description": "Nearest point on the graph.",
								"kind": "member",
								"types": [
									"Highcharts.Point"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 39286
									}
								]
							}
						}
					]
				},
				{
					"doclet": {
						"name": "Highcharts.SeriesHideCallbackFunction",
						"description": "Gets fired when the series is hidden after chart generation time, either by\nclicking the legend item or by calling `.hide()`.",
						"kind": "typedef",
						"types": [
							"function"
						],
						"parameters": {
							"this": {
								"description": "The series where the event occured.",
								"types": [
									"Highcharts.Series"
								]
							},
							"event": {
								"description": "The event that occured.",
								"types": [
									"global.Event"
								]
							}
						},
						"return": {
							"types": [
								"void"
							]
						}
					},
					"meta": {
						"files": [
							{
								"path": "code/highcharts.src.js",
								"line": 39291
							}
						]
					}
				},
				{
					"doclet": {
						"name": "Highcharts.SeriesLegendItemClickCallbackFunction",
						"description": "Gets fired when the legend item belonging to a series is clicked. The default\naction is to toggle the visibility of the series. This can be prevented by\nreturning `false` or calling `event.preventDefault()`.",
						"kind": "typedef",
						"types": [
							"function"
						],
						"parameters": {
							"this": {
								"description": "The series where the event occured.",
								"types": [
									"Highcharts.Series"
								]
							},
							"event": {
								"description": "The event that occured.",
								"types": [
									"Highcharts.SeriesLegendItemClickEventObject"
								]
							}
						},
						"return": {
							"types": [
								"void"
							]
						}
					},
					"meta": {
						"files": [
							{
								"path": "code/highcharts.src.js",
								"line": 29795
							}
						]
					}
				},
				{
					"doclet": {
						"name": "Highcharts.SeriesLegendItemClickEventObject",
						"description": "Information about the legend click event.",
						"kind": "interface"
					},
					"meta": {
						"files": [
							{
								"path": "code/highcharts.src.js",
								"line": 29808
							}
						]
					},
					"children": [
						{
							"doclet": {
								"name": "Highcharts.SeriesLegendItemClickEventObject.browserEvent",
								"description": "Related browser event.",
								"kind": "member",
								"types": [
									"Highcharts.PointerEvent"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 29812
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.SeriesLegendItemClickEventObject.preventDefault",
								"description": "Prevent the default action of toggle the visibility of the series.",
								"kind": "member",
								"types": [
									"function"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 29816
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.SeriesLegendItemClickEventObject.target",
								"description": "Related series.",
								"kind": "member",
								"types": [
									"Highcharts.Series"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 29820
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.SeriesLegendItemClickEventObject.type",
								"description": "Event type.",
								"kind": "member",
								"types": [
									"\"legendItemClick\""
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 29824
									}
								]
							}
						}
					]
				},
				{
					"doclet": {
						"name": "Highcharts.SeriesLinecapValue",
						"description": "The SVG value used for the `stroke-linecap` and `stroke-linejoin` of a line\ngraph.",
						"kind": "typedef",
						"types": [
							"\"butt\"",
							"\"round\"",
							"\"square\"",
							"string"
						]
					},
					"meta": {
						"files": [
							{
								"path": "code/highcharts.src.js",
								"line": 39303
							}
						]
					}
				},
				{
					"doclet": {
						"name": "Highcharts.SeriesMouseOutCallbackFunction",
						"description": "Gets fired when the mouse leaves the graph.",
						"kind": "typedef",
						"types": [
							"function"
						],
						"parameters": {
							"this": {
								"description": "Series where the event occured.",
								"types": [
									"Highcharts.Series"
								]
							},
							"event": {
								"description": "Event that occured.",
								"types": [
									"global.PointerEvent"
								]
							}
						},
						"return": {
							"types": [
								"void"
							]
						}
					},
					"meta": {
						"files": [
							{
								"path": "code/highcharts.src.js",
								"line": 39343
							}
						]
					}
				},
				{
					"doclet": {
						"name": "Highcharts.SeriesMouseOverCallbackFunction",
						"description": "Gets fired when the mouse enters the graph.",
						"kind": "typedef",
						"types": [
							"function"
						],
						"parameters": {
							"this": {
								"description": "Series where the event occured.",
								"types": [
									"Highcharts.Series"
								]
							},
							"event": {
								"description": "Event that occured.",
								"types": [
									"global.PointerEvent"
								]
							}
						},
						"return": {
							"types": [
								"void"
							]
						}
					},
					"meta": {
						"files": [
							{
								"path": "code/highcharts.src.js",
								"line": 39354
							}
						]
					}
				},
				{
					"doclet": {
						"name": "Highcharts.SeriesNetworkgraphDataLabelsFormatterCallbackFunction",
						"description": "Formatter callback function.",
						"kind": "typedef",
						"types": [
							"function"
						],
						"parameters": {
							"this": {
								"description": "Data label context to format",
								"types": [
									"Highcharts.SeriesNetworkgraphDataLabelsFormatterContextObject",
									"Highcharts.PointLabelObject"
								]
							}
						},
						"return": {
							"types": [
								"string"
							],
							"description": "Formatted data label text"
						}
					},
					"meta": {
						"files": [
							{
								"path": "code/modules/networkgraph.src.js",
								"line": 1725
							}
						]
					}
				},
				{
					"doclet": {
						"name": "Highcharts.SeriesNetworkgraphDataLabelsFormatterContextObject",
						"description": "Context for the formatter function.",
						"kind": "interface",
						"types": [
							"Highcharts.PointLabelObject"
						]
					},
					"meta": {
						"files": [
							{
								"path": "code/modules/networkgraph.src.js",
								"line": 1736
							}
						]
					},
					"children": [
						{
							"doclet": {
								"name": "Highcharts.SeriesNetworkgraphDataLabelsFormatterContextObject.color",
								"description": "The color of the node.",
								"kind": "member",
								"types": [
									"Highcharts.ColorString"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/modules/networkgraph.src.js",
										"line": 1742
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.SeriesNetworkgraphDataLabelsFormatterContextObject.key",
								"description": "The ID of the node.",
								"kind": "member",
								"types": [
									"string"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/modules/networkgraph.src.js",
										"line": 1754
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.SeriesNetworkgraphDataLabelsFormatterContextObject.point",
								"description": "The point (node) object. The node name, if defined, is available through\n`this.point.name`. Arrays: `this.point.linksFrom` and `this.point.linksTo`\ncontains all nodes connected to this point.",
								"kind": "member",
								"types": [
									"Highcharts.Point"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/modules/networkgraph.src.js",
										"line": 1747
									}
								]
							}
						}
					]
				},
				{
					"doclet": {
						"name": "Highcharts.SeriesOrganizationNodesLayoutValue",
						"description": "Layout value for the child nodes in an organization chart. If `hanging`, this\nnode's children will hang below their parent, allowing a tighter packing of\nnodes in the diagram.",
						"kind": "typedef",
						"types": [
							"\"normal\"",
							"\"hanging\""
						]
					},
					"meta": {
						"files": [
							{
								"path": "code/modules/organization.src.js",
								"line": 608
							}
						]
					}
				},
				{
					"doclet": {
						"name": "Highcharts.SeriesPackedBubbleDataLabelsFormatterCallbackFunction",
						"description": "Formatter callback function.",
						"kind": "typedef",
						"types": [
							"function"
						],
						"parameters": {
							"this": {
								"description": "Data label context to format",
								"types": [
									"Highcharts.SeriesPackedBubbleDataLabelsFormatterContextObject"
								]
							}
						},
						"return": {
							"types": [
								"string"
							],
							"description": "Formatted data label text"
						}
					},
					"meta": {
						"files": [
							{
								"path": "code/highcharts-more.src.js",
								"line": 9757
							}
						]
					}
				},
				{
					"doclet": {
						"name": "Highcharts.SeriesPackedBubbleDataLabelsFormatterContextObject",
						"description": "Context for the formatter function.",
						"kind": "interface",
						"types": [
							"Highcharts.PointLabelObject"
						]
					},
					"meta": {
						"files": [
							{
								"path": "code/highcharts-more.src.js",
								"line": 9768
							}
						]
					},
					"children": [
						{
							"doclet": {
								"name": "Highcharts.SeriesPackedBubbleDataLabelsFormatterContextObject.color",
								"description": "The color of the node.",
								"kind": "member",
								"types": [
									"Highcharts.ColorString"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts-more.src.js",
										"line": 9774
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.SeriesPackedBubbleDataLabelsFormatterContextObject.key",
								"description": "The ID of the node.",
								"kind": "member",
								"types": [
									"string"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts-more.src.js",
										"line": 9786
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.SeriesPackedBubbleDataLabelsFormatterContextObject.point",
								"description": "The point (node) object. The node name, if defined, is available through\n`this.point.name`. Arrays: `this.point.linksFrom` and `this.point.linksTo`\ncontains all nodes connected to this point.",
								"kind": "member",
								"types": [
									"Highcharts.Point"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts-more.src.js",
										"line": 9779
									}
								]
							}
						}
					]
				},
				{
					"doclet": {
						"name": "Highcharts.SeriesPlotBoxObject",
						"description": "Translation and scale for the plot area of a series.",
						"kind": "interface"
					},
					"meta": {
						"files": [
							{
								"path": "code/highcharts.src.js",
								"line": 39365
							}
						]
					},
					"children": [
						{
							"doclet": {
								"name": "Highcharts.SeriesPlotBoxObject.scaleX",
								"description": "",
								"kind": "member",
								"types": [
									"number"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 39369
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.SeriesPlotBoxObject.scaleY",
								"description": "",
								"kind": "member",
								"types": [
									"number"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 39372
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.SeriesPlotBoxObject.translateX",
								"description": "",
								"kind": "member",
								"types": [
									"number"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 39375
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.SeriesPlotBoxObject.translateY",
								"description": "",
								"kind": "member",
								"types": [
									"number"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 39378
									}
								]
							}
						}
					]
				},
				{
					"doclet": {
						"name": "Highcharts.SeriesSankeyDataLabelsFormatterCallbackFunction",
						"description": "Formatter callback function.",
						"kind": "typedef",
						"types": [
							"function"
						],
						"parameters": {
							"this": {
								"description": "Data label context to format",
								"types": [
									"Highcharts.SeriesSankeyDataLabelsFormatterContextObject",
									"Highcharts.PointLabelObject"
								]
							}
						},
						"return": {
							"types": [
								"string",
								"undefined"
							],
							"description": "Formatted data label text"
						}
					},
					"meta": {
						"files": [
							{
								"path": "code/modules/sankey.src.js",
								"line": 1515
							}
						]
					}
				},
				{
					"doclet": {
						"name": "Highcharts.SeriesSankeyDataLabelsFormatterContextObject",
						"description": "Context for the node formatter function.",
						"kind": "interface",
						"types": [
							"Highcharts.PointLabelObject"
						]
					},
					"meta": {
						"files": [
							{
								"path": "code/modules/sankey.src.js",
								"line": 1526
							}
						]
					},
					"children": [
						{
							"doclet": {
								"name": "Highcharts.SeriesSankeyDataLabelsFormatterContextObject.point",
								"description": "The node object. The node name, if defined, is available through\n`this.point.name`.",
								"kind": "member",
								"types": [
									"Highcharts.SankeyNodeObject"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/modules/sankey.src.js",
										"line": 1531
									}
								]
							}
						}
					]
				},
				{
					"doclet": {
						"name": "Highcharts.SeriesShowCallbackFunction",
						"description": "Gets fired when the series is shown after chart generation time, either by\nclicking the legend item or by calling `.show()`.",
						"kind": "typedef",
						"types": [
							"function"
						],
						"parameters": {
							"this": {
								"description": "Series where the event occured.",
								"types": [
									"Highcharts.Series"
								]
							},
							"event": {
								"description": "Event that occured.",
								"types": [
									"global.Event"
								]
							}
						},
						"return": {
							"types": [
								"void"
							]
						}
					},
					"meta": {
						"files": [
							{
								"path": "code/highcharts.src.js",
								"line": 39382
							}
						]
					}
				},
				{
					"doclet": {
						"name": "Highcharts.SeriesStateValue",
						"description": "Possible key values for the series state options.",
						"kind": "typedef",
						"types": [
							"\"hover\"",
							"\"inactive\"",
							"\"normal\"",
							"\"select\""
						]
					},
					"meta": {
						"files": [
							{
								"path": "code/highcharts.src.js",
								"line": 39394
							}
						]
					}
				},
				{
					"doclet": {
						"name": "Highcharts.ShadowOptionsObject",
						"description": "The shadow options.",
						"kind": "interface"
					},
					"meta": {
						"files": [
							{
								"path": "code/highcharts.src.js",
								"line": 14082
							}
						]
					},
					"children": [
						{
							"doclet": {
								"name": "Highcharts.ShadowOptionsObject.color",
								"description": "The shadow color.",
								"kind": "member",
								"defaultValue": "${palette.neutralColor100}",
								"types": [
									"Highcharts.ColorString",
									"undefined"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 14086
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.ShadowOptionsObject.offsetX",
								"description": "The horizontal offset from the element.",
								"kind": "member",
								"defaultValue": "1",
								"types": [
									"number",
									"undefined"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 14091
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.ShadowOptionsObject.offsetY",
								"description": "The vertical offset from the element.",
								"kind": "member",
								"defaultValue": "1",
								"types": [
									"number",
									"undefined"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 14097
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.ShadowOptionsObject.opacity",
								"description": "The shadow opacity.",
								"kind": "member",
								"defaultValue": "0.15",
								"types": [
									"number",
									"undefined"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 14102
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.ShadowOptionsObject.width",
								"description": "The shadow width or distance from the element.",
								"kind": "member",
								"defaultValue": "3",
								"types": [
									"number",
									"undefined"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 14108
									}
								]
							}
						}
					]
				},
				{
					"doclet": {
						"name": "Highcharts.SizeObject",
						"description": "",
						"kind": "interface"
					},
					"meta": {
						"files": [
							{
								"path": "code/highcharts.src.js",
								"line": 14114
							}
						]
					},
					"children": [
						{
							"doclet": {
								"name": "Highcharts.SizeObject.height",
								"description": "",
								"kind": "member",
								"types": [
									"number"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 14116
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.SizeObject.width",
								"description": "",
								"kind": "member",
								"types": [
									"number"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 14119
									}
								]
							}
						}
					]
				},
				{
					"doclet": {
						"name": "Highcharts.SonificationObject",
						"description": "Global classes and objects related to sonification.",
						"kind": "interface"
					},
					"meta": {
						"files": [
							{
								"path": "code/modules/sonification.src.js",
								"line": 3278
							}
						]
					},
					"children": [
						{
							"doclet": {
								"name": "Highcharts.SonificationObject.Earcon",
								"description": "The Earcon class.",
								"kind": "member",
								"types": [
									"function"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/modules/sonification.src.js",
										"line": 3304
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.SonificationObject.Instrument",
								"description": "The Instrument class.",
								"kind": "member",
								"types": [
									"function"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/modules/sonification.src.js",
										"line": 3295
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.SonificationObject.fadeOutDuration",
								"description": "Note fade-out-time in milliseconds. Most notes are faded out quickly by\ndefault if there is time. This is to avoid abrupt stops which will cause\nperceived clicks.",
								"kind": "member",
								"types": [
									"number"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/modules/sonification.src.js",
										"line": 3284
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.SonificationObject.instruments",
								"description": "Predefined instruments, given as an object with a map between the instrument\nname and the Highcharts.Instrument object.",
								"kind": "member",
								"types": [
									"Object"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/modules/sonification.src.js",
										"line": 3299
									}
								]
							}
						}
					]
				},
				{
					"doclet": {
						"name": "Highcharts.SonificationOptions",
						"description": "Options for sonifying a chart.",
						"kind": "interface"
					},
					"meta": {
						"files": [
							{
								"path": "code/modules/sonification.src.js",
								"line": 2262
							}
						]
					},
					"children": [
						{
							"doclet": {
								"name": "Highcharts.SonificationOptions.afterSeriesWait",
								"description": "Milliseconds of silent waiting to add between series. Note that waiting time\nis considered part of the sonify duration.",
								"kind": "member",
								"types": [
									"number",
									"undefined"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/modules/sonification.src.js",
										"line": 2297
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.SonificationOptions.dataExtremes",
								"description": "Optionally provide the minimum/maximum data values for the points. If this is\nnot supplied, it is calculated from all points in the chart on demand. This\noption is supplied in the following format, as a map of point data properties\nto objects with min/max values:\n ```js\n dataExtremes: {\n y: {\n min: 0,\n max: 100\n },\n z: {\n min: -10,\n max: 10\n }\n // Properties used and not provided are calculated on demand\n }\n ```",
								"kind": "member",
								"types": [
									"Highcharts.Dictionary.<Highcharts.RangeObject>",
									"undefined"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/modules/sonification.src.js",
										"line": 2318
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.SonificationOptions.duration",
								"description": "Duration for sonifying the entire chart. The duration is distributed across\nthe different series intelligently, but does not take earcons into account.\nIt is also possible to set the duration explicitly per series, using\n`seriesOptions`. Note that points may continue to play after the duration has\npassed, but no new points will start playing.",
								"kind": "member",
								"types": [
									"number"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/modules/sonification.src.js",
										"line": 2268
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.SonificationOptions.earcons",
								"description": "Earcons to add to the chart. Note that earcons can also be added per series\nusing `seriesOptions`.",
								"kind": "member",
								"types": [
									"Array.<Highcharts.EarconConfiguration>",
									"undefined"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/modules/sonification.src.js",
										"line": 2313
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.SonificationOptions.instruments",
								"description": "The instrument definitions for the points in this chart.",
								"kind": "member",
								"types": [
									"Array.<Highcharts.PointInstrumentObject>",
									"undefined"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/modules/sonification.src.js",
										"line": 2309
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.SonificationOptions.onEnd",
								"description": "Callback after the chart has played.",
								"kind": "member",
								"types": [
									"function",
									"undefined"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/modules/sonification.src.js",
										"line": 2346
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.SonificationOptions.onSeriesEnd",
								"description": "Callback after a series has finished playing.",
								"kind": "member",
								"types": [
									"function",
									"undefined"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/modules/sonification.src.js",
										"line": 2342
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.SonificationOptions.onSeriesStart",
								"description": "Callback before a series is played.",
								"kind": "member",
								"types": [
									"function",
									"undefined"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/modules/sonification.src.js",
										"line": 2338
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.SonificationOptions.order",
								"description": "Define the order to play the series in. This can be given as a string, or an\narray specifying a custom ordering. If given as a string, valid values are\n`sequential` - where each series is played in order - or `simultaneous`,\nwhere all series are played at once. For custom ordering, supply an array as\nthe order. Each element in the array can be either a string with a series ID,\nan Earcon object, or an object with a numeric `silentWait` property\ndesignating a number of milliseconds to wait before continuing. Each element\nof the array will be played in order. To play elements simultaneously, group\nthe elements in an array.",
								"kind": "member",
								"types": [
									"string",
									"Array.<(string|Highcharts.Earcon|Array.<(string|Highcharts.Earcon)>)>"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/modules/sonification.src.js",
										"line": 2276
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.SonificationOptions.pointPlayTime",
								"description": "The axis to use for when to play the points. Can be a string with a data\nproperty (e.g. `x`), or a function. If it is a function, this function\nreceives the point as argument, and should return a numeric value. The points\nwith the lowest numeric values are then played first, and the time between\npoints will be proportional to the distance between the numeric values. This\noption can not be overridden per series.",
								"kind": "member",
								"types": [
									"string",
									"function"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/modules/sonification.src.js",
										"line": 2288
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.SonificationOptions.seriesOptions",
								"description": "Options as given to `series.sonify` to override options per series. If the\noption is supplied as an array of options objects, the `id` property of the\nobject should correspond to the series' id. If the option is supplied as a\nsingle object, the options apply to all series.",
								"kind": "member",
								"types": [
									"Object",
									"Array.<object>",
									"undefined"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/modules/sonification.src.js",
										"line": 2302
									}
								]
							}
						}
					]
				},
				{
					"doclet": {
						"name": "Highcharts.SonifySeriesOptionsObject",
						"description": "Options for sonifying a series.",
						"kind": "interface"
					},
					"meta": {
						"files": [
							{
								"path": "code/modules/sonification.src.js",
								"line": 1468
							}
						]
					},
					"children": [
						{
							"doclet": {
								"name": "Highcharts.SonifySeriesOptionsObject.dataExtremes",
								"description": "Optionally provide the minimum/maximum data values for the points. If this is\nnot supplied, it is calculated from all points in the chart on demand. This\noption is supplied in the following format, as a map of point data properties\nto objects with min/max values:\n```js\n dataExtremes: {\n y: {\n min: 0,\n max: 100\n },\n z: {\n min: -10,\n max: 10\n }\n // Properties used and not provided are calculated on demand\n }\n```",
								"kind": "member",
								"types": [
									"Highcharts.Dictionary.<Highcharts.RangeObject>",
									"undefined"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/modules/sonification.src.js",
										"line": 1495
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.SonifySeriesOptionsObject.duration",
								"description": "The duration for playing the points. Note that points might continue to play\nafter the duration has passed, but no new points will start playing.",
								"kind": "member",
								"types": [
									"number"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/modules/sonification.src.js",
										"line": 1474
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.SonifySeriesOptionsObject.earcons",
								"description": "Earcons to add to the series.",
								"kind": "member",
								"types": [
									"Array.<Highcharts.EarconConfiguration>",
									"undefined"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/modules/sonification.src.js",
										"line": 1491
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.SonifySeriesOptionsObject.instruments",
								"description": "The instrument definitions for the points in this series.",
								"kind": "member",
								"types": [
									"Array.<Highcharts.PointInstrumentObject>"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/modules/sonification.src.js",
										"line": 1487
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.SonifySeriesOptionsObject.onEnd",
								"description": "Callback after the series has played.",
								"kind": "member",
								"types": [
									"function",
									"undefined"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/modules/sonification.src.js",
										"line": 1523
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.SonifySeriesOptionsObject.onPointEnd",
								"description": "Callback after a point has finished playing.",
								"kind": "member",
								"types": [
									"function",
									"undefined"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/modules/sonification.src.js",
										"line": 1519
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.SonifySeriesOptionsObject.onPointStart",
								"description": "Callback before a point is played.",
								"kind": "member",
								"types": [
									"function",
									"undefined"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/modules/sonification.src.js",
										"line": 1515
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.SonifySeriesOptionsObject.pointPlayTime",
								"description": "The axis to use for when to play the points. Can be a string with a data\nproperty (e.g. `x`), or a function. If it is a function, this function\nreceives the point as argument, and should return a numeric value. The points\nwith the lowest numeric values are then played first, and the time between\npoints will be proportional to the distance between the numeric values.",
								"kind": "member",
								"types": [
									"string",
									"function"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/modules/sonification.src.js",
										"line": 1479
									}
								]
							}
						}
					]
				},
				{
					"doclet": {
						"name": "Highcharts.StackItemObject",
						"description": "Stack of data points",
						"kind": "interface",
						"products": [
							"highcharts"
						]
					},
					"meta": {
						"files": [
							{
								"path": "code/highcharts.src.js",
								"line": 40707
							}
						]
					},
					"children": [
						{
							"doclet": {
								"name": "Highcharts.StackItemObject.alignOptions",
								"description": "Alignment settings",
								"kind": "member",
								"types": [
									"Highcharts.AlignObject"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 40713
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.StackItemObject.axis",
								"description": "Related axis",
								"kind": "member",
								"types": [
									"Highcharts.Axis"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 40717
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.StackItemObject.cumulative",
								"description": "Cumulative value of the stacked data points",
								"kind": "member",
								"types": [
									"number"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 40721
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.StackItemObject.isNegative",
								"description": "True if on the negative side",
								"kind": "member",
								"types": [
									"boolean"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 40725
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.StackItemObject.label",
								"description": "Related SVG element",
								"kind": "member",
								"types": [
									"Highcharts.SVGElement"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 40729
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.StackItemObject.options",
								"description": "Related stack options",
								"kind": "member",
								"types": [
									"Highcharts.YAxisStackLabelsOptions"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 40733
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.StackItemObject.total",
								"description": "Total value of the stacked data points",
								"kind": "member",
								"types": [
									"number"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 40737
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.StackItemObject.x",
								"description": "Shared x value of the stack",
								"kind": "member",
								"types": [
									"number"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 40741
									}
								]
							}
						}
					]
				},
				{
					"doclet": {
						"name": "Highcharts.StockChart",
						"description": "Stock-optimized chart. Use {@link Highcharts.Chart|Chart} for common charts.",
						"kind": "class",
						"types": [
							"Highcharts.Chart"
						]
					},
					"meta": {
						"files": [
							{
								"path": "code/modules/stock.src.js",
								"line": 10705
							}
						]
					},
					"children": [
						{
							"doclet": {
								"name": "Highcharts.StockChart.init",
								"description": "Initializes the chart. The constructor's arguments are passed on\ndirectly.",
								"kind": "function",
								"fires": [
									"Highcharts.StockChart#init",
									"Highcharts.StockChart#afterInit"
								],
								"parameters": {
									"userOptions": {
										"description": "Custom options.",
										"types": [
											"Highcharts.Options"
										]
									},
									"callback": {
										"description": "Function to run when the chart has loaded and and all external\n       images are loaded.",
										"isOptional": true,
										"types": [
											"function"
										]
									}
								},
								"return": {
									"types": [
										"void"
									]
								}
							},
							"meta": {
								"files": [
									{
										"path": "code/modules/stock.src.js",
										"line": 10719
									}
								]
							}
						}
					]
				},
				{
					"doclet": {
						"name": "Highcharts.SubtitleObject",
						"description": "The chart subtitle. The subtitle has an `update` method that\nallows modifying the options directly or indirectly via\n`chart.update`.",
						"kind": "interface",
						"types": [
							"Highcharts.SVGElement"
						]
					},
					"meta": {
						"files": [
							{
								"path": "code/highcharts.src.js",
								"line": 32986
							}
						]
					},
					"children": [
						{
							"doclet": {
								"name": "Highcharts.SubtitleObject.update",
								"description": "Modify options for the subtitle.",
								"kind": "function",
								"parameters": {
									"subtitleOptions": {
										"description": "Options to modify.",
										"types": [
											"Highcharts.SubtitleOptions"
										]
									},
									"redraw": {
										"description": "Whether to redraw the chart after the subtitle is altered. If doing\n       more operations on the chart, it is a good idea to set redraw to false\n       and call {@link Chart#redraw} after.",
										"isOptional": true,
										"types": [
											"boolean"
										]
									}
								},
								"return": {
									"types": [
										"void"
									]
								}
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 32993
									}
								]
							}
						}
					]
				},
				{
					"doclet": {
						"name": "Highcharts.SymbolDictionary",
						"description": "An extendable collection of functions for defining symbol paths. Symbols are\nused internally for point markers, button and label borders and backgrounds,\nor custom shapes. Extendable by adding to {@link SVGRenderer#symbols}.",
						"kind": "interface"
					},
					"meta": {
						"files": [
							{
								"path": "code/highcharts.src.js",
								"line": 14136
							}
						]
					},
					"children": [
						{
							"doclet": {
								"name": "Highcharts.SymbolDictionary.[key:string]",
								"description": "",
								"kind": "member",
								"types": [
									"function",
									"undefined"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 14142
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.SymbolDictionary.arc",
								"description": "",
								"kind": "member",
								"types": [
									"function",
									"undefined"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 14145
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.SymbolDictionary.callout",
								"description": "",
								"kind": "member",
								"types": [
									"function",
									"undefined"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 14148
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.SymbolDictionary.circle",
								"description": "",
								"kind": "member",
								"types": [
									"function",
									"undefined"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 14151
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.SymbolDictionary.diamond",
								"description": "",
								"kind": "member",
								"types": [
									"function",
									"undefined"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 14154
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.SymbolDictionary.square",
								"description": "",
								"kind": "member",
								"types": [
									"function",
									"undefined"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 14157
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.SymbolDictionary.triangle",
								"description": "",
								"kind": "member",
								"types": [
									"function",
									"undefined"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 14160
									}
								]
							}
						}
					]
				},
				{
					"doclet": {
						"name": "Highcharts.SymbolKeyValue",
						"description": "Can be one of `arc`, `callout`, `circle`, `diamond`, `square`, `triangle`,\nand `triangle-down`. Symbols are used internally for point markers, button\nand label borders and backgrounds, or custom shapes. Extendable by adding to\n{@link SVGRenderer#symbols}.",
						"kind": "typedef",
						"types": [
							"\"arc\"",
							"\"callout\"",
							"\"circle\"",
							"\"diamond\"",
							"\"square\"",
							"\"triangle\"",
							"\"triangle-down\""
						]
					},
					"meta": {
						"files": [
							{
								"path": "code/highcharts.src.js",
								"line": 14164
							}
						]
					}
				},
				{
					"doclet": {
						"name": "Highcharts.SymbolOptionsObject",
						"description": "Additional options, depending on the actual symbol drawn.",
						"kind": "interface"
					},
					"meta": {
						"files": [
							{
								"path": "code/highcharts.src.js",
								"line": 14172
							},
							{
								"path": "code/modules/solid-gauge.src.js",
								"line": 184
							}
						]
					},
					"children": [
						{
							"doclet": {
								"name": "Highcharts.SymbolOptionsObject.anchorX",
								"description": "The anchor X position for the `callout` symbol. This is where the chevron\npoints to.",
								"kind": "member",
								"types": [
									"number",
									"undefined"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 14176
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.SymbolOptionsObject.anchorY",
								"description": "The anchor Y position for the `callout` symbol. This is where the chevron\npoints to.",
								"kind": "member",
								"types": [
									"number",
									"undefined"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 14182
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.SymbolOptionsObject.end",
								"description": "The end angle of an `arc` symbol.",
								"kind": "member",
								"types": [
									"number",
									"undefined"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 14188
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.SymbolOptionsObject.open",
								"description": "Whether to draw `arc` symbol open or closed.",
								"kind": "member",
								"types": [
									"boolean",
									"undefined"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 14193
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.SymbolOptionsObject.r",
								"description": "The radius of an `arc` symbol, or the border radius for the `callout` symbol.",
								"kind": "member",
								"types": [
									"number",
									"undefined"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 14198
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.SymbolOptionsObject.rounded",
								"description": "Whether to draw rounded edges.",
								"kind": "member",
								"types": [
									"boolean",
									"undefined"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/modules/solid-gauge.src.js",
										"line": 188
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.SymbolOptionsObject.start",
								"description": "The start angle of an `arc` symbol.",
								"kind": "member",
								"types": [
									"number",
									"undefined"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 14203
									}
								]
							}
						}
					]
				},
				{
					"doclet": {
						"name": "Highcharts.Tick",
						"description": "The Tick class.",
						"kind": "class"
					},
					"meta": {
						"files": [
							{
								"path": "code/highcharts.src.js",
								"line": 17781
							}
						]
					},
					"children": [
						{
							"doclet": {
								"name": "Highcharts.Tick.axis",
								"description": "The related axis of the tick.",
								"kind": "member",
								"types": [
									"Highcharts.Axis"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 17811
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.Tick.constructor",
								"description": "The Tick class.",
								"kind": "constructor",
								"parameters": {
									"axis": {
										"description": "The axis of the tick.",
										"types": [
											"Highcharts.Axis"
										]
									},
									"pos": {
										"description": "The position of the tick on the axis in terms of axis values.",
										"types": [
											"number"
										]
									},
									"type": {
										"description": "The type of tick, either 'minor' or an empty string",
										"isOptional": true,
										"types": [
											"string"
										]
									},
									"noLabel": {
										"description": "Whether to disable the label or not. Defaults to false.",
										"isOptional": true,
										"types": [
											"boolean"
										]
									},
									"parameters": {
										"description": "Optional parameters for the tick.",
										"isOptional": true,
										"types": [
											"object"
										]
									}
								},
								"return": {
									"types": [
										"void"
									]
								}
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 0
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.Tick.gridLine",
								"description": "The rendered grid line of the tick.",
								"kind": "member",
								"types": [
									"Highcharts.SVGElement",
									"undefined"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 18393
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.Tick.isFirst",
								"description": "True if the tick is the first one on the axis.",
								"kind": "member",
								"isReadOnly": true,
								"types": [
									"boolean",
									"undefined"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 17898
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.Tick.isLast",
								"description": "True if the tick is the last one on the axis.",
								"kind": "member",
								"isReadOnly": true,
								"types": [
									"boolean",
									"undefined"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 17905
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.Tick.label",
								"description": "The rendered text label of the tick.",
								"kind": "member",
								"types": [
									"Highcharts.SVGElement",
									"undefined"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 17974
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.Tick.mark",
								"description": "The rendered mark of the tick.",
								"kind": "member",
								"types": [
									"Highcharts.SVGElement",
									"undefined"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 18441
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.Tick.pos",
								"description": "The logical position of the tick on the axis in terms of axis values.",
								"kind": "member",
								"types": [
									"number"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 17817
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.Tick.tickmarkOffset",
								"description": "The mark offset of the tick on the axis. Usually `undefined`, numeric\nfor grid axes.",
								"kind": "member",
								"types": [
									"number",
									"undefined"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 17830
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.Tick.type",
								"description": "The tick type, which can be `\"minor\"`, or an empty string.",
								"kind": "member",
								"types": [
									"string"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 17823
									}
								]
							}
						}
					]
				},
				{
					"doclet": {
						"name": "Highcharts.TilemapShapeValue",
						"description": "",
						"kind": "typedef",
						"types": [
							"\"circle\"",
							"\"diamond\"",
							"\"hexagon\"",
							"\"square\""
						]
					},
					"meta": {
						"files": [
							{
								"path": "code/modules/tilemap.src.js",
								"line": 765
							}
						]
					}
				},
				{
					"doclet": {
						"name": "Highcharts.Time",
						"description": "The Time class. Time settings are applied in general for each page using\n`Highcharts.setOptions`, or individually for each Chart item through the\n[time](https://api.highcharts.com/highcharts/time) options set.\n\nThe Time object is available from {@link Highcharts.Chart#time},\nwhich refers to `Highcharts.time` if no individual time settings are\napplied.",
						"kind": "class"
					},
					"meta": {
						"files": [
							{
								"path": "code/highcharts.src.js",
								"line": 3815
							}
						]
					},
					"children": [
						{
							"doclet": {
								"name": "Highcharts.Time.constructor",
								"description": "The Time class. Time settings are applied in general for each page using\n`Highcharts.setOptions`, or individually for each Chart item through the\n[time](https://api.highcharts.com/highcharts/time) options set.\n\nThe Time object is available from {@link Highcharts.Chart#time},\nwhich refers to `Highcharts.time` if no individual time settings are\napplied.",
								"kind": "constructor",
								"parameters": {
									"options": {
										"description": "Time options as defined in [chart.options.time](/highcharts/time).",
										"types": [
											"Highcharts.TimeOptions"
										]
									}
								},
								"return": {
									"types": [
										"void"
									]
								}
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 0
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.Time.dateFormat",
								"description": "Formats a JavaScript date timestamp (milliseconds since Jan 1st 1970)\ninto a human readable date string. The available format keys are listed\nbelow. Additional formats can be given in the\n{@link Highcharts.dateFormats} hook.\n\nSupported format keys:\n- `%a`: Short weekday, like 'Mon'\n- `%A`: Long weekday, like 'Monday'\n- `%d`: Two digit day of the month, 01 to 31\n- `%e`: Day of the month, 1 through 31\n- `%w`: Day of the week, 0 through 6\n- `%b`: Short month, like 'Jan'\n- `%B`: Long month, like 'January'\n- `%m`: Two digit month number, 01 through 12\n- `%y`: Two digits year, like 09 for 2009\n- `%Y`: Four digits year, like 2009\n- `%H`: Two digits hours in 24h format, 00 through 23\n- `%k`: Hours in 24h format, 0 through 23\n- `%I`: Two digits hours in 12h format, 00 through 11\n- `%l`: Hours in 12h format, 1 through 12\n- `%M`: Two digits minutes, 00 through 59\n- `%p`: Upper case AM or PM\n- `%P`: Lower case AM or PM\n- `%S`: Two digits seconds, 00 through 59\n- `%L`: Milliseconds (naming from Ruby)",
								"kind": "function",
								"parameters": {
									"format": {
										"description": "The desired format where various time representations are\n       prefixed with %.",
										"types": [
											"string"
										]
									},
									"timestamp": {
										"description": "The JavaScript timestamp.",
										"isOptional": true,
										"types": [
											"number"
										]
									},
									"capitalize": {
										"description": "Upper case first letter in the return.",
										"isOptional": true,
										"types": [
											"boolean"
										]
									}
								},
								"return": {
									"types": [
										"string"
									],
									"description": "The formatted date."
								}
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 4103
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.Time.get",
								"description": "Get the value of a date object in given units, and subject to the Time\nobject's current timezone settings. This function corresponds directly to\nJavaScripts `Date.getXXX / Date.getUTCXXX`, so instead of calling\n`date.getHours()` or `date.getUTCHours()` we will call\n`time.get('Hours')`.",
								"kind": "function",
								"parameters": {
									"unit": {
										"types": [
											"Highcharts.TimeUnitValue"
										]
									},
									"date": {
										"types": [
											"Date"
										]
									}
								},
								"return": {
									"types": [
										"number"
									],
									"description": "The given time unit"
								}
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 3897
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.Time.getTimeTicks",
								"description": "Return an array with time positions distributed on round time values\nright and right after min and max. Used in datetime axes as well as for\ngrouping data on a datetime axis.",
								"kind": "function",
								"parameters": {
									"normalizedInterval": {
										"description": "The interval in axis values (ms) and the count",
										"types": [
											"Highcharts.TimeNormalizedObject"
										]
									},
									"min": {
										"description": "The minimum in axis values",
										"isOptional": true,
										"types": [
											"number"
										]
									},
									"max": {
										"description": "The maximum in axis values",
										"isOptional": true,
										"types": [
											"number"
										]
									},
									"startOfWeek": {
										"isOptional": true,
										"types": [
											"number"
										]
									}
								},
								"return": {
									"types": [
										"Highcharts.AxisTickPositionsArray"
									]
								}
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 4243
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.Time.getTimezoneOffset",
								"description": "Get the time zone offset based on the current timezone information as\nset in the global options.",
								"kind": "function",
								"parameters": {
									"timestamp": {
										"description": "The JavaScript timestamp to inspect.",
										"types": [
											"number"
										]
									}
								},
								"return": {
									"types": [
										"number"
									],
									"description": "The timezone offset in minutes compared to UTC."
								}
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 3872
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.Time.makeTime",
								"description": "Make a time and returns milliseconds. Interprets the inputs as UTC time,\nlocal time or a specific timezone time depending on the current time\nsettings.",
								"kind": "function",
								"parameters": {
									"year": {
										"description": "The year",
										"types": [
											"number"
										]
									},
									"month": {
										"description": "The month. Zero-based, so January is 0.",
										"types": [
											"number"
										]
									},
									"date": {
										"description": "The day of the month",
										"isOptional": true,
										"types": [
											"number"
										]
									},
									"hours": {
										"description": "The hour of the day, 0-23.",
										"isOptional": true,
										"types": [
											"number"
										]
									},
									"minutes": {
										"description": "The minutes",
										"isOptional": true,
										"types": [
											"number"
										]
									},
									"seconds": {
										"description": "The seconds",
										"isOptional": true,
										"types": [
											"number"
										]
									}
								},
								"return": {
									"types": [
										"number"
									],
									"description": "The time in milliseconds since January 1st 1970."
								}
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 4004
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.Time.set",
								"description": "Set the value of a date object in given units, and subject to the Time\nobject's current timezone settings. This function corresponds directly to\nJavaScripts `Date.setXXX / Date.setUTCXXX`, so instead of calling\n`date.setHours(0)` or `date.setUTCHours(0)` we will call\n`time.set('Hours', 0)`.",
								"kind": "function",
								"parameters": {
									"unit": {
										"types": [
											"Highcharts.TimeUnitValue"
										]
									},
									"date": {
										"types": [
											"Date"
										]
									},
									"value": {
										"types": [
											"number"
										]
									}
								},
								"return": {
									"types": [
										"number"
									],
									"description": "The epoch milliseconds of the updated date"
								}
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 3928
									}
								]
							}
						}
					]
				},
				{
					"doclet": {
						"name": "Highcharts.TimeFormatCallbackFunction",
						"description": "Function of an additional date format specifier.",
						"kind": "typedef",
						"types": [
							"function"
						],
						"parameters": {
							"timestamp": {
								"description": "The time to format.",
								"types": [
									"number"
								]
							}
						},
						"return": {
							"types": [
								"string"
							],
							"description": "The formatted portion of the date."
						}
					},
					"meta": {
						"files": [
							{
								"path": "code/highcharts.src.js",
								"line": 4490
							}
						]
					}
				},
				{
					"doclet": {
						"name": "Highcharts.TimeNormalizedObject",
						"description": "Normalized interval.",
						"kind": "interface"
					},
					"meta": {
						"files": [
							{
								"path": "code/highcharts.src.js",
								"line": 4475
							}
						]
					},
					"children": [
						{
							"doclet": {
								"name": "Highcharts.TimeNormalizedObject.count",
								"description": "The count.",
								"kind": "member",
								"types": [
									"number"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 4479
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.TimeNormalizedObject.unitRange",
								"description": "The interval in axis values (ms).",
								"kind": "member",
								"types": [
									"number"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 4484
									}
								]
							}
						}
					]
				},
				{
					"doclet": {
						"name": "Highcharts.TimeTicksInfoObject",
						"description": "Additonal time tick information.",
						"kind": "interface",
						"types": [
							"Highcharts.TimeNormalizedObject"
						]
					},
					"meta": {
						"files": [
							{
								"path": "code/highcharts.src.js",
								"line": 18580
							}
						]
					},
					"children": [
						{
							"doclet": {
								"name": "Highcharts.TimeTicksInfoObject.higherRanks",
								"description": "",
								"kind": "member",
								"types": [
									"Array.<string>"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 18585
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.TimeTicksInfoObject.totalRange",
								"description": "",
								"kind": "member",
								"types": [
									"number"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 18588
									}
								]
							}
						}
					]
				},
				{
					"doclet": {
						"name": "Highcharts.TimeUnitValue",
						"description": "Time units used in `Time.get` and `Time.set`",
						"kind": "typedef",
						"types": [
							"\"Date\"",
							"\"Day\"",
							"\"FullYear\"",
							"\"Hours\"",
							"\"Milliseconds\"",
							"\"Minutes\"",
							"\"Month\"",
							"\"Seconds\""
						]
					},
					"meta": {
						"files": [
							{
								"path": "code/highcharts.src.js",
								"line": 3892
							}
						]
					}
				},
				{
					"doclet": {
						"name": "Highcharts.TimelineDataLabelsFormatterCallbackFunction",
						"description": "Callback JavaScript function to format the data label as a string. Note that\nif a `format` is defined, the format takes precedence and the formatter is\nignored.",
						"kind": "typedef",
						"types": [
							"function"
						],
						"parameters": {
							"this": {
								"description": "Data label context to format",
								"types": [
									"Highcharts.PointLabelObject",
									"Highcharts.TimelineDataLabelsFormatterContextObject"
								]
							}
						},
						"return": {
							"types": [
								"number",
								"string",
								"null",
								"undefined"
							],
							"description": "Formatted data label text"
						}
					},
					"meta": {
						"files": [
							{
								"path": "code/modules/timeline.src.js",
								"line": 707
							}
						]
					}
				},
				{
					"doclet": {
						"name": "Highcharts.TimelineDataLabelsFormatterContextObject",
						"description": "",
						"kind": "interface",
						"types": [
							"Highcharts.PointLabelObject"
						]
					},
					"meta": {
						"files": [
							{
								"path": "code/modules/timeline.src.js",
								"line": 720
							}
						]
					},
					"children": [
						{
							"doclet": {
								"name": "Highcharts.TimelineDataLabelsFormatterContextObject.key",
								"description": "",
								"kind": "member",
								"types": [
									"string",
									"undefined"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/modules/timeline.src.js",
										"line": 723
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.TimelineDataLabelsFormatterContextObject.point",
								"description": "",
								"kind": "member",
								"types": [
									"Highcharts.Point"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/modules/timeline.src.js",
										"line": 726
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.TimelineDataLabelsFormatterContextObject.series",
								"description": "",
								"kind": "member",
								"types": [
									"Highcharts.Series"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/modules/timeline.src.js",
										"line": 729
									}
								]
							}
						}
					]
				},
				{
					"doclet": {
						"name": "Highcharts.TimezoneOffsetCallbackFunction",
						"description": "A callback to return the time zone offset for a given datetime. It\ntakes the timestamp in terms of milliseconds since January 1 1970,\nand returns the timezone offset in minutes. This provides a hook\nfor drawing time based charts in specific time zones using their\nlocal DST crossover dates, with the help of external libraries.",
						"kind": "typedef",
						"types": [
							"function"
						],
						"parameters": {
							"timestamp": {
								"description": "Timestamp in terms of milliseconds since January 1 1970.",
								"types": [
									"number"
								]
							}
						},
						"return": {
							"types": [
								"number"
							],
							"description": "Timezone offset in minutes."
						}
					},
					"meta": {
						"files": [
							{
								"path": "code/highcharts.src.js",
								"line": 4510
							}
						]
					}
				},
				{
					"doclet": {
						"name": "Highcharts.TitleObject",
						"description": "The chart title. The title has an `update` method that allows modifying the\noptions directly or indirectly via `chart.update`.",
						"kind": "interface",
						"types": [
							"Highcharts.SVGElement"
						]
					},
					"meta": {
						"files": [
							{
								"path": "code/highcharts.src.js",
								"line": 32967
							}
						]
					},
					"children": [
						{
							"doclet": {
								"name": "Highcharts.TitleObject.update",
								"description": "Modify options for the title.",
								"kind": "function",
								"parameters": {
									"titleOptions": {
										"description": "Options to modify.",
										"types": [
											"Highcharts.TitleOptions"
										]
									},
									"redraw": {
										"description": "Whether to redraw the chart after the title is altered. If doing more\n       operations on the chart, it is a good idea to set redraw to false and\n       call {@link Chart#redraw} after.",
										"isOptional": true,
										"types": [
											"boolean"
										]
									}
								},
								"return": {
									"types": [
										"void"
									]
								}
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 32973
									}
								]
							}
						}
					]
				},
				{
					"doclet": {
						"name": "Highcharts.Tooltip",
						"description": "Tooltip of a chart.",
						"kind": "class"
					},
					"meta": {
						"files": [
							{
								"path": "code/highcharts.src.js",
								"line": 23798
							}
						]
					},
					"children": [
						{
							"doclet": {
								"name": "Highcharts.Tooltip.chart",
								"description": "Chart of the tooltip.",
								"kind": "member",
								"isReadOnly": true,
								"types": [
									"Highcharts.Chart"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 24368
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.Tooltip.constructor",
								"description": "Tooltip of a chart.",
								"kind": "constructor",
								"parameters": {
									"chart": {
										"description": "The chart instance.",
										"types": [
											"Highcharts.Chart"
										]
									},
									"options": {
										"description": "Tooltip options.",
										"types": [
											"Highcharts.TooltipOptions"
										]
									}
								},
								"return": {
									"types": [
										"void"
									]
								}
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 0
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.Tooltip.container",
								"description": "Reference to the tooltip's container, when\n[Highcharts.Tooltip#outside] is set to true, otherwise\nit's undefined.",
								"kind": "member",
								"types": [
									"Highcharts.HTMLDOMElement",
									"undefined"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 24080
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.Tooltip.defaultFormatter",
								"description": "In case no user defined formatter is given, this will be used. Note that\nthe context here is an object holding point, series, x, y etc.",
								"kind": "function",
								"parameters": {
									"tooltip": {
										"types": [
											"Highcharts.Tooltip"
										]
									}
								},
								"return": {
									"types": [
										"Array.<string>"
									]
								}
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 23924
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.Tooltip.destroy",
								"description": "Removes and destroys the tooltip and its elements.",
								"kind": "function",
								"return": {
									"types": [
										"void"
									]
								}
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 23945
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.Tooltip.getLabel",
								"description": "Creates the Tooltip label element if it does not exist, then returns it.",
								"kind": "function",
								"return": {
									"types": [
										"Highcharts.SVGElement"
									]
								}
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 24046
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.Tooltip.hide",
								"description": "Hides the tooltip with a fade out animation.",
								"kind": "function",
								"parameters": {
									"delay": {
										"description": "The fade out in milliseconds. If no value is provided the value\n       of the tooltip.hideDelay option is used. A value of 0 disables\n       the fade out animation.",
										"isOptional": true,
										"types": [
											"number"
										]
									}
								},
								"return": {
									"types": [
										"void"
									]
								}
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 24332
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.Tooltip.options",
								"description": "Used tooltip options.",
								"kind": "member",
								"isReadOnly": true,
								"types": [
									"Highcharts.TooltipOptions"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 24376
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.Tooltip.outside",
								"description": "Whether to allow the tooltip to render outside the chart's SVG\nelement box. By default (false), the tooltip is rendered within the\nchart's SVG element, which results in the tooltip being aligned\ninside the chart area.",
								"kind": "member",
								"isReadOnly": true,
								"types": [
									"boolean"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 24429
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.Tooltip.refresh",
								"description": "Refresh the tooltip's text and position.",
								"kind": "function",
								"parameters": {
									"pointOrPoints": {
										"description": "Either a point or an array of points.",
										"types": [
											"Highcharts.Point",
											"Array.<Highcharts.Point>"
										]
									},
									"mouseEvent": {
										"description": "Mouse event, that is responsible for the refresh and should be\n       used for the tooltip update.",
										"isOptional": true,
										"types": [
											"Highcharts.PointerEventObject"
										]
									}
								},
								"return": {
									"types": [
										"void"
									]
								}
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 24505
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.Tooltip.renderer",
								"description": "Reference to the tooltip's renderer, when\n[Highcharts.Tooltip#outside] is set to true, otherwise\nit's undefined.",
								"kind": "member",
								"types": [
									"Highcharts.SVGRenderer",
									"undefined"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 24099
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.Tooltip.shared",
								"description": "When the tooltip is shared, the entire plot area will capture mouse\nmovement or touch events.",
								"kind": "member",
								"isReadOnly": true,
								"types": [
									"boolean",
									"undefined"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 24420
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.Tooltip.split",
								"description": "True, if the tooltip is split into one label per series, with the\nheader close to the axis.",
								"kind": "member",
								"isReadOnly": true,
								"types": [
									"boolean",
									"undefined"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 24411
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.Tooltip.update",
								"description": "Updates the tooltip with the provided tooltip options.",
								"kind": "function",
								"parameters": {
									"options": {
										"description": "The tooltip options to update.",
										"types": [
											"Highcharts.TooltipOptions"
										]
									}
								},
								"return": {
									"types": [
										"void"
									]
								}
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 25100
									}
								]
							}
						}
					]
				},
				{
					"doclet": {
						"name": "Highcharts.TooltipFormatterCallbackFunction",
						"description": "Callback function to format the text of the tooltip from scratch.\n\nIn case of single or shared tooltips, a string should be be returned. In case\nof splitted tooltips, it should return an array where the first item is the\nheader, and subsequent items are mapped to the points. Return `false` to\ndisable tooltip for a specific point on series.",
						"kind": "typedef",
						"types": [
							"function"
						],
						"parameters": {
							"this": {
								"description": "Context to format",
								"types": [
									"Highcharts.TooltipFormatterContextObject"
								]
							},
							"tooltip": {
								"description": "The tooltip instance",
								"types": [
									"Highcharts.Tooltip"
								]
							}
						},
						"return": {
							"types": [
								"false",
								"string",
								"Array.<(string|null|undefined)>",
								"null",
								"undefined"
							],
							"description": "Formatted text or false"
						}
					},
					"meta": {
						"files": [
							{
								"path": "code/highcharts.src.js",
								"line": 25168
							}
						]
					}
				},
				{
					"doclet": {
						"name": "Highcharts.TooltipFormatterContextObject",
						"description": "",
						"kind": "interface"
					},
					"meta": {
						"files": [
							{
								"path": "code/highcharts.src.js",
								"line": 25187
							}
						]
					},
					"children": [
						{
							"doclet": {
								"name": "Highcharts.TooltipFormatterContextObject.color",
								"description": "",
								"kind": "member",
								"types": [
									"Highcharts.ColorString",
									"Highcharts.GradientColorObject",
									"Highcharts.PatternObject"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 25189
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.TooltipFormatterContextObject.colorIndex",
								"description": "",
								"kind": "member",
								"types": [
									"number",
									"undefined"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 25192
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.TooltipFormatterContextObject.key",
								"description": "",
								"kind": "member",
								"types": [
									"number"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 25195
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.TooltipFormatterContextObject.percentage",
								"description": "",
								"kind": "member",
								"types": [
									"number",
									"undefined"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 25198
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.TooltipFormatterContextObject.point",
								"description": "",
								"kind": "member",
								"types": [
									"Highcharts.Point"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 25201
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.TooltipFormatterContextObject.points",
								"description": "",
								"kind": "member",
								"types": [
									"Array.<Highcharts.TooltipFormatterContextObject>",
									"undefined"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 25204
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.TooltipFormatterContextObject.series",
								"description": "",
								"kind": "member",
								"types": [
									"Highcharts.Series"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 25207
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.TooltipFormatterContextObject.total",
								"description": "",
								"kind": "member",
								"types": [
									"number",
									"undefined"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 25210
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.TooltipFormatterContextObject.x",
								"description": "",
								"kind": "member",
								"types": [
									"number"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 25213
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.TooltipFormatterContextObject.y",
								"description": "",
								"kind": "member",
								"types": [
									"number"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 25216
									}
								]
							}
						}
					]
				},
				{
					"doclet": {
						"name": "Highcharts.TooltipPositionerCallbackFunction",
						"description": "A callback function to place the tooltip in a specific position.",
						"kind": "typedef",
						"types": [
							"function"
						],
						"parameters": {
							"this": {
								"description": "Tooltip context of the callback.",
								"types": [
									"Highcharts.Tooltip"
								]
							},
							"labelWidth": {
								"description": "Width of the tooltip.",
								"types": [
									"number"
								]
							},
							"labelHeight": {
								"description": "Height of the tooltip.",
								"types": [
									"number"
								]
							},
							"point": {
								"description": "Point information for positioning a tooltip.",
								"types": [
									"Highcharts.TooltipPositionerPointObject"
								]
							}
						},
						"return": {
							"types": [
								"Highcharts.PositionObject"
							],
							"description": "New position for the tooltip."
						}
					},
					"meta": {
						"files": [
							{
								"path": "code/highcharts.src.js",
								"line": 25220
							}
						]
					}
				},
				{
					"doclet": {
						"name": "Highcharts.TooltipPositionerPointObject",
						"description": "Point information for positioning a tooltip.",
						"kind": "interface",
						"types": [
							"Highcharts.Point"
						]
					},
					"meta": {
						"files": [
							{
								"path": "code/highcharts.src.js",
								"line": 25240
							}
						]
					},
					"children": [
						{
							"doclet": {
								"name": "Highcharts.TooltipPositionerPointObject.isHeader",
								"description": "If `tooltip.split` option is enabled and positioner is called for each of the\nboxes separately, this property indicates the call on the xAxis header, which\nis not a point itself.",
								"kind": "member",
								"types": [
									"boolean"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 25245
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.TooltipPositionerPointObject.plotX",
								"description": "The reference point relative to the plot area. Add chart.plotLeft to get the\nfull coordinates.",
								"kind": "member",
								"types": [
									"number"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 25251
									}
								]
							}
						},
						{
							"doclet": {
								"name": "Highcharts.TooltipPositionerPointObject.plotY",
								"description": "The reference point relative to the plot area. Add chart.plotTop to get the\nfull coordinates.",
								"kind": "member",
								"types": [
									"number"
								]
							},
							"meta": {
								"files": [
									{
										"path": "code/highcharts.src.js",
										"line": 25256
									}
								]
							}
						}
					]
				},
				{
					"doclet": {
						"name": "Highcharts.TooltipShapeValue",
						"description": "",
						"kind": "typedef",
						"types": [
							"\"callout\"",
							"\"circle\"",
							"\"square\""
						]
					},
					"meta": {
						"files": [
							{
								"path": "code/highcharts.src.js",
								"line": 25262
							}
						]
					}
				},
				{
					"doclet": {
						"name": "Highcharts.VariablePieSizeByValue",
						"description": "",
						"kind": "typedef",
						"types": [
							"\"area\"",
							"\"radius\""
						]
					},
					"meta": {
						"files": [
							{
								"path": "code/modules/variable-pie.src.js",
								"line": 457
							}
						]
					}
				},
				{
					"doclet": {
						"name": "Highcharts.VerticalAlignValue",
						"description": "The vertical alignment of an element.",
						"kind": "typedef",
						"types": [
							"\"bottom\"",
							"\"middle\"",
							"\"top\""
						]
					},
					"meta": {
						"files": [
							{
								"path": "code/highcharts.src.js",
								"line": 11084
							}
						]
					}
				},
				{
					"doclet": {
						"name": "Highcharts.WrapProceedFunction",
						"description": "Proceed function to call original (wrapped) function.",
						"kind": "typedef",
						"types": [
							"function"
						],
						"parameters": {
							"arg1": {
								"description": "Optional argument. Without any arguments defaults to first argument of\n       the wrapping function.",
								"isOptional": true,
								"types": [
									"*"
								]
							},
							"arg2": {
								"description": "Optional argument. Without any arguments defaults to second argument\n       of the wrapping function.",
								"isOptional": true,
								"types": [
									"*"
								]
							},
							"arg3": {
								"description": "Optional argument. Without any arguments defaults to third argument of\n       the wrapping function.",
								"isOptional": true,
								"types": [
									"*"
								]
							}
						},
						"return": {
							"types": [
								"*"
							],
							"description": "Return value of the original function."
						}
					},
					"meta": {
						"files": [
							{
								"path": "code/highcharts.src.js",
								"line": 2124
							}
						]
					}
				},
				{
					"doclet": {
						"name": "Highcharts.XAxisCrosshairLabelFormatterCallbackFunction",
						"description": "Formatter function for the text of a crosshair label.",
						"kind": "typedef",
						"types": [
							"function"
						],
						"parameters": {
							"this": {
								"description": "Axis context",
								"types": [
									"Highcharts.Axis"
								]
							},
							"value": {
								"description": "Y value of the data point",
								"types": [
									"number"
								]
							}
						},
						"return": {
							"types": [
								"string"
							]
						}
					},
					"meta": {
						"files": [
							{
								"path": "code/highcharts.src.js",
								"line": 22102
							}
						]
					}
				},
				{
					"doclet": {
						"name": "Highcharts.ZAxis",
						"description": "3D axis for z coordinates.",
						"kind": "member"
					},
					"meta": {
						"files": [
							{
								"path": "code/highcharts-3d.src.js",
								"line": 3219
							}
						]
					}
				},
				{
					"doclet": {
						"name": "Highcharts.addEvent<T>",
						"description": "Add an event listener.",
						"kind": "function",
						"isStatic": true,
						"parameters": {
							"el": {
								"description": "The element or object to add a listener to. It can be a\n       {@link HTMLDOMElement}, an {@link SVGElement} or any other object.",
								"types": [
									"Highcharts.Class.<T>",
									"T"
								]
							},
							"type": {
								"description": "The event type.",
								"types": [
									"string"
								]
							},
							"fn": {
								"description": "The function callback to execute when the event is fired.",
								"types": [
									"Highcharts.EventCallbackFunction.<T>",
									"function"
								]
							},
							"options": {
								"description": "Options for adding the event.",
								"isOptional": true,
								"types": [
									"Highcharts.EventOptionsObject"
								]
							}
						},
						"return": {
							"types": [
								"function"
							],
							"description": "A callback function to remove the added event."
						}
					},
					"meta": {
						"files": [
							{
								"path": "code/highcharts.src.js",
								"line": 1424
							}
						]
					}
				},
				{
					"doclet": {
						"name": "Highcharts.ajax",
						"description": "Perform an Ajax call.",
						"kind": "function",
						"isStatic": true,
						"parameters": {
							"attr": {
								"description": "The Ajax settings to use.",
								"types": [
									"Partial.<Highcharts.AjaxSettingsObject>"
								]
							}
						},
						"return": {
							"types": [
								"false",
								"undefined"
							],
							"description": "Returns false, if error occured."
						}
					},
					"meta": {
						"files": [
							{
								"path": "code/modules/data.src.js",
								"line": 46
							}
						]
					}
				},
				{
					"doclet": {
						"name": "Highcharts.ajax",
						"description": "Perform an Ajax call.",
						"kind": "function",
						"isStatic": true,
						"parameters": {
							"attr": {
								"description": "The Ajax settings to use.",
								"types": [
									"Partial.<Highcharts.AjaxSettingsObject>"
								]
							}
						},
						"return": {
							"types": [
								"false",
								"undefined"
							],
							"description": "Returns false, if error occured."
						}
					},
					"meta": {
						"files": [
							{
								"path": "code/modules/exporting.src.js",
								"line": 1242
							}
						]
					}
				},
				{
					"doclet": {
						"name": "Highcharts.animObject",
						"description": "Get the animation in object form, where a disabled animation is always\nreturned as `{ duration: 0 }`.",
						"kind": "function",
						"isStatic": true,
						"parameters": {
							"animation": {
								"description": "An animation setting. Can be an object with duration, complete and\n       easing properties, or a boolean to enable or disable.",
								"isOptional": true,
								"types": [
									"boolean",
									"Highcharts.AnimationOptionsObject"
								]
							}
						},
						"return": {
							"types": [
								"Highcharts.AnimationOptionsObject"
							],
							"description": "An object with at least a duration property."
						}
					},
					"meta": {
						"files": [
							{
								"path": "code/highcharts.src.js",
								"line": 7737
							}
						]
					}
				},
				{
					"doclet": {
						"name": "Highcharts.animate",
						"description": "The global animate method, which uses Fx to create individual animators.",
						"kind": "function",
						"isStatic": true,
						"parameters": {
							"el": {
								"description": "The element to animate.",
								"types": [
									"Highcharts.HTMLDOMElement",
									"Highcharts.SVGElement"
								]
							},
							"params": {
								"description": "An object containing key-value pairs of the properties to animate.\n       Supports numeric as pixel-based CSS properties for HTML objects and\n       attributes for SVGElements.",
								"types": [
									"Highcharts.CSSObject",
									"Highcharts.SVGAttributes"
								]
							},
							"opt": {
								"description": "Animation options.",
								"isOptional": true,
								"types": [
									"Partial.<Highcharts.AnimationOptionsObject>"
								]
							}
						},
						"return": {
							"types": [
								"void"
							]
						}
					},
					"meta": {
						"files": [
							{
								"path": "code/highcharts.src.js",
								"line": 7797
							}
						]
					}
				},
				{
					"doclet": {
						"name": "Highcharts.apply",
						"description": "Apply the theme.",
						"kind": "function",
						"return": {
							"types": [
								"void"
							]
						}
					},
					"meta": {
						"files": [
							{
								"path": "code/themes/avocado.src.js",
								"line": 84
							},
							{
								"path": "code/themes/dark-blue.src.js",
								"line": 296
							},
							{
								"path": "code/themes/dark-green.src.js",
								"line": 296
							},
							{
								"path": "code/themes/dark-unica.src.js",
								"line": 256
							},
							{
								"path": "code/themes/gray.src.js",
								"line": 304
							},
							{
								"path": "code/themes/grid-light.src.js",
								"line": 118
							},
							{
								"path": "code/themes/grid.src.js",
								"line": 155
							},
							{
								"path": "code/themes/sand-signika.src.js",
								"line": 147
							},
							{
								"path": "code/themes/skies.src.js",
								"line": 148
							},
							{
								"path": "code/themes/sunset.src.js",
								"line": 83
							}
						]
					}
				},
				{
					"doclet": {
						"name": "Highcharts.arrayMax",
						"description": "Non-recursive method to find the lowest member of an array. `Math.max` raises\na maximum call stack size exceeded error in Chrome when trying to apply more\nthan 150.000 points. This method is slightly slower, but safe.",
						"kind": "function",
						"isStatic": true,
						"parameters": {
							"data": {
								"description": "An array of numbers.",
								"types": [
									"Array.<*>"
								]
							}
						},
						"return": {
							"types": [
								"number"
							],
							"description": "The highest number."
						}
					},
					"meta": {
						"files": [
							{
								"path": "code/highcharts.src.js",
								"line": 978
							}
						]
					}
				},
				{
					"doclet": {
						"name": "Highcharts.arrayMin",
						"description": "Non-recursive method to find the lowest member of an array. `Math.min` raises\na maximum call stack size exceeded error in Chrome when trying to apply more\nthan 150.000 points. This method is slightly slower, but safe.",
						"kind": "function",
						"isStatic": true,
						"parameters": {
							"data": {
								"description": "An array of numbers.",
								"types": [
									"Array.<*>"
								]
							}
						},
						"return": {
							"types": [
								"number"
							],
							"description": "The lowest number."
						}
					},
					"meta": {
						"files": [
							{
								"path": "code/highcharts.src.js",
								"line": 955
							}
						]
					}
				},
				{
					"doclet": {
						"name": "Highcharts.attr",
						"description": "Set or get an attribute or an object of attributes. To use as a setter, pass\na key and a value, or let the second argument be a collection of keys and\nvalues. To use as a getter, pass only a string as the second argument.",
						"kind": "function",
						"isStatic": true,
						"parameters": {
							"elem": {
								"description": "The DOM element to receive the attribute(s).",
								"types": [
									"Highcharts.HTMLDOMElement",
									"Highcharts.SVGDOMElement"
								]
							},
							"prop": {
								"description": "The property or an object of key-value pairs.",
								"isOptional": true,
								"types": [
									"string",
									"Highcharts.HTMLAttributes",
									"Highcharts.SVGAttributes"
								]
							},
							"value": {
								"description": "The value if a single property is set.",
								"isOptional": true,
								"types": [
									"number",
									"string"
								]
							}
						},
						"return": {
							"types": [
								"string",
								"null",
								"undefined"
							],
							"description": "When used as a getter, return the value."
						}
					},
					"meta": {
						"files": [
							{
								"path": "code/highcharts.src.js",
								"line": 522
							}
						]
					}
				},
				{
					"doclet": {
						"name": "Highcharts.binsNumberFormulas",
						"description": "A dictionary with formulas for calculating number of bins based on the\nbase series",
						"kind": "member"
					},
					"meta": {
						"files": [
							{
								"path": "code/modules/histogram-bellcurve.src.js",
								"line": 196
							}
						]
					}
				},
				{
					"doclet": {
						"name": "Highcharts.bisect",
						"description": "Finds the root of a given function. The root is the input value needed\nfor a function to return 0.\n\nSee https://en.wikipedia.org/wiki/Bisection_method#Algorithm\n\nTODO: Add unit tests.",
						"kind": "function",
						"parameters": {
							"f": {
								"description": "The function to find the root of.",
								"types": [
									"function"
								]
							},
							"a": {
								"description": "The lowest number in the search range.",
								"types": [
									"number"
								]
							},
							"b": {
								"description": "The highest number in the search range.",
								"types": [
									"number"
								]
							},
							"tolerance": {
								"description": "The allowed difference between the returned value and root.",
								"isOptional": true,
								"types": [
									"number"
								]
							},
							"maxIterations": {
								"description": "The maximum iterations allowed.",
								"isOptional": true,
								"types": [
									"number"
								]
							}
						},
						"return": {
							"types": [
								"number"
							],
							"description": "Root number."
						}
					},
					"meta": {
						"files": [
							{
								"path": "code/modules/venn.src.js",
								"line": 967
							}
						]
					}
				},
				{
					"doclet": {
						"name": "Highcharts.callout",
						"description": "Callout shape used for default tooltips, also used for rounded\nrectangles in VML",
						"kind": "function",
						"return": {
							"types": [
								"void"
							]
						}
					},
					"meta": {
						"files": [
							{
								"path": "code/highcharts.src.js",
								"line": 11675
							}
						]
					}
				},
				{
					"doclet": {
						"name": "Highcharts.chart",
						"description": "Factory function for basic charts.",
						"kind": "function",
						"isStatic": true,
						"parameters": {
							"renderTo": {
								"description": "The DOM element to render to, or its id.",
								"isOptional": true,
								"types": [
									"string",
									"Highcharts.HTMLDOMElement"
								]
							},
							"options": {
								"description": "The chart options structure.",
								"types": [
									"Highcharts.Options"
								]
							},
							"callback": {
								"description": "Function to run when the chart has loaded and and all external images are\nloaded. Defining a\n[chart.events.load](https://api.highcharts.com/highcharts/chart.events.load)\nhandler is equivalent.",
								"isOptional": true,
								"types": [
									"Highcharts.ChartCallbackFunction"
								]
							}
						},
						"return": {
							"types": [
								"Highcharts.Chart"
							],
							"description": "Returns the Chart object."
						}
					},
					"meta": {
						"files": [
							{
								"path": "code/highcharts.src.js",
								"line": 30087
							}
						]
					}
				},
				{
					"doclet": {
						"name": "Highcharts.chartDrawChartBox",
						"description": "If ranges are not specified, determine ranges from rendered bubble series\nand render legend again.",
						"kind": "function",
						"return": {
							"types": [
								"void"
							]
						}
					},
					"meta": {
						"files": [
							{
								"path": "code/highcharts-more.src.js",
								"line": 4073
							},
							{
								"path": "code/modules/map.src.js",
								"line": 5398
							}
						]
					}
				},
				{
					"doclet": {
						"name": "Highcharts.charts",
						"description": "An array containing the current chart objects in the page. A chart's\nposition in the array is preserved throughout the page's lifetime. When\na chart is destroyed, the array item becomes `undefined`.",
						"kind": "member",
						"isStatic": true,
						"types": [
							"Array.<(Highcharts.Chart|undefined)>"
						]
					},
					"meta": {
						"files": [
							{
								"path": "code/highcharts.src.js",
								"line": 101
							}
						]
					}
				},
				{
					"doclet": {
						"name": "Highcharts.clearTimeout",
						"description": "Internal clear timeout. The function checks that the `id` was not removed\n(e.g. by `chart.destroy()`). For the details see\n[issue #7901](https://github.com/highcharts/highcharts/issues/7901).",
						"kind": "function",
						"isStatic": true,
						"parameters": {
							"id": {
								"description": "Id of a timeout.",
								"types": [
									"number"
								]
							}
						},
						"return": {
							"types": [
								"void"
							]
						}
					},
					"meta": {
						"files": [
							{
								"path": "code/highcharts.src.js",
								"line": 606
							}
						]
					}
				},
				{
					"doclet": {
						"name": "Highcharts.color",
						"description": "Creates a color instance out of a color string.",
						"kind": "function",
						"isStatic": true,
						"parameters": {
							"input": {
								"description": "The input color in either rbga or hex format",
								"types": [
									"Highcharts.ColorType"
								]
							}
						},
						"return": {
							"types": [
								"Highcharts.Color"
							],
							"description": "Color instance"
						}
					},
					"meta": {
						"files": [
							{
								"path": "code/highcharts.src.js",
								"line": 3761
							}
						]
					}
				},
				{
					"doclet": {
						"name": "Highcharts.correctFloat",
						"description": "Fix JS round off float errors.",
						"kind": "function",
						"isStatic": true,
						"parameters": {
							"num": {
								"description": "A float number to fix.",
								"types": [
									"number"
								]
							},
							"prec": {
								"description": "The precision.",
								"isOptional": true,
								"types": [
									"number"
								]
							}
						},
						"return": {
							"types": [
								"number"
							],
							"description": "The corrected float number."
						}
					},
					"meta": {
						"files": [
							{
								"path": "code/highcharts.src.js",
								"line": 1045
							}
						]
					}
				},
				{
					"doclet": {
						"name": "Highcharts.createElement",
						"description": "Utility function to create an HTML element with attributes and styles.",
						"kind": "function",
						"isStatic": true,
						"parameters": {
							"tag": {
								"description": "The HTML tag.",
								"types": [
									"string"
								]
							},
							"attribs": {
								"description": "Attributes as an object of key-value pairs.",
								"isOptional": true,
								"types": [
									"Highcharts.HTMLAttributes"
								]
							},
							"styles": {
								"description": "Styles as an object of key-value pairs.",
								"isOptional": true,
								"types": [
									"Highcharts.CSSObject"
								]
							},
							"parent": {
								"description": "The parent HTML object.",
								"isOptional": true,
								"types": [
									"Highcharts.HTMLDOMElement"
								]
							},
							"nopad": {
								"description": "If true, remove all padding, border and margin.",
								"isOptional": true,
								"types": [
									"boolean"
								]
							}
						},
						"return": {
							"types": [
								"Highcharts.HTMLDOMElement"
							],
							"description": "The created DOM element."
						}
					},
					"meta": {
						"files": [
							{
								"path": "code/highcharts.src.js",
								"line": 693
							}
						]
					}
				},
				{
					"doclet": {
						"name": "Highcharts.css",
						"description": "Set CSS on a given element.",
						"kind": "function",
						"isStatic": true,
						"parameters": {
							"el": {
								"description": "An HTML DOM element.",
								"types": [
									"Highcharts.HTMLDOMElement",
									"Highcharts.SVGDOMElement"
								]
							},
							"styles": {
								"description": "Style object with camel case property names.",
								"types": [
									"Highcharts.CSSObject"
								]
							}
						},
						"return": {
							"types": [
								"void"
							]
						}
					},
					"meta": {
						"files": [
							{
								"path": "code/highcharts.src.js",
								"line": 671
							}
						]
					}
				},
				{
					"doclet": {
						"name": "Highcharts.data",
						"description": "Creates a data object to parse data for a chart.",
						"kind": "function",
						"isStatic": true,
						"parameters": {
							"dataOptions": {
								"types": [
									"Highcharts.DataOptions"
								]
							},
							"chartOptions": {
								"isOptional": true,
								"types": [
									"Highcharts.Options"
								]
							},
							"chart": {
								"isOptional": true,
								"types": [
									"Highcharts.Chart"
								]
							}
						},
						"return": {
							"types": [
								"Highcharts.Data"
							]
						}
					},
					"meta": {
						"files": [
							{
								"path": "code/modules/data.src.js",
								"line": 2182
							}
						]
					}
				},
				{
					"doclet": {
						"name": "Highcharts.dateFormat",
						"description": "Formats a JavaScript date timestamp (milliseconds since Jan 1st 1970) into a\nhuman readable date string. The format is a subset of the formats for PHP's\n[strftime](https://www.php.net/manual/en/function.strftime.php) function.\nAdditional formats can be given in the {@link Highcharts.dateFormats} hook.\n\nSince v6.0.5, all internal dates are formatted through the\n{@link Highcharts.Chart#time} instance to respect chart-level time settings.\nThe `Highcharts.dateFormat` function only reflects global time settings set\nwith `setOptions`.\n\nSupported format keys:\n- `%a`: Short weekday, like 'Mon'\n- `%A`: Long weekday, like 'Monday'\n- `%d`: Two digit day of the month, 01 to 31\n- `%e`: Day of the month, 1 through 31\n- `%w`: Day of the week, 0 through 6\n- `%b`: Short month, like 'Jan'\n- `%B`: Long month, like 'January'\n- `%m`: Two digit month number, 01 through 12\n- `%y`: Two digits year, like 09 for 2009\n- `%Y`: Four digits year, like 2009\n- `%H`: Two digits hours in 24h format, 00 through 23\n- `%k`: Hours in 24h format, 0 through 23\n- `%I`: Two digits hours in 12h format, 00 through 11\n- `%l`: Hours in 12h format, 1 through 12\n- `%M`: Two digits minutes, 00 through 59\n- `%p`: Upper case AM or PM\n- `%P`: Lower case AM or PM\n- `%S`: Two digits seconds, 00 through 59\n- `%L`: Milliseconds (naming from Ruby)",
						"kind": "function",
						"isStatic": true,
						"parameters": {
							"format": {
								"description": "The desired format where various time representations are prefixed\n       with `%`.",
								"types": [
									"string"
								]
							},
							"timestamp": {
								"description": "The JavaScript timestamp.",
								"types": [
									"number"
								]
							},
							"capitalize": {
								"description": "Upper case first letter in the return.",
								"isOptional": true,
								"types": [
									"boolean"
								]
							}
						},
						"return": {
							"types": [
								"string"
							],
							"description": "The formatted date."
						}
					},
					"meta": {
						"files": [
							{
								"path": "code/highcharts.src.js",
								"line": 8399
							}
						]
					}
				},
				{
					"doclet": {
						"name": "Highcharts.dateFormats",
						"description": "A hook for defining additional date format specifiers. New\nspecifiers are defined as key-value pairs by using the\nspecifier as key, and a function which takes the timestamp as\nvalue. This function returns the formatted portion of the\ndate.",
						"kind": "member",
						"isStatic": true,
						"types": [
							"Record.<string, Highcharts.TimeFormatCallbackFunction>"
						]
					},
					"meta": {
						"files": [
							{
								"path": "code/highcharts.src.js",
								"line": 110
							}
						]
					}
				},
				{
					"doclet": {
						"name": "Highcharts.defaultOptions",
						"description": "Global default settings.",
						"kind": "member",
						"isStatic": true,
						"types": [
							"Highcharts.Options"
						]
					},
					"meta": {
						"files": [
							{
								"path": "code/highcharts.src.js",
								"line": 4558
							}
						]
					}
				},
				{
					"doclet": {
						"name": "Highcharts.defined",
						"description": "Check if an object is null or undefined.",
						"kind": "function",
						"isStatic": true,
						"parameters": {
							"obj": {
								"description": "The object to check.",
								"types": [
									"*"
								]
							}
						},
						"return": {
							"types": [
								"boolean"
							],
							"description": "False if the object is null or undefined, otherwise true."
						}
					},
					"meta": {
						"files": [
							{
								"path": "code/highcharts.src.js",
								"line": 508
							}
						]
					}
				},
				{
					"doclet": {
						"name": "Highcharts.deprecateFromOptionsMap",
						"description": "If we have a clear root option node for old and new options and a mapping\nbetween, we can use this generic function for the copy and warn logic.",
						"kind": "function",
						"return": {
							"types": [
								"void"
							]
						}
					},
					"meta": {
						"files": [
							{
								"path": "code/modules/accessibility.src.js",
								"line": 9491
							}
						]
					}
				},
				{
					"doclet": {
						"name": "Highcharts.describeSeries",
						"description": "Put accessible info on series and points of a series.",
						"kind": "function",
						"parameters": {
							"series": {
								"description": "The series to add info on.",
								"types": [
									"Highcharts.Series"
								]
							}
						},
						"return": {
							"types": [
								"void"
							]
						}
					},
					"meta": {
						"files": [
							{
								"path": "code/modules/accessibility.src.js",
								"line": 3497
							}
						]
					}
				},
				{
					"doclet": {
						"name": "Highcharts.destroyObjectProperties",
						"description": "Utility method that destroys any SVGElement instances that are properties on\nthe given object. It loops all properties and invokes destroy if there is a\ndestroy method. The property is then delete.",
						"kind": "function",
						"isStatic": true,
						"parameters": {
							"obj": {
								"description": "The object to destroy properties on.",
								"types": [
									"*"
								]
							},
							"except": {
								"description": "Exception, do not destroy this property, only delete it.",
								"isOptional": true,
								"types": [
									"*"
								]
							}
						},
						"return": {
							"types": [
								"void"
							]
						}
					},
					"meta": {
						"files": [
							{
								"path": "code/highcharts.src.js",
								"line": 1001
							}
						]
					}
				},
				{
					"doclet": {
						"name": "Highcharts.discardElement",
						"description": "Discard a HTML element by moving it to the bin and delete.",
						"kind": "function",
						"isStatic": true,
						"parameters": {
							"element": {
								"description": "The HTML node to discard.",
								"types": [
									"Highcharts.HTMLDOMElement"
								]
							}
						},
						"return": {
							"types": [
								"void"
							]
						}
					},
					"meta": {
						"files": [
							{
								"path": "code/highcharts.src.js",
								"line": 1025
							}
						]
					}
				},
				{
					"doclet": {
						"name": "Highcharts.downloadSVGLocal",
						"description": "Get data URL to an image of an SVG and call download on it options\nobject:\n- **filename:** Name of resulting downloaded file without extension.\nDefault is `chart`.\n\n- **type:** File type of resulting download. Default is `image/png`.\n\n- **scale:** Scaling factor of downloaded image compared to source.\nDefault is `1`.\n\n- **libURL:** URL pointing to location of dependency scripts to download\non demand. Default is the exporting.libURL option of the global\nHighcharts options pointing to our server.",
						"kind": "function",
						"isStatic": true,
						"parameters": {
							"svg": {
								"description": "The generated SVG",
								"types": [
									"string"
								]
							},
							"options": {
								"description": "The exporting options",
								"types": [
									"Highcharts.ExportingOptions"
								]
							},
							"failCallback": {
								"description": "The callback function in case of errors",
								"types": [
									"function"
								]
							},
							"successCallback": {
								"description": "The callback function in case of success",
								"isOptional": true,
								"types": [
									"function"
								]
							}
						},
						"return": {
							"types": [
								"void"
							]
						}
					},
					"meta": {
						"files": [
							{
								"path": "code/modules/offline-exporting.src.js",
								"line": 276
							}
						]
					}
				},
				{
					"doclet": {
						"name": "Highcharts.each",
						"description": "Iterate over an array.",
						"kind": "function",
						"isDeprecated": true,
						"isStatic": true,
						"parameters": {
							"arr": {
								"description": "The array to iterate over.",
								"types": [
									"Array.<*>"
								]
							},
							"fn": {
								"description": "The iterator callback. It passes three arguments:\n       - `item`: The array item.\n       - `index`: The item's index in the array.\n       - `arr`: The array that each is being applied to.",
								"types": [
									"function"
								]
							},
							"ctx": {
								"description": "The context.",
								"isOptional": true,
								"types": [
									"*"
								]
							}
						},
						"return": {
							"types": [
								"void"
							]
						}
					},
					"meta": {
						"files": [
							{
								"path": "code/highcharts.src.js",
								"line": 1320
							}
						]
					}
				},
				{
					"doclet": {
						"name": "Highcharts.eachObject",
						"description": "",
						"kind": "function",
						"return": {
							"types": [
								"void"
							]
						}
					},
					"meta": {
						"files": [
							{
								"path": "code/modules/sunburst.src.js",
								"line": 450
							},
							{
								"path": "code/modules/treemap.src.js",
								"line": 450
							}
						]
					}
				},
				{
					"doclet": {
						"name": "Highcharts.erase",
						"description": "Remove the last occurence of an item from an array.",
						"kind": "function",
						"isStatic": true,
						"parameters": {
							"arr": {
								"description": "The array.",
								"types": [
									"Array.<*>"
								]
							},
							"item": {
								"description": "The item to remove.",
								"types": [
									"*"
								]
							}
						},
						"return": {
							"types": [
								"void"
							]
						}
					},
					"meta": {
						"files": [
							{
								"path": "code/highcharts.src.js",
								"line": 486
							}
						]
					}
				},
				{
					"doclet": {
						"name": "Highcharts.error",
						"description": "Provide error messages for debugging, with links to online explanation. This\nfunction can be overridden to provide custom error handling.",
						"kind": "function",
						"isStatic": true,
						"parameters": {
							"code": {
								"description": "The error code. See\n       [errors.xml](https://github.com/highcharts/highcharts/blob/master/errors/errors.xml)\n       for available codes. If it is a string, the error message is printed\n       directly in the console.",
								"types": [
									"number",
									"string"
								]
							},
							"stop": {
								"description": "Whether to throw an error or just log a warning in the console.",
								"isOptional": true,
								"types": [
									"boolean"
								]
							},
							"chart": {
								"description": "Reference to the chart that causes the error. Used in 'debugger'\n       module to display errors directly on the chart.\n       Important note: This argument is undefined for errors that lack\n       access to the Chart instance. In such case, the error will be\n       displayed on the last created chart.",
								"isOptional": true,
								"types": [
									"Highcharts.Chart"
								]
							},
							"params": {
								"description": "Additional parameters for the generated message.",
								"isOptional": true,
								"types": [
									"Highcharts.Dictionary.<string>"
								]
							}
						},
						"return": {
							"types": [
								"void"
							]
						}
					},
					"meta": {
						"files": [
							{
								"path": "code/highcharts.src.js",
								"line": 183
							}
						]
					}
				},
				{
					"doclet": {
						"name": "Highcharts.extend<T>",
						"description": "Utility function to extend an object with the members of another.",
						"kind": "function",
						"isStatic": true,
						"parameters": {
							"a": {
								"description": "The object to be extended.",
								"types": [
									"T",
									"undefined"
								]
							},
							"b": {
								"description": "The object to add to the first one.",
								"types": [
									"Partial.<T>"
								]
							}
						},
						"return": {
							"types": [
								"T"
							],
							"description": "Object a, the original object."
						}
					},
					"meta": {
						"files": [
							{
								"path": "code/highcharts.src.js",
								"line": 624
							}
						]
					}
				},
				{
					"doclet": {
						"name": "Highcharts.extendClass<T>",
						"description": "Extend a prototyped class by new members.",
						"kind": "function",
						"isStatic": true,
						"parameters": {
							"parent": {
								"description": "The parent prototype to inherit.",
								"types": [
									"Highcharts.Class.<T>"
								]
							},
							"members": {
								"description": "A collection of prototype members to add or override compared to the\n       parent prototype.",
								"types": [
									"Highcharts.Dictionary.<*>"
								]
							}
						},
						"return": {
							"types": [
								"Highcharts.Class.<T>"
							],
							"description": "A new prototype."
						}
					},
					"meta": {
						"files": [
							{
								"path": "code/highcharts.src.js",
								"line": 733
							}
						]
					}
				},
				{
					"doclet": {
						"name": "Highcharts.find<T>",
						"description": "Return the value of the first element in the array that satisfies the\nprovided testing function.",
						"kind": "function",
						"isStatic": true,
						"parameters": {
							"arr": {
								"description": "The array to test.",
								"types": [
									"Array.<T>"
								]
							},
							"callback": {
								"description": "The callback function. The function receives the item as the first\n       argument. Return `true` if this item satisfies the condition.",
								"types": [
									"function"
								]
							}
						},
						"return": {
							"types": [
								"T",
								"undefined"
							],
							"description": "The value of the element."
						}
					},
					"meta": {
						"files": [
							{
								"path": "code/highcharts.src.js",
								"line": 1216
							}
						]
					}
				},
				{
					"doclet": {
						"name": "Highcharts.fireEvent<T>",
						"description": "Fire an event that was registered with {@link Highcharts#addEvent}.",
						"kind": "function",
						"isStatic": true,
						"parameters": {
							"el": {
								"description": "The object to fire the event on. It can be a {@link HTMLDOMElement},\n       an {@link SVGElement} or any other object.",
								"types": [
									"T"
								]
							},
							"type": {
								"description": "The type of event.",
								"types": [
									"string"
								]
							},
							"eventArguments": {
								"description": "Custom event arguments that are passed on as an argument to the event\n       handler.",
								"isOptional": true,
								"types": [
									"Highcharts.Dictionary.<*>",
									"Event"
								]
							},
							"defaultFunction": {
								"description": "The default function to execute if the other listeners haven't\n       returned false.",
								"isOptional": true,
								"types": [
									"Highcharts.EventCallbackFunction.<T>",
									"function"
								]
							}
						},
						"return": {
							"types": [
								"void"
							]
						}
					},
					"meta": {
						"files": [
							{
								"path": "code/highcharts.src.js",
								"line": 1574
							}
						]
					}
				},
				{
					"doclet": {
						"name": "Highcharts.format",
						"description": "Format a string according to a subset of the rules of Python's String.format\nmethod.",
						"kind": "function",
						"isStatic": true,
						"parameters": {
							"str": {
								"description": "The string to format.",
								"types": [
									"string"
								]
							},
							"ctx": {
								"description": "The context, a collection of key-value pairs where each key is\n       replaced by its value.",
								"types": [
									"Record.<string, *>"
								]
							},
							"chart": {
								"description": "A `Chart` instance used to get numberFormatter and time.",
								"isOptional": true,
								"types": [
									"Highcharts.Chart"
								]
							}
						},
						"return": {
							"types": [
								"string"
							],
							"description": "The formatted string."
						}
					},
					"meta": {
						"files": [
							{
								"path": "code/highcharts.src.js",
								"line": 8449
							}
						]
					}
				},
				{
					"doclet": {
						"name": "Highcharts.ganttChart",
						"description": "The factory function for creating new gantt charts. Creates a new {@link\nHighcharts.GanttChart|GanttChart} object with different default options\nthan the basic Chart.",
						"kind": "function",
						"isStatic": true,
						"parameters": {
							"renderTo": {
								"description": "The DOM element to render to, or its id.",
								"types": [
									"string",
									"Highcharts.HTMLDOMElement"
								]
							},
							"options": {
								"description": "The chart options structure.",
								"types": [
									"Highcharts.Options"
								]
							},
							"callback": {
								"description": "Function to run when the chart has loaded and and all external\n       images are loaded. Defining a\n       [chart.events.load](https://api.highcharts.com/highcharts/chart.events.load)\n       handler is equivalent.",
								"isOptional": true,
								"types": [
									"Highcharts.ChartCallbackFunction"
								]
							}
						},
						"return": {
							"types": [
								"Highcharts.GanttChart"
							],
							"description": "Returns the Chart object."
						}
					},
					"meta": {
						"files": [
							{
								"path": "code/modules/gantt.src.js",
								"line": 7651
							}
						]
					}
				},
				{
					"doclet": {
						"name": "Highcharts.geojson",
						"description": "Highmaps only. Restructure a GeoJSON object in preparation to be read\ndirectly by the\n{@link https://api.highcharts.com/highmaps/plotOptions.series.mapData|series.mapData}\noption. The GeoJSON will be broken down to fit a specific Highcharts type,\neither `map`, `mapline` or `mappoint`. Meta data in GeoJSON's properties\nobject will be copied directly over to {@link Point.properties} in Highmaps.",
						"kind": "function",
						"isStatic": true,
						"parameters": {
							"geojson": {
								"description": "The GeoJSON structure to parse, represented as a JavaScript object\n       rather than a JSON string.",
								"types": [
									"Highcharts.GeoJSON"
								]
							},
							"hType": {
								"description": "The Highmaps series type to prepare for. Setting \"map\" will return\n       GeoJSON polygons and multipolygons. Setting \"mapline\" will return\n       GeoJSON linestrings and multilinestrings. Setting \"mappoint\" will\n       return GeoJSON points and multipoints.",
								"isOptional": true,
								"types": [
									"string"
								]
							}
						},
						"return": {
							"types": [
								"Array.<*>"
							],
							"description": "An object ready for the `mapData` option."
						}
					},
					"meta": {
						"files": [
							{
								"path": "code/modules/map.src.js",
								"line": 8266
							}
						]
					}
				},
				{
					"doclet": {
						"name": "Highcharts.getAxisDescription",
						"description": "Return string with the axis name/title.",
						"kind": "function",
						"parameters": {
							"axis": {
								"types": [
									"Highcharts.Axis"
								]
							}
						},
						"return": {
							"types": [
								"string"
							]
						}
					},
					"meta": {
						"files": [
							{
								"path": "code/modules/accessibility.src.js",
								"line": 287
							}
						]
					}
				},
				{
					"doclet": {
						"name": "Highcharts.getAxisFromToDescription",
						"description": "Describe an axis from-to range.",
						"kind": "function",
						"parameters": {
							"axis": {
								"types": [
									"Highcharts.Axis"
								]
							}
						},
						"return": {
							"types": [
								"string"
							]
						}
					},
					"meta": {
						"files": [
							{
								"path": "code/modules/accessibility.src.js",
								"line": 369
							}
						]
					}
				},
				{
					"doclet": {
						"name": "Highcharts.getAxisRangeDescription",
						"description": "Return string with text description of the axis range.",
						"kind": "function",
						"parameters": {
							"axis": {
								"description": "The axis to get range desc of.",
								"types": [
									"Highcharts.Axis"
								]
							}
						},
						"return": {
							"types": [
								"string"
							],
							"description": "A string with the range description for the axis."
						}
					},
					"meta": {
						"files": [
							{
								"path": "code/modules/accessibility.src.js",
								"line": 301
							}
						]
					}
				},
				{
					"doclet": {
						"name": "Highcharts.getAxisTimeLengthDesc",
						"description": "Describe the length of the time window shown on an axis.",
						"kind": "function",
						"parameters": {
							"axis": {
								"types": [
									"Highcharts.Axis"
								]
							}
						},
						"return": {
							"types": [
								"string"
							]
						}
					},
					"meta": {
						"files": [
							{
								"path": "code/modules/accessibility.src.js",
								"line": 341
							}
						]
					}
				},
				{
					"doclet": {
						"name": "Highcharts.getCategoryAxisRangeDesc",
						"description": "Describe the range of a category axis.",
						"kind": "function",
						"parameters": {
							"axis": {
								"types": [
									"Highcharts.Axis"
								]
							}
						},
						"return": {
							"types": [
								"string"
							]
						}
					},
					"meta": {
						"files": [
							{
								"path": "code/modules/accessibility.src.js",
								"line": 325
							}
						]
					}
				},
				{
					"doclet": {
						"name": "Highcharts.getChartTitle",
						"description": "",
						"kind": "function",
						"return": {
							"types": [
								"string"
							]
						}
					},
					"meta": {
						"files": [
							{
								"path": "code/modules/accessibility.src.js",
								"line": 278
							}
						]
					}
				},
				{
					"doclet": {
						"name": "Highcharts.getDeferredAnimation",
						"description": "Get the defer as a number value from series animation options.",
						"kind": "function",
						"isStatic": true,
						"parameters": {
							"chart": {
								"description": "The chart instance.",
								"types": [
									"Highcharts.Chart"
								]
							},
							"animation": {
								"description": "An animation setting. Can be an object with duration, complete and\n       easing properties, or a boolean to enable or disable.",
								"types": [
									"boolean",
									"Highcharts.AnimationOptionsObject"
								]
							},
							"series": {
								"description": "Series to defer animation.",
								"isOptional": true,
								"types": [
									"Highcharts.Series"
								]
							}
						},
						"return": {
							"types": [
								"number"
							],
							"description": "The numeric value."
						}
					},
					"meta": {
						"files": [
							{
								"path": "code/highcharts.src.js",
								"line": 7755
							}
						]
					}
				},
				{
					"doclet": {
						"name": "Highcharts.getJSON",
						"description": "Get a JSON resource over XHR, also supporting CORS without preflight.",
						"kind": "function",
						"isStatic": true,
						"parameters": {
							"url": {
								"description": "The URL to load.",
								"types": [
									"string"
								]
							},
							"success": {
								"description": "The success callback. For error handling, use the `Highcharts.ajax`\n       function instead.",
								"types": [
									"function"
								]
							}
						},
						"return": {
							"types": [
								"void"
							]
						}
					},
					"meta": {
						"files": [
							{
								"path": "code/modules/data.src.js",
								"line": 126
							}
						]
					}
				},
				{
					"doclet": {
						"name": "Highcharts.getJSON",
						"description": "Get a JSON resource over XHR, also supporting CORS without preflight.",
						"kind": "function",
						"isStatic": true,
						"parameters": {
							"url": {
								"description": "The URL to load.",
								"types": [
									"string"
								]
							},
							"success": {
								"description": "The success callback. For error handling, use the `Highcharts.ajax`\n       function instead.",
								"types": [
									"function"
								]
							}
						},
						"return": {
							"types": [
								"void"
							]
						}
					},
					"meta": {
						"files": [
							{
								"path": "code/modules/exporting.src.js",
								"line": 1322
							}
						]
					}
				},
				{
					"doclet": {
						"name": "Highcharts.getMagnitude",
						"description": "Get the magnitude of a number.",
						"kind": "function",
						"isStatic": true,
						"parameters": {
							"num": {
								"description": "The number.",
								"types": [
									"number"
								]
							}
						},
						"return": {
							"types": [
								"number"
							],
							"description": "The magnitude, where 1-9 are magnitude 1, 10-99 magnitude 2 etc."
						}
					},
					"meta": {
						"files": [
							{
								"path": "code/highcharts.src.js",
								"line": 834
							}
						]
					}
				},
				{
					"doclet": {
						"name": "Highcharts.getOffset",
						"description": "Wrap the getOffset method to return zero offset for title or labels\nin a radial axis.",
						"kind": "function",
						"return": {
							"types": [
								"void"
							]
						}
					},
					"meta": {
						"files": [
							{
								"path": "code/highcharts-more.src.js",
								"line": 780
							}
						]
					}
				},
				{
					"doclet": {
						"name": "Highcharts.getOptions",
						"description": "Get the updated default options. Until 3.0.7, merely exposing defaultOptions\nfor outside modules wasn't enough because the setOptions method created a new\nobject.",
						"kind": "function",
						"isStatic": true,
						"return": {
							"types": [
								"Highcharts.Options"
							]
						}
					},
					"meta": {
						"files": [
							{
								"path": "code/highcharts.src.js",
								"line": 7041
							}
						]
					}
				},
				{
					"doclet": {
						"name": "Highcharts.getPlotLinePath",
						"description": "Find the path for plot lines perpendicular to the radial axis.",
						"kind": "function",
						"return": {
							"types": [
								"void"
							]
						}
					},
					"meta": {
						"files": [
							{
								"path": "code/highcharts-more.src.js",
								"line": 886
							}
						]
					}
				},
				{
					"doclet": {
						"name": "Highcharts.getRendererType",
						"description": "Gets a registered renderer class. If no renderer type is provided or the\nrequested renderer was not founded, the default renderer is returned.",
						"kind": "function",
						"parameters": {
							"rendererType": {
								"description": "Renderer type or the default renderer.",
								"isOptional": true,
								"types": [
									"string"
								]
							}
						},
						"return": {
							"types": [
								"Highcharts.Class.<Highcharts.SVGRenderer>"
							],
							"description": "Returns the requested renderer class or the default renderer class."
						}
					},
					"meta": {
						"files": [
							{
								"path": "code/highcharts.src.js",
								"line": 11137
							}
						]
					}
				},
				{
					"doclet": {
						"name": "Highcharts.getStyle",
						"description": "Get the computed CSS value for given element and property, only for numerical\nproperties. For width and height, the dimension of the inner box (excluding\npadding) is returned. Used for fitting the chart within the container.",
						"kind": "function",
						"isStatic": true,
						"parameters": {
							"el": {
								"description": "An HTML element.",
								"types": [
									"Highcharts.HTMLDOMElement"
								]
							},
							"prop": {
								"description": "The property name.",
								"types": [
									"string"
								]
							},
							"toInt": {
								"description": "Parse to integer.",
								"isOptional": true,
								"types": [
									"boolean"
								]
							}
						},
						"return": {
							"types": [
								"number",
								"string",
								"undefined"
							],
							"description": "The style value."
						}
					},
					"meta": {
						"files": [
							{
								"path": "code/highcharts.src.js",
								"line": 1129
							}
						]
					}
				},
				{
					"doclet": {
						"name": "Highcharts.getTitlePosition",
						"description": "Find the position for the axis title, by default inside the gauge.",
						"kind": "function",
						"return": {
							"types": [
								"void"
							]
						}
					},
					"meta": {
						"files": [
							{
								"path": "code/highcharts-more.src.js",
								"line": 1019
							}
						]
					}
				},
				{
					"doclet": {
						"name": "Highcharts.grep",
						"description": "Filter an array by a callback.",
						"kind": "function",
						"isDeprecated": true,
						"isStatic": true,
						"parameters": {
							"arr": {
								"description": "The array to filter.",
								"types": [
									"Array.<*>"
								]
							},
							"callback": {
								"description": "The callback function. The function receives the item as the first\n       argument. Return `true` if the item is to be preserved.",
								"types": [
									"function"
								]
							}
						},
						"return": {
							"types": [
								"Array.<*>"
							],
							"description": "A new, filtered array."
						}
					},
					"meta": {
						"files": [
							{
								"path": "code/highcharts.src.js",
								"line": 1340
							}
						]
					}
				},
				{
					"doclet": {
						"name": "Highcharts.i18nFormat",
						"description": "i18n formatting function. Extends Highcharts.format() functionality by also\nhandling arrays and plural conditionals. Arrays can be indexed as follows:\n\n- Format: 'This is the first index: {myArray[0]}. The last: {myArray[-1]}.'\n\n- Context: { myArray: [0, 1, 2, 3, 4, 5] }\n\n- Result: 'This is the first index: 0. The last: 5.'\n\n\nThey can also be iterated using the #each() function. This will repeat the\ncontents of the bracket expression for each element. Example:\n\n- Format: 'List contains: {#each(myArray)cm }'\n\n- Context: { myArray: [0, 1, 2] }\n\n- Result: 'List contains: 0cm 1cm 2cm '\n\n\nThe #each() function optionally takes a length parameter. If positive, this\nparameter specifies the max number of elements to iterate through. If\nnegative, the function will subtract the number from the length of the array.\nUse this to stop iterating before the array ends. Example:\n\n- Format: 'List contains: {#each(myArray, -1) }and {myArray[-1]}.'\n\n- Context: { myArray: [0, 1, 2, 3] }\n\n- Result: 'List contains: 0, 1, 2, and 3.'\n\n\nUse the #plural() function to pick a string depending on whether or not a\ncontext object is 1. Arguments are #plural(obj, plural, singular). Example:\n\n- Format: 'Has {numPoints} {#plural(numPoints, points, point}.'\n\n- Context: { numPoints: 5 }\n\n- Result: 'Has 5 points.'\n\n\nOptionally there are additional parameters for dual and none: #plural(obj,\nplural, singular, dual, none). Example:\n\n- Format: 'Has {#plural(numPoints, many points, one point, two points,\n none}.'\n\n- Context: { numPoints: 2 }\n\n- Result: 'Has two points.'\n\n\nThe dual or none parameters will take precedence if they are supplied.",
						"kind": "function",
						"isStatic": true,
						"parameters": {
							"formatString": {
								"description": "The string to format.",
								"types": [
									"string"
								]
							},
							"context": {
								"description": "Context to apply to the format string.",
								"types": [
									"Highcharts.Dictionary.<*>"
								]
							},
							"chart": {
								"description": "A `Chart` instance with a time object and numberFormatter, passed on\n       to format().",
								"types": [
									"Highcharts.Chart"
								]
							}
						},
						"return": {
							"types": [
								"string"
							],
							"description": "The formatted string."
						}
					},
					"meta": {
						"files": [
							{
								"path": "code/modules/accessibility.src.js",
								"line": 9758
							}
						]
					}
				},
				{
					"doclet": {
						"name": "Highcharts.inArray",
						"description": "Search for an item in an array.",
						"kind": "function",
						"isDeprecated": true,
						"isStatic": true,
						"parameters": {
							"item": {
								"description": "The item to search for.",
								"types": [
									"*"
								]
							},
							"arr": {
								"description": "The array or node collection to search in.",
								"types": [
									"Array.<*>"
								]
							},
							"fromIndex": {
								"description": "The index to start searching from.",
								"isOptional": true,
								"types": [
									"number"
								]
							}
						},
						"return": {
							"types": [
								"number"
							],
							"description": "The index within the array, or -1 if not found."
						}
					},
					"meta": {
						"files": [
							{
								"path": "code/highcharts.src.js",
								"line": 1193
							}
						]
					}
				},
				{
					"doclet": {
						"name": "Highcharts.initCanvasBoost",
						"description": "Initialize the canvas boost.",
						"kind": "function",
						"isStatic": true,
						"return": {
							"types": [
								"void"
							]
						}
					},
					"meta": {
						"files": [
							{
								"path": "code/modules/boost.src.js",
								"line": 2705
							},
							{
								"path": "code/modules/boost-canvas.src.js",
								"line": 61
							}
						]
					}
				},
				{
					"doclet": {
						"name": "Highcharts.isArray",
						"description": "Utility function to check if an item is an array.",
						"kind": "function",
						"isStatic": true,
						"parameters": {
							"obj": {
								"description": "The item to check.",
								"types": [
									"*"
								]
							}
						},
						"return": {
							"types": [
								"boolean"
							],
							"description": "True if the argument is an array."
						}
					},
					"meta": {
						"files": [
							{
								"path": "code/highcharts.src.js",
								"line": 406
							}
						]
					}
				},
				{
					"doclet": {
						"name": "Highcharts.isBoolean",
						"description": "",
						"kind": "function",
						"return": {
							"types": [
								"void"
							]
						}
					},
					"meta": {
						"files": [
							{
								"path": "code/modules/sunburst.src.js",
								"line": 443
							},
							{
								"path": "code/modules/treemap.src.js",
								"line": 443
							}
						]
					}
				},
				{
					"doclet": {
						"name": "Highcharts.isClass",
						"description": "Utility function to check if an Object is a class.",
						"kind": "function",
						"isStatic": true,
						"parameters": {
							"obj": {
								"description": "The item to check.",
								"types": [
									"object",
									"undefined"
								]
							}
						},
						"return": {
							"types": [
								"boolean"
							],
							"description": "True if the argument is a class."
						}
					},
					"meta": {
						"files": [
							{
								"path": "code/highcharts.src.js",
								"line": 454
							}
						]
					}
				},
				{
					"doclet": {
						"name": "Highcharts.isDOMElement",
						"description": "Utility function to check if an Object is a HTML Element.",
						"kind": "function",
						"isStatic": true,
						"parameters": {
							"obj": {
								"description": "The item to check.",
								"types": [
									"*"
								]
							}
						},
						"return": {
							"types": [
								"boolean"
							],
							"description": "True if the argument is a HTML Element."
						}
					},
					"meta": {
						"files": [
							{
								"path": "code/highcharts.src.js",
								"line": 440
							}
						]
					}
				},
				{
					"doclet": {
						"name": "Highcharts.isNumber",
						"description": "Utility function to check if an item is a number and it is finite (not NaN,\nInfinity or -Infinity).",
						"kind": "function",
						"isStatic": true,
						"parameters": {
							"n": {
								"description": "The item to check.",
								"types": [
									"*"
								]
							}
						},
						"return": {
							"types": [
								"boolean"
							],
							"description": "True if the item is a finite number"
						}
					},
					"meta": {
						"files": [
							{
								"path": "code/highcharts.src.js",
								"line": 471
							}
						]
					}
				},
				{
					"doclet": {
						"name": "Highcharts.isObject",
						"description": "Utility function to check if an item is of type object.",
						"kind": "function",
						"isStatic": true,
						"parameters": {
							"obj": {
								"description": "The item to check.",
								"types": [
									"*"
								]
							},
							"strict": {
								"description": "Also checks that the object is not an array.",
								"isOptional": true,
								"types": [
									"boolean"
								]
							}
						},
						"return": {
							"types": [
								"boolean"
							],
							"description": "True if the argument is an object."
						}
					},
					"meta": {
						"files": [
							{
								"path": "code/highcharts.src.js",
								"line": 421
							}
						]
					}
				},
				{
					"doclet": {
						"name": "Highcharts.isString",
						"description": "Utility function to check for string type.",
						"kind": "function",
						"isStatic": true,
						"parameters": {
							"s": {
								"description": "The item to check.",
								"types": [
									"*"
								]
							}
						},
						"return": {
							"types": [
								"boolean"
							],
							"description": "True if the argument is a string."
						}
					},
					"meta": {
						"files": [
							{
								"path": "code/highcharts.src.js",
								"line": 392
							}
						]
					}
				},
				{
					"doclet": {
						"name": "Highcharts.keys",
						"description": "Returns an array of a given object's own properties.",
						"kind": "function",
						"isDeprecated": true,
						"isStatic": true,
						"parameters": {
							"obj": {
								"description": "The object of which the properties are to be returned.",
								"types": [
									"*"
								]
							}
						},
						"return": {
							"types": [
								"Array.<string>"
							],
							"description": "An array of strings that represents all the properties."
						}
					},
					"meta": {
						"files": [
							{
								"path": "code/highcharts.src.js",
								"line": 1247
							}
						]
					}
				},
				{
					"doclet": {
						"name": "Highcharts.map",
						"description": "Map an array by a callback.",
						"kind": "function",
						"isDeprecated": true,
						"isStatic": true,
						"parameters": {
							"arr": {
								"description": "The array to map.",
								"types": [
									"Array.<*>"
								]
							},
							"fn": {
								"description": "The callback function. Return the new value for the new array.",
								"types": [
									"function"
								]
							}
						},
						"return": {
							"types": [
								"Array.<*>"
							],
							"description": "A new array item with modified items."
						}
					},
					"meta": {
						"files": [
							{
								"path": "code/highcharts.src.js",
								"line": 1356
							}
						]
					}
				},
				{
					"doclet": {
						"name": "Highcharts.mapChart",
						"description": "The factory function for creating new map charts. Creates a new {@link\nHighcharts.MapChart|MapChart} object with different default options than\nthe basic Chart.",
						"kind": "function",
						"isStatic": true,
						"parameters": {
							"renderTo": {
								"description": "The DOM element to render to, or its id.",
								"isOptional": true,
								"types": [
									"string",
									"Highcharts.HTMLDOMElement"
								]
							},
							"options": {
								"description": "The chart options structure as described in the\n[options reference](https://api.highcharts.com/highstock).",
								"types": [
									"Highcharts.Options"
								]
							},
							"callback": {
								"description": "A function to execute when the chart object is finished loading and\nrendering. In most cases the chart is built in one thread, but in\nInternet Explorer version 8 or less the chart is sometimes initialized\nbefore the document is ready, and in these cases the chart object will\nnot be finished synchronously. As a consequence, code that relies on the\nnewly built Chart object should always run in the callback. Defining a\n[chart.events.load](https://api.highcharts.com/highstock/chart.events.load)\nhandler is equivalent.",
								"isOptional": true,
								"types": [
									"Highcharts.ChartCallbackFunction"
								]
							}
						},
						"return": {
							"types": [
								"Highcharts.MapChart"
							],
							"description": "The chart object."
						}
					},
					"meta": {
						"files": [
							{
								"path": "code/modules/map.src.js",
								"line": 2616
							}
						]
					}
				},
				{
					"doclet": {
						"name": "Highcharts.maps",
						"description": "Contains all loaded map data for Highmaps.",
						"kind": "member",
						"isStatic": true,
						"types": [
							"Record.<string, *>"
						]
					},
					"meta": {
						"files": [
							{
								"path": "code/modules/map.src.js",
								"line": 2607
							}
						]
					}
				},
				{
					"doclet": {
						"name": "Highcharts.merge<T>",
						"description": "Utility function to deep merge two or more objects and return a third object.\nIf the first argument is true, the contents of the second object is copied\ninto the first object. The merge function can also be used with a single\nobject argument to create a deep copy of an object.",
						"kind": "function",
						"isStatic": true,
						"parameters": {
							"extend": {
								"description": "Whether to extend the left-side object (a) or return a whole new\n       object.",
								"types": [
									"boolean"
								]
							},
							"a": {
								"description": "The first object to extend. When only this is given, the function\n       returns a deep copy.",
								"types": [
									"T",
									"undefined"
								]
							},
							"n": {
								"description": "An object to merge into the previous one.",
								"isOptional": true,
								"types": [
									"Array.<(object|undefined)>"
								],
								"isVariable": true
							}
						},
						"return": {
							"types": [
								"T"
							],
							"description": "The merged object. If the first argument is true, the return is the\n        same as the second argument."
						}
					},
					"meta": {
						"files": [
							{
								"path": "code/highcharts.src.js",
								"line": 253
							}
						]
					}
				},
				{
					"doclet": {
						"name": "Highcharts.merge<T>",
						"description": "Utility function to deep merge two or more objects and return a third object.\nThe merge function can also be used with a single object argument to create a\ndeep copy of an object.",
						"kind": "function",
						"isStatic": true,
						"parameters": {
							"a": {
								"description": "The first object to extend. When only this is given, the function\n       returns a deep copy.",
								"types": [
									"T",
									"undefined"
								]
							},
							"n": {
								"description": "An object to merge into the previous one.",
								"isOptional": true,
								"types": [
									"Array.<(object|undefined)>"
								],
								"isVariable": true
							}
						},
						"return": {
							"types": [
								"T"
							],
							"description": "The merged object. If the first argument is true, the return is the\n        same as the second argument."
						}
					},
					"meta": {
						"files": [
							{
								"path": "code/highcharts.src.js",
								"line": 275
							}
						]
					}
				},
				{
					"doclet": {
						"name": "Highcharts.normalizeTickInterval",
						"description": "Take an interval and normalize it to multiples of round numbers.",
						"kind": "function",
						"isDeprecated": true,
						"isStatic": true,
						"parameters": {
							"interval": {
								"description": "The raw, un-rounded interval.",
								"types": [
									"number"
								]
							},
							"multiples": {
								"description": "Allowed multiples.",
								"isOptional": true,
								"types": [
									"Array.<*>"
								]
							},
							"magnitude": {
								"description": "The magnitude of the number.",
								"isOptional": true,
								"types": [
									"number"
								]
							},
							"allowDecimals": {
								"description": "Whether to allow decimals.",
								"isOptional": true,
								"types": [
									"boolean"
								]
							},
							"hasTickAmount": {
								"description": "If it has tickAmount, avoid landing on tick intervals lower than\n       original.",
								"isOptional": true,
								"types": [
									"boolean"
								]
							}
						},
						"return": {
							"types": [
								"number"
							],
							"description": "The normalized interval."
						}
					},
					"meta": {
						"files": [
							{
								"path": "code/highcharts.src.js",
								"line": 848
							}
						]
					}
				},
				{
					"doclet": {
						"name": "Highcharts.numberFormat",
						"description": "Format a number and return a string based on input settings.",
						"kind": "function",
						"isStatic": true,
						"parameters": {
							"number": {
								"description": "The input number to format.",
								"types": [
									"number"
								]
							},
							"decimals": {
								"description": "The amount of decimals. A value of -1 preserves the amount in the\n       input number.",
								"types": [
									"number"
								]
							},
							"decimalPoint": {
								"description": "The decimal point, defaults to the one given in the lang options, or\n       a dot.",
								"isOptional": true,
								"types": [
									"string"
								]
							},
							"thousandsSep": {
								"description": "The thousands separator, defaults to the one given in the lang\n       options, or a space character.",
								"isOptional": true,
								"types": [
									"string"
								]
							}
						},
						"return": {
							"types": [
								"string"
							],
							"description": "The formatted number."
						}
					},
					"meta": {
						"files": [
							{
								"path": "code/highcharts.src.js",
								"line": 8523
							}
						]
					}
				},
				{
					"doclet": {
						"name": "Highcharts.objectEach<T>",
						"description": "Iterate over object key pairs in an object.",
						"kind": "function",
						"isStatic": true,
						"parameters": {
							"obj": {
								"description": "The object to iterate over.",
								"types": [
									"*"
								]
							},
							"fn": {
								"description": "The iterator callback. It passes three arguments:\n       * value - The property value.\n       * key - The property key.\n       * obj - The object that objectEach is being applied to.",
								"types": [
									"Highcharts.ObjectEachCallbackFunction.<T>"
								]
							},
							"ctx": {
								"description": "The context.",
								"isOptional": true,
								"types": [
									"T"
								]
							}
						},
						"return": {
							"types": [
								"void"
							]
						}
					},
					"meta": {
						"files": [
							{
								"path": "code/highcharts.src.js",
								"line": 1293
							}
						]
					}
				},
				{
					"doclet": {
						"name": "Highcharts.offset",
						"description": "Get the element's offset position, corrected for `overflow: auto`.",
						"kind": "function",
						"isStatic": true,
						"parameters": {
							"el": {
								"description": "The DOM element.",
								"types": [
									"global.Element"
								]
							}
						},
						"return": {
							"types": [
								"Highcharts.OffsetObject"
							],
							"description": "An object containing `left` and `top` properties for the position in\n        the page."
						}
					},
					"meta": {
						"files": [
							{
								"path": "code/highcharts.src.js",
								"line": 1263
							}
						]
					}
				},
				{
					"doclet": {
						"name": "Highcharts.onAxisAfterInit",
						"description": "Finalize modification of axis instance with radial logic.",
						"kind": "function",
						"return": {
							"types": [
								"void"
							]
						}
					},
					"meta": {
						"files": [
							{
								"path": "code/highcharts-more.src.js",
								"line": 1078
							}
						]
					}
				},
				{
					"doclet": {
						"name": "Highcharts.onAxisAutoLabelAlign",
						"description": "Wrap auto label align to avoid setting axis-wide rotation on radial axes.\n(#4920)",
						"kind": "function",
						"return": {
							"types": [
								"void"
							]
						}
					},
					"meta": {
						"files": [
							{
								"path": "code/highcharts-more.src.js",
								"line": 1101
							}
						]
					}
				},
				{
					"doclet": {
						"name": "Highcharts.onAxisDestroy",
						"description": "Remove label collector function on axis remove/update.",
						"kind": "function",
						"return": {
							"types": [
								"void"
							]
						}
					},
					"meta": {
						"files": [
							{
								"path": "code/highcharts-more.src.js",
								"line": 1110
							}
						]
					}
				},
				{
					"doclet": {
						"name": "Highcharts.onAxisInit",
						"description": "Modify axis instance with radial logic before common axis init.",
						"kind": "function",
						"return": {
							"types": [
								"void"
							]
						}
					},
					"meta": {
						"files": [
							{
								"path": "code/highcharts-more.src.js",
								"line": 1124
							}
						]
					}
				},
				{
					"doclet": {
						"name": "Highcharts.onAxisInitialAxisTranslation",
						"description": "Prepare axis translation.",
						"kind": "function",
						"return": {
							"types": [
								"void"
							]
						}
					},
					"meta": {
						"files": [
							{
								"path": "code/highcharts-more.src.js",
								"line": 1193
							}
						]
					}
				},
				{
					"doclet": {
						"name": "Highcharts.onLegendAfterGetAllItems",
						"description": "Start the bubble legend creation process.",
						"kind": "function",
						"return": {
							"types": [
								"void"
							]
						}
					},
					"meta": {
						"files": [
							{
								"path": "code/highcharts-more.src.js",
								"line": 4230
							}
						]
					}
				},
				{
					"doclet": {
						"name": "Highcharts.onSeriesLegendItemClick",
						"description": "Toggle bubble legend depending on the visible status of bubble series.",
						"kind": "function",
						"return": {
							"types": [
								"void"
							]
						}
					},
					"meta": {
						"files": [
							{
								"path": "code/highcharts-more.src.js",
								"line": 4258
							},
							{
								"path": "code/modules/map.src.js",
								"line": 5583
							}
						]
					}
				},
				{
					"doclet": {
						"name": "Highcharts.onTickAfterGetLabelPosition",
						"description": "Find the center position of the label based on the distance option.",
						"kind": "function",
						"return": {
							"types": [
								"void"
							]
						}
					},
					"meta": {
						"files": [
							{
								"path": "code/highcharts-more.src.js",
								"line": 1201
							}
						]
					}
				},
				{
					"doclet": {
						"name": "Highcharts.onTickAfterGetPosition",
						"description": "Add special cases within the Tick class' methods for radial axes.",
						"kind": "function",
						"return": {
							"types": [
								"void"
							]
						}
					},
					"meta": {
						"files": [
							{
								"path": "code/highcharts-more.src.js",
								"line": 1329
							}
						]
					}
				},
				{
					"doclet": {
						"name": "Highcharts.pad",
						"description": "Left-pad a string to a given length by adding a character repetetively.",
						"kind": "function",
						"isStatic": true,
						"parameters": {
							"number": {
								"description": "The input string or number.",
								"types": [
									"number"
								]
							},
							"length": {
								"description": "The desired string length.",
								"isOptional": true,
								"types": [
									"number"
								]
							},
							"padder": {
								"description": "The character to pad with.",
								"isOptional": true,
								"types": [
									"string"
								]
							}
						},
						"return": {
							"types": [
								"string"
							],
							"description": "The padded string."
						}
					},
					"meta": {
						"files": [
							{
								"path": "code/highcharts.src.js",
								"line": 754
							}
						]
					}
				},
				{
					"doclet": {
						"name": "Highcharts.pick<T>",
						"description": "Return the first value that is not null or undefined.",
						"kind": "function",
						"isStatic": true,
						"parameters": {
							"items": {
								"description": "Variable number of arguments to inspect.",
								"types": [
									"Array.<(T|null|undefined)>"
								],
								"isVariable": true
							}
						},
						"return": {
							"types": [
								"T"
							],
							"description": "The value of the first argument that is not null or undefined."
						}
					},
					"meta": {
						"files": [
							{
								"path": "code/highcharts.src.js",
								"line": 650
							}
						]
					}
				},
				{
					"doclet": {
						"name": "Highcharts.recursive",
						"description": "",
						"kind": "function",
						"return": {
							"types": [
								"void"
							]
						}
					},
					"meta": {
						"files": [
							{
								"path": "code/modules/sunburst.src.js",
								"line": 461
							},
							{
								"path": "code/modules/treemap.src.js",
								"line": 461
							}
						]
					}
				},
				{
					"doclet": {
						"name": "Highcharts.reduce",
						"description": "Reduce an array to a single value.",
						"kind": "function",
						"isDeprecated": true,
						"isStatic": true,
						"parameters": {
							"arr": {
								"description": "The array to reduce.",
								"types": [
									"Array.<*>"
								]
							},
							"fn": {
								"description": "The callback function. Return the reduced value. Receives 4\n       arguments: Accumulated/reduced value, current value, current array\n       index, and the array.",
								"types": [
									"function"
								]
							},
							"initialValue": {
								"description": "The initial value of the accumulator.",
								"types": [
									"*"
								]
							}
						},
						"return": {
							"types": [
								"*"
							],
							"description": "The reduced value."
						}
					},
					"meta": {
						"files": [
							{
								"path": "code/highcharts.src.js",
								"line": 1371
							}
						]
					}
				},
				{
					"doclet": {
						"name": "Highcharts.registerRendererType",
						"description": "Register a renderer class.",
						"kind": "function",
						"parameters": {
							"rendererType": {
								"description": "Renderer type to register.",
								"types": [
									"string"
								]
							},
							"rendererClass": {
								"description": "Returns the requested renderer class or the default renderer class.",
								"types": [
									"Highcharts.Class.<Highcharts.SVGRenderer>"
								]
							},
							"setAsDefault": {
								"description": "Sets the renderer class as the default renderer.",
								"types": [
									"boolean"
								]
							}
						},
						"return": {
							"types": [
								"void"
							]
						}
					},
					"meta": {
						"files": [
							{
								"path": "code/highcharts.src.js",
								"line": 11154
							}
						]
					}
				},
				{
					"doclet": {
						"name": "Highcharts.relativeLength",
						"description": "Return a length based on either the integer value, or a percentage of a base.",
						"kind": "function",
						"isStatic": true,
						"parameters": {
							"value": {
								"description": "A percentage string or a number.",
								"types": [
									"Highcharts.RelativeSize"
								]
							},
							"base": {
								"description": "The full length that represents 100%.",
								"types": [
									"number"
								]
							},
							"offset": {
								"description": "A pixel offset to apply for percentage values. Used internally in\n       axis positioning.",
								"isOptional": true,
								"types": [
									"number"
								]
							}
						},
						"return": {
							"types": [
								"number"
							],
							"description": "The computed length."
						}
					},
					"meta": {
						"files": [
							{
								"path": "code/highcharts.src.js",
								"line": 778
							}
						]
					}
				},
				{
					"doclet": {
						"name": "Highcharts.removeEvent<T>",
						"description": "Remove an event that was added with {@link Highcharts#addEvent}.",
						"kind": "function",
						"isStatic": true,
						"parameters": {
							"el": {
								"description": "The element to remove events on.",
								"types": [
									"Highcharts.Class.<T>",
									"T"
								]
							},
							"type": {
								"description": "The type of events to remove. If undefined, all events are removed\n       from the element.",
								"isOptional": true,
								"types": [
									"string"
								]
							},
							"fn": {
								"description": "The specific callback to remove. If undefined, all events that match\n       the element and optionally the type are removed.",
								"isOptional": true,
								"types": [
									"Highcharts.EventCallbackFunction.<T>"
								]
							}
						},
						"return": {
							"types": [
								"void"
							]
						}
					},
					"meta": {
						"files": [
							{
								"path": "code/highcharts.src.js",
								"line": 1492
							}
						]
					}
				},
				{
					"doclet": {
						"name": "Highcharts.renderHidden",
						"description": "Prevent setting Y axis dirty.",
						"kind": "function",
						"return": {
							"types": [
								"void"
							]
						}
					},
					"meta": {
						"files": [
							{
								"path": "code/highcharts-more.src.js",
								"line": 1360
							}
						]
					}
				},
				{
					"doclet": {
						"name": "Highcharts.seriesType",
						"description": "Old factory to create new series prototypes.",
						"kind": "function",
						"isDeprecated": true,
						"isStatic": true,
						"parameters": {
							"type": {
								"description": "The series type name.",
								"types": [
									"string"
								]
							},
							"parent": {
								"description": "The parent series type name. Use `line` to inherit from the basic\n{@link Series} object.",
								"types": [
									"string"
								]
							},
							"options": {
								"description": "The additional default options that are merged with the parent's options.",
								"types": [
									"Highcharts.SeriesOptionsType",
									"Highcharts.Dictionary.<*>"
								]
							},
							"props": {
								"description": "The properties (functions and primitives) to set on the new prototype.",
								"isOptional": true,
								"types": [
									"Highcharts.Dictionary.<*>"
								]
							},
							"pointProps": {
								"description": "Members for a series-specific extension of the {@link Point} prototype if\nneeded.",
								"isOptional": true,
								"types": [
									"Highcharts.Dictionary.<*>"
								]
							}
						},
						"return": {
							"types": [
								"Highcharts.Series"
							],
							"description": "The newly created prototype as extended from {@link Series} or its\nderivatives."
						}
					},
					"meta": {
						"files": [
							{
								"path": "code/highcharts.src.js",
								"line": 29911
							}
						]
					}
				},
				{
					"doclet": {
						"name": "Highcharts.setAnimation",
						"description": "Set the global animation to either a given value, or fall back to the given\nchart's animation option.",
						"kind": "function",
						"isStatic": true,
						"parameters": {
							"animation": {
								"description": "The animation object.",
								"types": [
									"boolean",
									"Partial.<Highcharts.AnimationOptionsObject>",
									"undefined"
								]
							},
							"chart": {
								"description": "The chart instance.",
								"types": [
									"Highcharts.Chart"
								]
							}
						},
						"return": {
							"types": [
								"void"
							]
						}
					},
					"meta": {
						"files": [
							{
								"path": "code/highcharts.src.js",
								"line": 7718
							}
						]
					}
				},
				{
					"doclet": {
						"name": "Highcharts.setOptions",
						"description": "Merge the default options with custom options and return the new options\nstructure. Commonly used for defining reusable templates.",
						"kind": "function",
						"isStatic": true,
						"parameters": {
							"options": {
								"description": "The new custom chart options.",
								"types": [
									"Highcharts.Options"
								]
							}
						},
						"return": {
							"types": [
								"void"
							]
						}
					},
					"meta": {
						"files": [
							{
								"path": "code/highcharts.src.js",
								"line": 7053
							},
							{
								"path": "code/highcharts-more.src.js",
								"line": 1434
							}
						]
					}
				},
				{
					"doclet": {
						"name": "Highcharts.some",
						"description": "Test whether at least one element in the array passes the test implemented by\nthe provided function.",
						"kind": "function",
						"isDeprecated": true,
						"isStatic": true,
						"parameters": {
							"arr": {
								"description": "The array to test",
								"types": [
									"Array.<*>"
								]
							},
							"fn": {
								"description": "The function to run on each item. Return truty to pass the test.\n       Receives arguments `currentValue`, `index` and `array`.",
								"types": [
									"function"
								]
							},
							"ctx": {
								"description": "The context.",
								"types": [
									"*"
								]
							}
						},
						"return": {
							"types": [
								"boolean"
							]
						}
					},
					"meta": {
						"files": [
							{
								"path": "code/highcharts.src.js",
								"line": 1391
							}
						]
					}
				},
				{
					"doclet": {
						"name": "Highcharts.sonification",
						"description": "Global classes and objects related to sonification.",
						"kind": "member",
						"isStatic": true,
						"types": [
							"Highcharts.SonificationObject"
						]
					},
					"meta": {
						"files": [
							{
								"path": "code/modules/sonification.src.js",
								"line": 3270
							}
						]
					}
				},
				{
					"doclet": {
						"name": "Highcharts.splat",
						"description": "Check if an element is an array, and if not, make it into an array.",
						"kind": "function",
						"isStatic": true,
						"parameters": {
							"obj": {
								"description": "The object to splat.",
								"types": [
									"*"
								]
							}
						},
						"return": {
							"types": [
								"Array"
							],
							"description": "The produced or original array."
						}
					},
					"meta": {
						"files": [
							{
								"path": "code/highcharts.src.js",
								"line": 566
							}
						]
					}
				},
				{
					"doclet": {
						"name": "Highcharts.splitPath",
						"description": "Utility for reading SVG paths directly.",
						"kind": "function",
						"isStatic": true,
						"parameters": {
							"path": {
								"types": [
									"string",
									"Array.<(string|number)>"
								]
							}
						},
						"return": {
							"types": [
								"Highcharts.SVGPathArray"
							]
						}
					},
					"meta": {
						"files": [
							{
								"path": "code/modules/map.src.js",
								"line": 2649
							}
						]
					}
				},
				{
					"doclet": {
						"name": "Highcharts.stableSort",
						"description": "Sort an object array and keep the order of equal items. The ECMAScript\nstandard does not specify the behaviour when items are equal.",
						"kind": "function",
						"isStatic": true,
						"parameters": {
							"arr": {
								"description": "The array to sort.",
								"types": [
									"Array.<*>"
								]
							},
							"sortFunction": {
								"description": "The function to sort it with, like with regular Array.prototype.sort.",
								"types": [
									"function"
								]
							}
						},
						"return": {
							"types": [
								"void"
							]
						}
					},
					"meta": {
						"files": [
							{
								"path": "code/highcharts.src.js",
								"line": 921
							}
						]
					}
				},
				{
					"doclet": {
						"name": "Highcharts.stockChart",
						"description": "Factory function for creating new stock charts. Creates a new\n{@link Highcharts.StockChart|StockChart} object with different default\noptions than the basic Chart.",
						"kind": "function",
						"isStatic": true,
						"parameters": {
							"renderTo": {
								"description": "The DOM element to render to, or its id.",
								"isOptional": true,
								"types": [
									"string",
									"Highcharts.HTMLDOMElement"
								]
							},
							"options": {
								"description": "The chart options structure as described in the\n       [options reference](https://api.highcharts.com/highstock).",
								"types": [
									"Highcharts.Options"
								]
							},
							"callback": {
								"description": "A function to execute when the chart object is finished loading\n       and rendering. In most cases the chart is built in one thread,\n       but in Internet Explorer version 8 or less the chart is sometimes\n       initialized before the document is ready, and in these cases the\n       chart object will not be finished synchronously. As a\n       consequence, code that relies on the newly built Chart object\n       should always run in the callback. Defining a\n       [chart.events.load](https://api.highcharts.com/highstock/chart.events.load)\n       handler is equivalent.",
								"isOptional": true,
								"types": [
									"Highcharts.ChartCallbackFunction"
								]
							}
						},
						"return": {
							"types": [
								"Highcharts.StockChart"
							],
							"description": "The chart object."
						}
					},
					"meta": {
						"files": [
							{
								"path": "code/modules/stock.src.js",
								"line": 10826
							}
						]
					}
				},
				{
					"doclet": {
						"name": "Highcharts.stop",
						"description": "Stop running animation.",
						"kind": "function",
						"isStatic": true,
						"parameters": {
							"el": {
								"description": "The SVGElement to stop animation on.",
								"types": [
									"Highcharts.SVGElement"
								]
							},
							"prop": {
								"description": "The property to stop animating. If given, the stop method will stop a\n       single property from animating, while others continue.",
								"isOptional": true,
								"types": [
									"string"
								]
							}
						},
						"return": {
							"types": [
								"void"
							]
						}
					},
					"meta": {
						"files": [
							{
								"path": "code/highcharts.src.js",
								"line": 7865
							}
						]
					}
				},
				{
					"doclet": {
						"name": "Highcharts.swapXY",
						"description": "When we have vertical scrollbar, rifles and arrow in buttons should be\nrotated. The same method is used in Navigator's handles, to rotate them.",
						"kind": "function",
						"isStatic": true,
						"parameters": {
							"path": {
								"description": "Path to be rotated.",
								"types": [
									"Highcharts.SVGPathArray"
								]
							},
							"vertical": {
								"description": "If vertical scrollbar, swap x-y values.",
								"isOptional": true,
								"types": [
									"boolean"
								]
							}
						},
						"return": {
							"types": [
								"Highcharts.SVGPathArray"
							],
							"description": "Rotated path."
						}
					},
					"meta": {
						"files": [
							{
								"path": "code/modules/gantt.src.js",
								"line": 8181
							}
						]
					}
				},
				{
					"doclet": {
						"name": "Highcharts.swapXY",
						"description": "When we have vertical scrollbar, rifles and arrow in buttons should be\nrotated. The same method is used in Navigator's handles, to rotate them.",
						"kind": "function",
						"isStatic": true,
						"parameters": {
							"path": {
								"description": "Path to be rotated.",
								"types": [
									"Highcharts.SVGPathArray"
								]
							},
							"vertical": {
								"description": "If vertical scrollbar, swap x-y values.",
								"isOptional": true,
								"types": [
									"boolean"
								]
							}
						},
						"return": {
							"types": [
								"Highcharts.SVGPathArray"
							],
							"description": "Rotated path."
						}
					},
					"meta": {
						"files": [
							{
								"path": "code/modules/stock.src.js",
								"line": 5357
							}
						]
					}
				},
				{
					"doclet": {
						"name": "Highcharts.syncTimeout",
						"description": "Set a timeout if the delay is given, otherwise perform the function\nsynchronously.",
						"kind": "function",
						"isStatic": true,
						"parameters": {
							"fn": {
								"description": "The function callback.",
								"types": [
									"function"
								]
							},
							"delay": {
								"description": "Delay in milliseconds.",
								"types": [
									"number"
								]
							},
							"context": {
								"description": "An optional context to send to the function callback.",
								"isOptional": true,
								"types": [
									"*"
								]
							}
						},
						"return": {
							"types": [
								"number"
							],
							"description": "An identifier for the timeout that can later be cleared with\n        Highcharts.clearTimeout. Returns -1 if there is no timeout."
						}
					},
					"meta": {
						"files": [
							{
								"path": "code/highcharts.src.js",
								"line": 580
							}
						]
					}
				},
				{
					"doclet": {
						"name": "Highcharts.theme",
						"description": "Theme options that should get applied to the chart. In module mode it\nmight not be possible to change this property because of read-only\nrestrictions, instead use {@link Highcharts.setOptions}.",
						"kind": "member",
						"isDeprecated": true,
						"isStatic": true,
						"types": [
							"Highcharts.Options"
						]
					},
					"meta": {
						"files": [
							{
								"path": "code/highcharts.src.js",
								"line": 152
							}
						]
					}
				},
				{
					"doclet": {
						"name": "Highcharts.time",
						"description": "Global `Time` object with default options. Since v6.0.5, time\nsettings can be applied individually for each chart. If no\nindividual settings apply, this `Time` object is shared by all\ninstances.",
						"kind": "member",
						"isStatic": true,
						"types": [
							"Highcharts.Time"
						]
					},
					"meta": {
						"files": [
							{
								"path": "code/highcharts.src.js",
								"line": 7077
							}
						]
					}
				},
				{
					"doclet": {
						"name": "Highcharts.uniqueKey",
						"description": "Get a unique key for using in internal element id's and pointers. The key is\ncomposed of a random hash specific to this Highcharts instance, and a\ncounter.",
						"kind": "function",
						"isStatic": true,
						"return": {
							"types": [
								"string"
							],
							"description": "A unique key."
						}
					},
					"meta": {
						"files": [
							{
								"path": "code/highcharts.src.js",
								"line": 1672
							}
						]
					}
				},
				{
					"doclet": {
						"name": "Highcharts.useSerialIds",
						"description": "Activates a serial mode for element IDs provided by\n{@link Highcharts.uniqueKey}. This mode can be used in automated tests, where\na simple comparison of two rendered SVG graphics is needed.\n\n**Note:** This is only for testing purposes and will break functionality in\nwebpages with multiple charts.",
						"kind": "function",
						"isStatic": true,
						"parameters": {
							"mode": {
								"description": "Changes the state of serial mode.",
								"isOptional": true,
								"types": [
									"boolean"
								]
							}
						},
						"return": {
							"types": [
								"boolean",
								"undefined"
							],
							"description": "State of the serial mode."
						}
					},
					"meta": {
						"files": [
							{
								"path": "code/highcharts.src.js",
								"line": 1692
							}
						]
					}
				},
				{
					"doclet": {
						"name": "Highcharts.wrap",
						"description": "Wrap a method with extended functionality, preserving the original function.",
						"kind": "function",
						"isStatic": true,
						"parameters": {
							"obj": {
								"description": "The context object that the method belongs to. In real cases, this is\n       often a prototype.",
								"types": [
									"*"
								]
							},
							"method": {
								"description": "The name of the method to extend.",
								"types": [
									"string"
								]
							},
							"func": {
								"description": "A wrapper function callback. This function is called with the same\n       arguments as the original function, except that the original function\n       is unshifted and passed as the first argument.",
								"types": [
									"Highcharts.WrapProceedFunction"
								]
							}
						},
						"return": {
							"types": [
								"void"
							]
						}
					},
					"meta": {
						"files": [
							{
								"path": "code/highcharts.src.js",
								"line": 801
							}
						]
					}
				},
				{
					"doclet": {
						"name": "Highcharts.wrapTickGetMarkPath",
						"description": "Wrap the getMarkPath function to return the path of the radial marker.",
						"kind": "function",
						"return": {
							"types": [
								"void"
							]
						}
					},
					"meta": {
						"files": [
							{
								"path": "code/highcharts-more.src.js",
								"line": 1449
							}
						]
					}
				}
			]
		},
		{
			"doclet": {
				"name": "external:JQuery",
				"description": "Highcharts-extended JQuery.",
				"kind": "external",
				"isGlobal": true
			},
			"meta": {
				"files": [
					{
						"path": "code/highcharts.src.js",
						"line": 1724
					}
				]
			},
			"children": [
				{
					"doclet": {
						"name": "external:JQuery.highcharts",
						"description": "Helper function to return the chart of the current JQuery selector\nelement.",
						"kind": "function",
						"return": {
							"types": [
								"JQuery"
							],
							"description": "The current JQuery selector."
						},
						"parameters": {
							"className": {
								"description": "Name of the factory class in the Highcharts namespace.",
								"isOptional": true,
								"types": [
									"'Chart'",
									"'Map'",
									"'StockChart'",
									"string"
								]
							},
							"options": {
								"description": "The chart options structure.",
								"isOptional": true,
								"types": [
									"Highcharts.Options"
								]
							},
							"callback": {
								"description": "Function to run when the chart has loaded and and all external\n       images are loaded. Defining a\n       [chart.events.load](https://api.highcharts.com/highcharts/chart.events.load)\n       handler is equivalent.",
								"isOptional": true,
								"types": [
									"Highcharts.ChartCallbackFunction"
								]
							}
						}
					},
					"meta": {
						"files": [
							{
								"path": "code/highcharts.src.js",
								"line": 1729
							}
						]
					}
				}
			]
		}
	]
}